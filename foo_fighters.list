
foo_fighters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065bc  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08006758  08006758  00007758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e0  080069e0  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  080069e0  080069e0  000079e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e8  080069e8  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e8  080069e8  000079e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069ec  080069ec  000079ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080069f0  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  08006a60  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08006a60  0000826c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b589  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c07  00000000  00000000  00013629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00015230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000901  00000000  00000000  00015dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ea4  00000000  00000000  000166c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa89  00000000  00000000  0002d565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a58  00000000  00000000  0003cfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3a46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f0  00000000  00000000  000d3a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800673c 	.word	0x0800673c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	0800673c 	.word	0x0800673c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96a 	b.w	8000e3c <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	460c      	mov	r4, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14e      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	458c      	cmp	ip, r1
 8000b90:	4686      	mov	lr, r0
 8000b92:	fab2 f282 	clz	r2, r2
 8000b96:	d962      	bls.n	8000c5e <__udivmoddi4+0xde>
 8000b98:	b14a      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9a:	f1c2 0320 	rsb	r3, r2, #32
 8000b9e:	4091      	lsls	r1, r2
 8000ba0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	4319      	orrs	r1, r3
 8000baa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f f68c 	uxth.w	r6, ip
 8000bb6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc6:	fb04 f106 	mul.w	r1, r4, r6
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd6:	f080 8112 	bcs.w	8000dfe <__udivmoddi4+0x27e>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 810f 	bls.w	8000dfe <__udivmoddi4+0x27e>
 8000be0:	3c02      	subs	r4, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a59      	subs	r1, r3, r1
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bee:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb00 f606 	mul.w	r6, r0, r6
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x94>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c06:	f080 80fc 	bcs.w	8000e02 <__udivmoddi4+0x282>
 8000c0a:	429e      	cmp	r6, r3
 8000c0c:	f240 80f9 	bls.w	8000e02 <__udivmoddi4+0x282>
 8000c10:	4463      	add	r3, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	1b9b      	subs	r3, r3, r6
 8000c16:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11d      	cbz	r5, 8000c26 <__udivmoddi4+0xa6>
 8000c1e:	40d3      	lsrs	r3, r2
 8000c20:	2200      	movs	r2, #0
 8000c22:	e9c5 3200 	strd	r3, r2, [r5]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d905      	bls.n	8000c3a <__udivmoddi4+0xba>
 8000c2e:	b10d      	cbz	r5, 8000c34 <__udivmoddi4+0xb4>
 8000c30:	e9c5 0100 	strd	r0, r1, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	e7f5      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c3a:	fab3 f183 	clz	r1, r3
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	d146      	bne.n	8000cd0 <__udivmoddi4+0x150>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xcc>
 8000c46:	4290      	cmp	r0, r2
 8000c48:	f0c0 80f0 	bcc.w	8000e2c <__udivmoddi4+0x2ac>
 8000c4c:	1a86      	subs	r6, r0, r2
 8000c4e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d0e6      	beq.n	8000c26 <__udivmoddi4+0xa6>
 8000c58:	e9c5 6300 	strd	r6, r3, [r5]
 8000c5c:	e7e3      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	f040 8090 	bne.w	8000d84 <__udivmoddi4+0x204>
 8000c64:	eba1 040c 	sub.w	r4, r1, ip
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	2101      	movs	r1, #1
 8000c72:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c82:	fb07 f006 	mul.w	r0, r7, r6
 8000c86:	4298      	cmp	r0, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x11c>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x11a>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c9a:	4626      	mov	r6, r4
 8000c9c:	1a1c      	subs	r4, r3, r0
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca6:	fb08 4410 	mls	r4, r8, r0, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb00 f707 	mul.w	r7, r0, r7
 8000cb2:	429f      	cmp	r7, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x148>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x146>
 8000cc0:	429f      	cmp	r7, r3
 8000cc2:	f200 80b0 	bhi.w	8000e26 <__udivmoddi4+0x2a6>
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	1bdb      	subs	r3, r3, r7
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0x9c>
 8000cd0:	f1c1 0620 	rsb	r6, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce0:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce4:	ea43 030c 	orr.w	r3, r3, ip
 8000ce8:	40f4      	lsrs	r4, r6
 8000cea:	fa00 f801 	lsl.w	r8, r0, r1
 8000cee:	0c38      	lsrs	r0, r7, #16
 8000cf0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf4:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	fb00 441e 	mls	r4, r0, lr, r4
 8000d00:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d04:	fb0e f90c 	mul.w	r9, lr, ip
 8000d08:	45a1      	cmp	r9, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x1a6>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d16:	f080 8084 	bcs.w	8000e22 <__udivmoddi4+0x2a2>
 8000d1a:	45a1      	cmp	r9, r4
 8000d1c:	f240 8081 	bls.w	8000e22 <__udivmoddi4+0x2a2>
 8000d20:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d24:	443c      	add	r4, r7
 8000d26:	eba4 0409 	sub.w	r4, r4, r9
 8000d2a:	fa1f f983 	uxth.w	r9, r3
 8000d2e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d32:	fb00 4413 	mls	r4, r0, r3, r4
 8000d36:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x1d2>
 8000d42:	193c      	adds	r4, r7, r4
 8000d44:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d48:	d267      	bcs.n	8000e1a <__udivmoddi4+0x29a>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0x29a>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d56:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	429c      	cmp	r4, r3
 8000d60:	46ce      	mov	lr, r9
 8000d62:	469c      	mov	ip, r3
 8000d64:	d351      	bcc.n	8000e0a <__udivmoddi4+0x28a>
 8000d66:	d04e      	beq.n	8000e06 <__udivmoddi4+0x286>
 8000d68:	b155      	cbz	r5, 8000d80 <__udivmoddi4+0x200>
 8000d6a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d72:	fa04 f606 	lsl.w	r6, r4, r6
 8000d76:	40cb      	lsrs	r3, r1
 8000d78:	431e      	orrs	r6, r3
 8000d7a:	40cc      	lsrs	r4, r1
 8000d7c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d80:	2100      	movs	r1, #0
 8000d82:	e750      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f103 	lsr.w	r1, r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	fa24 f303 	lsr.w	r3, r4, r3
 8000d94:	4094      	lsls	r4, r2
 8000d96:	430c      	orrs	r4, r1
 8000d98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da0:	fa1f f78c 	uxth.w	r7, ip
 8000da4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dac:	0c23      	lsrs	r3, r4, #16
 8000dae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db2:	fb00 f107 	mul.w	r1, r0, r7
 8000db6:	4299      	cmp	r1, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x24c>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc2:	d22c      	bcs.n	8000e1e <__udivmoddi4+0x29e>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d92a      	bls.n	8000e1e <__udivmoddi4+0x29e>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb01 f307 	mul.w	r3, r1, r7
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x276>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dec:	d213      	bcs.n	8000e16 <__udivmoddi4+0x296>
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	d911      	bls.n	8000e16 <__udivmoddi4+0x296>
 8000df2:	3902      	subs	r1, #2
 8000df4:	4464      	add	r4, ip
 8000df6:	1ae4      	subs	r4, r4, r3
 8000df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dfc:	e739      	b.n	8000c72 <__udivmoddi4+0xf2>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	e6f0      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e02:	4608      	mov	r0, r1
 8000e04:	e706      	b.n	8000c14 <__udivmoddi4+0x94>
 8000e06:	45c8      	cmp	r8, r9
 8000e08:	d2ae      	bcs.n	8000d68 <__udivmoddi4+0x1e8>
 8000e0a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a8      	b.n	8000d68 <__udivmoddi4+0x1e8>
 8000e16:	4631      	mov	r1, r6
 8000e18:	e7ed      	b.n	8000df6 <__udivmoddi4+0x276>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e799      	b.n	8000d52 <__udivmoddi4+0x1d2>
 8000e1e:	4630      	mov	r0, r6
 8000e20:	e7d4      	b.n	8000dcc <__udivmoddi4+0x24c>
 8000e22:	46d6      	mov	lr, sl
 8000e24:	e77f      	b.n	8000d26 <__udivmoddi4+0x1a6>
 8000e26:	4463      	add	r3, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e74d      	b.n	8000cc8 <__udivmoddi4+0x148>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	4623      	mov	r3, r4
 8000e30:	4608      	mov	r0, r1
 8000e32:	e70f      	b.n	8000c54 <__udivmoddi4+0xd4>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	e730      	b.n	8000c9c <__udivmoddi4+0x11c>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <delay_us>:
#define LCD_D6 GPIO_PIN_8
#define LCD_D7 GPIO_PIN_9

#define t1 200        // gecikme zaman degerleri

void delay_us(uint16_t n){
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
	uint16_t j;
    while (n--) { for(j=0;j<7;j++); }  //48Mhz de 7 olursa  1.1 mikrosaniye
 8000e4a:	e008      	b.n	8000e5e <delay_us+0x1e>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	81fb      	strh	r3, [r7, #14]
 8000e50:	e002      	b.n	8000e58 <delay_us+0x18>
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	3301      	adds	r3, #1
 8000e56:	81fb      	strh	r3, [r7, #14]
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d9f9      	bls.n	8000e52 <delay_us+0x12>
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	80fa      	strh	r2, [r7, #6]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f1      	bne.n	8000e4c <delay_us+0xc>
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <clock>:
	uint16_t j;
    while (n--) { for(j=0;j<222;j++); }  //48Mhz de 1 milisaniye 2666
}

void clock()
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  GPIO_LCD->BSRR=LCD_EN;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <clock+0x28>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2220      	movs	r2, #32
 8000e82:	619a      	str	r2, [r3, #24]
  delay_us(t1);
 8000e84:	20c8      	movs	r0, #200	@ 0xc8
 8000e86:	f7ff ffdb 	bl	8000e40 <delay_us>
  GPIO_LCD->BSRR=LCD_EN << 16;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <clock+0x28>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000e92:	619a      	str	r2, [r3, #24]
  delay_us(t1);
 8000e94:	20c8      	movs	r0, #200	@ 0xc8
 8000e96:	f7ff ffd3 	bl	8000e40 <delay_us>
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <yuklelcd>:


void yuklelcd(uint8_t deger)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]

 HAL_Delay(2);
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f001 fad6 	bl	8002460 <HAL_Delay>
 if((deger & 0x10)==0x10) GPIO_LCD->BSRR=LCD_D4;  else GPIO_LCD->BSRR=LCD_D4 << 16;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d004      	beq.n	8000ec8 <yuklelcd+0x24>
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <yuklelcd+0x94>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2240      	movs	r2, #64	@ 0x40
 8000ec4:	619a      	str	r2, [r3, #24]
 8000ec6:	e004      	b.n	8000ed2 <yuklelcd+0x2e>
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <yuklelcd+0x94>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ed0:	619a      	str	r2, [r3, #24]
 if((deger & 0x20)==0x20) GPIO_LCD->BSRR=LCD_D5;  else GPIO_LCD->BSRR=LCD_D5 << 16;
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <yuklelcd+0x42>
 8000edc:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <yuklelcd+0x94>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2280      	movs	r2, #128	@ 0x80
 8000ee2:	619a      	str	r2, [r3, #24]
 8000ee4:	e004      	b.n	8000ef0 <yuklelcd+0x4c>
 8000ee6:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <yuklelcd+0x94>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000eee:	619a      	str	r2, [r3, #24]
 if((deger & 0x40)==0x40) GPIO_LCD->BSRR=LCD_D6;  else GPIO_LCD->BSRR=LCD_D6 << 16;
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <yuklelcd+0x62>
 8000efa:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <yuklelcd+0x94>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	e004      	b.n	8000f10 <yuklelcd+0x6c>
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <yuklelcd+0x94>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f0e:	619a      	str	r2, [r3, #24]
 if((deger & 0x80)==0x80) GPIO_LCD->BSRR=LCD_D7;  else GPIO_LCD->BSRR=LCD_D7 << 16;
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	da05      	bge.n	8000f24 <yuklelcd+0x80>
 8000f18:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <yuklelcd+0x94>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f20:	619a      	str	r2, [r3, #24]

}
 8000f22:	e004      	b.n	8000f2e <yuklelcd+0x8a>
 if((deger & 0x80)==0x80) GPIO_LCD->BSRR=LCD_D7;  else GPIO_LCD->BSRR=LCD_D7 << 16;
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <yuklelcd+0x94>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f2c:	619a      	str	r2, [r3, #24]
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000000 	.word	0x20000000

08000f3c <sendCmdLcd>:

void sendCmdLcd(uint16_t cmd)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	80fb      	strh	r3, [r7, #6]
yuklelcd(cmd);
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffaa 	bl	8000ea4 <yuklelcd>
GPIO_LCD->BSRR=LCD_RS << 16; //RS=0
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <sendCmdLcd+0x44>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f58:	619a      	str	r2, [r3, #24]
clock();
 8000f5a:	f7ff ff8d 	bl	8000e78 <clock>
yuklelcd(cmd<<4);
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff9c 	bl	8000ea4 <yuklelcd>
clock();
 8000f6c:	f7ff ff84 	bl	8000e78 <clock>
HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f001 fa75 	bl	8002460 <HAL_Delay>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000000 	.word	0x20000000

08000f84 <sendDataLcd>:


void sendDataLcd(uint16_t veri)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
yuklelcd(veri);
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff86 	bl	8000ea4 <yuklelcd>
GPIO_LCD->BSRR=LCD_RS; //RS=1
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <sendDataLcd+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	619a      	str	r2, [r3, #24]
clock();
 8000fa0:	f7ff ff6a 	bl	8000e78 <clock>
yuklelcd(veri<<4);
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff79 	bl	8000ea4 <yuklelcd>
clock();
 8000fb2:	f7ff ff61 	bl	8000e78 <clock>
HAL_Delay(10);
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f001 fa52 	bl	8002460 <HAL_Delay>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000

08000fc8 <writeStr>:

void writeStr(uint16_t sat, uint16_t sut, char * str)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	603a      	str	r2, [r7, #0]
 8000fd2:	80fb      	strh	r3, [r7, #6]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	80bb      	strh	r3, [r7, #4]
	uint16_t adr=0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	81fb      	strh	r3, [r7, #14]

	if(sat==1) adr=0x80+sut;
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d102      	bne.n	8000fe8 <writeStr+0x20>
 8000fe2:	88bb      	ldrh	r3, [r7, #4]
 8000fe4:	3380      	adds	r3, #128	@ 0x80
 8000fe6:	81fb      	strh	r3, [r7, #14]
	if(sat==2) adr=0xC0+sut;
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d102      	bne.n	8000ff4 <writeStr+0x2c>
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	33c0      	adds	r3, #192	@ 0xc0
 8000ff2:	81fb      	strh	r3, [r7, #14]
	if(sat==3) adr=0x94+sut;
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d102      	bne.n	8001000 <writeStr+0x38>
 8000ffa:	88bb      	ldrh	r3, [r7, #4]
 8000ffc:	3394      	adds	r3, #148	@ 0x94
 8000ffe:	81fb      	strh	r3, [r7, #14]
	if(sat==4) adr=0xD4+sut;
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	2b04      	cmp	r3, #4
 8001004:	d102      	bne.n	800100c <writeStr+0x44>
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	33d4      	adds	r3, #212	@ 0xd4
 800100a:	81fb      	strh	r3, [r7, #14]
	sendCmdLcd(adr);
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff94 	bl	8000f3c <sendCmdLcd>
 	while(*str!=0){
 8001014:	e006      	b.n	8001024 <writeStr+0x5c>
  		sendDataLcd(*str++);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	603a      	str	r2, [r7, #0]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ffb0 	bl	8000f84 <sendDataLcd>
 	while(*str!=0){
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f4      	bne.n	8001016 <writeStr+0x4e>

	}
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <clearLcd2>:
   delay_us(t1);
}


void clearLcd2(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
   writeStr(1,0,"                    ");
 800103c:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <clearLcd2+0x30>)
 800103e:	2100      	movs	r1, #0
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff ffc1 	bl	8000fc8 <writeStr>
   writeStr(2,0,"                    ");
 8001046:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <clearLcd2+0x30>)
 8001048:	2100      	movs	r1, #0
 800104a:	2002      	movs	r0, #2
 800104c:	f7ff ffbc 	bl	8000fc8 <writeStr>
   writeStr(3,0,"                    ");
 8001050:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <clearLcd2+0x30>)
 8001052:	2100      	movs	r1, #0
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff ffb7 	bl	8000fc8 <writeStr>
   writeStr(4,0,"                    ");
 800105a:	4a03      	ldr	r2, [pc, #12]	@ (8001068 <clearLcd2+0x30>)
 800105c:	2100      	movs	r1, #0
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff ffb2 	bl	8000fc8 <writeStr>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	08006758 	.word	0x08006758

0800106c <lcdInit>:
  delay_us(t1);
}


void lcdInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  HAL_Delay(20);    //LCD Power ON Initialization time >15ms
 8001070:	2014      	movs	r0, #20
 8001072:	f001 f9f5 	bl	8002460 <HAL_Delay>
  sendCmdLcd(0x02); //4bit mode
 8001076:	2002      	movs	r0, #2
 8001078:	f7ff ff60 	bl	8000f3c <sendCmdLcd>
  HAL_Delay(10);
 800107c:	200a      	movs	r0, #10
 800107e:	f001 f9ef 	bl	8002460 <HAL_Delay>
  sendCmdLcd(0x28); //Initialization of LCD in 4bit mode
 8001082:	2028      	movs	r0, #40	@ 0x28
 8001084:	f7ff ff5a 	bl	8000f3c <sendCmdLcd>
  HAL_Delay(10);
 8001088:	200a      	movs	r0, #10
 800108a:	f001 f9e9 	bl	8002460 <HAL_Delay>
  sendCmdLcd(0x06); //entry mode set: increment automatically, no display shift
 800108e:	2006      	movs	r0, #6
 8001090:	f7ff ff54 	bl	8000f3c <sendCmdLcd>
  HAL_Delay(5);
 8001094:	2005      	movs	r0, #5
 8001096:	f001 f9e3 	bl	8002460 <HAL_Delay>
  sendCmdLcd(0x0C); //0x0E display control:turn display on, cursor on, no blinking
 800109a:	200c      	movs	r0, #12
 800109c:	f7ff ff4e 	bl	8000f3c <sendCmdLcd>
  HAL_Delay(5);
 80010a0:	2005      	movs	r0, #5
 80010a2:	f001 f9dd 	bl	8002460 <HAL_Delay>
  sendCmdLcd(0x01); //clear display, set cursor position to zero
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff48 	bl	8000f3c <sendCmdLcd>
  HAL_Delay(5);
 80010ac:	2005      	movs	r0, #5
 80010ae:	f001 f9d7 	bl	8002460 <HAL_Delay>

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <displayInt>:




void displayInt(uint16_t sat, uint16_t sut, int32_t x)//-99999 .... +99999 degerleri gosterir
{  	uint32_t sayix;
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	603a      	str	r2, [r7, #0]
 80010c2:	80fb      	strh	r3, [r7, #6]
 80010c4:	460b      	mov	r3, r1
 80010c6:	80bb      	strh	r3, [r7, #4]
	uint16_t s4,s3,s2,s1,s0;  // 5 hane yazar

	uint16_t adr=0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	83fb      	strh	r3, [r7, #30]
	if(sat==1) adr=0x80+sut;
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d102      	bne.n	80010d8 <displayInt+0x20>
 80010d2:	88bb      	ldrh	r3, [r7, #4]
 80010d4:	3380      	adds	r3, #128	@ 0x80
 80010d6:	83fb      	strh	r3, [r7, #30]
	if(sat==2) adr=0xC0+sut;
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d102      	bne.n	80010e4 <displayInt+0x2c>
 80010de:	88bb      	ldrh	r3, [r7, #4]
 80010e0:	33c0      	adds	r3, #192	@ 0xc0
 80010e2:	83fb      	strh	r3, [r7, #30]
	if(sat==3) adr=0x94+sut;
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d102      	bne.n	80010f0 <displayInt+0x38>
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	3394      	adds	r3, #148	@ 0x94
 80010ee:	83fb      	strh	r3, [r7, #30]
	if(sat==4) adr=0xD4+sut;
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d102      	bne.n	80010fc <displayInt+0x44>
 80010f6:	88bb      	ldrh	r3, [r7, #4]
 80010f8:	33d4      	adds	r3, #212	@ 0xd4
 80010fa:	83fb      	strh	r3, [r7, #30]

	   sendCmdLcd(adr);
 80010fc:	8bfb      	ldrh	r3, [r7, #30]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff1c 	bl	8000f3c <sendCmdLcd>
	   HAL_Delay(2);
 8001104:	2002      	movs	r0, #2
 8001106:	f001 f9ab 	bl	8002460 <HAL_Delay>
      if(x<0){x=-x;sendDataLcd('-');}  //gelen sayi - ise;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	da05      	bge.n	800111c <displayInt+0x64>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	425b      	negs	r3, r3
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	202d      	movs	r0, #45	@ 0x2d
 8001118:	f7ff ff34 	bl	8000f84 <sendDataLcd>

    sayix=x;  	            s4=sayix/10000;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4a5c      	ldr	r2, [pc, #368]	@ (8001294 <displayInt+0x1dc>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	0b5b      	lsrs	r3, r3, #13
 800112a:	82fb      	strh	r3, [r7, #22]
    sayix=sayix%10000;	    s3=sayix/1000;
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	4a59      	ldr	r2, [pc, #356]	@ (8001294 <displayInt+0x1dc>)
 8001130:	fba2 1203 	umull	r1, r2, r2, r3
 8001134:	0b52      	lsrs	r2, r2, #13
 8001136:	f242 7110 	movw	r1, #10000	@ 0x2710
 800113a:	fb01 f202 	mul.w	r2, r1, r2
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4a54      	ldr	r2, [pc, #336]	@ (8001298 <displayInt+0x1e0>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	099b      	lsrs	r3, r3, #6
 800114c:	82bb      	strh	r3, [r7, #20]
    sayix=sayix%1000;	      s2=sayix/100;
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4a51      	ldr	r2, [pc, #324]	@ (8001298 <displayInt+0x1e0>)
 8001152:	fba2 1203 	umull	r1, r2, r2, r3
 8001156:	0992      	lsrs	r2, r2, #6
 8001158:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800115c:	fb01 f202 	mul.w	r2, r1, r2
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	4a4d      	ldr	r2, [pc, #308]	@ (800129c <displayInt+0x1e4>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	095b      	lsrs	r3, r3, #5
 800116e:	827b      	strh	r3, [r7, #18]
    sayix=sayix%100;	      s1=sayix/10;
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	4a4a      	ldr	r2, [pc, #296]	@ (800129c <displayInt+0x1e4>)
 8001174:	fba2 1203 	umull	r1, r2, r2, r3
 8001178:	0952      	lsrs	r2, r2, #5
 800117a:	2164      	movs	r1, #100	@ 0x64
 800117c:	fb01 f202 	mul.w	r2, r1, r2
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	4a46      	ldr	r2, [pc, #280]	@ (80012a0 <displayInt+0x1e8>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	823b      	strh	r3, [r7, #16]
    sayix=sayix%10;		      s0=sayix;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4b43      	ldr	r3, [pc, #268]	@ (80012a0 <displayInt+0x1e8>)
 8001194:	fba3 1302 	umull	r1, r3, r3, r2
 8001198:	08d9      	lsrs	r1, r3, #3
 800119a:	460b      	mov	r3, r1
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	81fb      	strh	r3, [r7, #14]

	if(x<100)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b63      	cmp	r3, #99	@ 0x63
 80011ae:	dc0b      	bgt.n	80011c8 <displayInt+0x110>
    {sendDataLcd(s1+48);	sendDataLcd(s0+48);}
 80011b0:	8a3b      	ldrh	r3, [r7, #16]
 80011b2:	3330      	adds	r3, #48	@ 0x30
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fee4 	bl	8000f84 <sendDataLcd>
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	3330      	adds	r3, #48	@ 0x30
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fede 	bl	8000f84 <sendDataLcd>

	if(x>=100 && x<1000)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2b63      	cmp	r3, #99	@ 0x63
 80011cc:	dd15      	ble.n	80011fa <displayInt+0x142>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011d4:	da11      	bge.n	80011fa <displayInt+0x142>
	{sendDataLcd(s2+48); sendDataLcd(s1+48); sendDataLcd(s0+48);}
 80011d6:	8a7b      	ldrh	r3, [r7, #18]
 80011d8:	3330      	adds	r3, #48	@ 0x30
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fed1 	bl	8000f84 <sendDataLcd>
 80011e2:	8a3b      	ldrh	r3, [r7, #16]
 80011e4:	3330      	adds	r3, #48	@ 0x30
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fecb 	bl	8000f84 <sendDataLcd>
 80011ee:	89fb      	ldrh	r3, [r7, #14]
 80011f0:	3330      	adds	r3, #48	@ 0x30
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fec5 	bl	8000f84 <sendDataLcd>

	if(x>=1000 && x<10000)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001200:	db1c      	blt.n	800123c <displayInt+0x184>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001208:	4293      	cmp	r3, r2
 800120a:	dc17      	bgt.n	800123c <displayInt+0x184>
    {sendDataLcd(s3+48);	sendDataLcd(s2+48); sendDataLcd(s1+48); sendDataLcd(s0+48);}
 800120c:	8abb      	ldrh	r3, [r7, #20]
 800120e:	3330      	adds	r3, #48	@ 0x30
 8001210:	b29b      	uxth	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff feb6 	bl	8000f84 <sendDataLcd>
 8001218:	8a7b      	ldrh	r3, [r7, #18]
 800121a:	3330      	adds	r3, #48	@ 0x30
 800121c:	b29b      	uxth	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff feb0 	bl	8000f84 <sendDataLcd>
 8001224:	8a3b      	ldrh	r3, [r7, #16]
 8001226:	3330      	adds	r3, #48	@ 0x30
 8001228:	b29b      	uxth	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff feaa 	bl	8000f84 <sendDataLcd>
 8001230:	89fb      	ldrh	r3, [r7, #14]
 8001232:	3330      	adds	r3, #48	@ 0x30
 8001234:	b29b      	uxth	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fea4 	bl	8000f84 <sendDataLcd>

	if(x>=10000 && x<100000)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001242:	4293      	cmp	r3, r2
 8001244:	dd21      	ble.n	800128a <displayInt+0x1d2>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	4a16      	ldr	r2, [pc, #88]	@ (80012a4 <displayInt+0x1ec>)
 800124a:	4293      	cmp	r3, r2
 800124c:	dc1d      	bgt.n	800128a <displayInt+0x1d2>
	{sendDataLcd(s4+48);	sendDataLcd(s3+48); sendDataLcd(s2+48); sendDataLcd(s1+48);	sendDataLcd(s0+48);}
 800124e:	8afb      	ldrh	r3, [r7, #22]
 8001250:	3330      	adds	r3, #48	@ 0x30
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe95 	bl	8000f84 <sendDataLcd>
 800125a:	8abb      	ldrh	r3, [r7, #20]
 800125c:	3330      	adds	r3, #48	@ 0x30
 800125e:	b29b      	uxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fe8f 	bl	8000f84 <sendDataLcd>
 8001266:	8a7b      	ldrh	r3, [r7, #18]
 8001268:	3330      	adds	r3, #48	@ 0x30
 800126a:	b29b      	uxth	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe89 	bl	8000f84 <sendDataLcd>
 8001272:	8a3b      	ldrh	r3, [r7, #16]
 8001274:	3330      	adds	r3, #48	@ 0x30
 8001276:	b29b      	uxth	r3, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe83 	bl	8000f84 <sendDataLcd>
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	3330      	adds	r3, #48	@ 0x30
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe7d 	bl	8000f84 <sendDataLcd>

 }
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	d1b71759 	.word	0xd1b71759
 8001298:	10624dd3 	.word	0x10624dd3
 800129c:	51eb851f 	.word	0x51eb851f
 80012a0:	cccccccd 	.word	0xcccccccd
 80012a4:	0001869f 	.word	0x0001869f

080012a8 <displayFloat>:


//---------------------------------------------------------------------------
void displayFloat(uint16_t sat, uint16_t sut, float x)//9999.999 degerini gosterir
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	ed87 0a00 	vstr	s0, [r7]
 80012b6:	80fb      	strh	r3, [r7, #6]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80bb      	strh	r3, [r7, #4]
	uint32_t sayix;
	uint16_t s5,s4,s3,s2,s1,s0;
	uint16_t adr=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	83fb      	strh	r3, [r7, #30]
	if(sat==1) adr=0x80+sut;
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d102      	bne.n	80012cc <displayFloat+0x24>
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	3380      	adds	r3, #128	@ 0x80
 80012ca:	83fb      	strh	r3, [r7, #30]
	if(sat==2) adr=0xC0+sut;
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d102      	bne.n	80012d8 <displayFloat+0x30>
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	33c0      	adds	r3, #192	@ 0xc0
 80012d6:	83fb      	strh	r3, [r7, #30]
	if(sat==3) adr=0x94+sut;
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d102      	bne.n	80012e4 <displayFloat+0x3c>
 80012de:	88bb      	ldrh	r3, [r7, #4]
 80012e0:	3394      	adds	r3, #148	@ 0x94
 80012e2:	83fb      	strh	r3, [r7, #30]
	if(sat==4) adr=0xD4+sut;
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d102      	bne.n	80012f0 <displayFloat+0x48>
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	33d4      	adds	r3, #212	@ 0xd4
 80012ee:	83fb      	strh	r3, [r7, #30]


	sendCmdLcd(adr);
 80012f0:	8bfb      	ldrh	r3, [r7, #30]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe22 	bl	8000f3c <sendCmdLcd>

   	if(x<0){x=-x;sendDataLcd('-');}  //gelen sayi - ise;
 80012f8:	edd7 7a00 	vldr	s15, [r7]
 80012fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001304:	d508      	bpl.n	8001318 <displayFloat+0x70>
 8001306:	edd7 7a00 	vldr	s15, [r7]
 800130a:	eef1 7a67 	vneg.f32	s15, s15
 800130e:	edc7 7a00 	vstr	s15, [r7]
 8001312:	202d      	movs	r0, #45	@ 0x2d
 8001314:	f7ff fe36 	bl	8000f84 <sendDataLcd>

    sayix=x*100;		    	s5=sayix/100000;
 8001318:	edd7 7a00 	vldr	s15, [r7]
 800131c:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800156c <displayFloat+0x2c4>
 8001320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001328:	ee17 3a90 	vmov	r3, s15
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	4a8f      	ldr	r2, [pc, #572]	@ (8001570 <displayFloat+0x2c8>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	09db      	lsrs	r3, r3, #7
 800133a:	82fb      	strh	r3, [r7, #22]
    sayix=sayix%100000;	    	s4=sayix/10000;
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	095a      	lsrs	r2, r3, #5
 8001340:	498b      	ldr	r1, [pc, #556]	@ (8001570 <displayFloat+0x2c8>)
 8001342:	fba1 1202 	umull	r1, r2, r1, r2
 8001346:	09d2      	lsrs	r2, r2, #7
 8001348:	498a      	ldr	r1, [pc, #552]	@ (8001574 <displayFloat+0x2cc>)
 800134a:	fb01 f202 	mul.w	r2, r1, r2
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4a88      	ldr	r2, [pc, #544]	@ (8001578 <displayFloat+0x2d0>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0b5b      	lsrs	r3, r3, #13
 800135c:	82bb      	strh	r3, [r7, #20]
    sayix=sayix%10000;	    	s3=sayix/1000;
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4a85      	ldr	r2, [pc, #532]	@ (8001578 <displayFloat+0x2d0>)
 8001362:	fba2 1203 	umull	r1, r2, r2, r3
 8001366:	0b52      	lsrs	r2, r2, #13
 8001368:	f242 7110 	movw	r1, #10000	@ 0x2710
 800136c:	fb01 f202 	mul.w	r2, r1, r2
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	4a81      	ldr	r2, [pc, #516]	@ (800157c <displayFloat+0x2d4>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	827b      	strh	r3, [r7, #18]
    sayix=sayix%1000;	    	s2=sayix/100;
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	4a7e      	ldr	r2, [pc, #504]	@ (800157c <displayFloat+0x2d4>)
 8001384:	fba2 1203 	umull	r1, r2, r2, r3
 8001388:	0992      	lsrs	r2, r2, #6
 800138a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800138e:	fb01 f202 	mul.w	r2, r1, r2
 8001392:	1a9b      	subs	r3, r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4a79      	ldr	r2, [pc, #484]	@ (8001580 <displayFloat+0x2d8>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	823b      	strh	r3, [r7, #16]
	sayix=sayix%100;	    	s1=sayix/10;
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4a76      	ldr	r2, [pc, #472]	@ (8001580 <displayFloat+0x2d8>)
 80013a6:	fba2 1203 	umull	r1, r2, r2, r3
 80013aa:	0952      	lsrs	r2, r2, #5
 80013ac:	2164      	movs	r1, #100	@ 0x64
 80013ae:	fb01 f202 	mul.w	r2, r1, r2
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4a72      	ldr	r2, [pc, #456]	@ (8001584 <displayFloat+0x2dc>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	81fb      	strh	r3, [r7, #14]
	sayix=sayix%10;	    		s0=sayix;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001584 <displayFloat+0x2dc>)
 80013c6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ca:	08d9      	lsrs	r1, r3, #3
 80013cc:	460b      	mov	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	81bb      	strh	r3, [r7, #12]


    sut=sut+1;
 80013dc:	88bb      	ldrh	r3, [r7, #4]
 80013de:	3301      	adds	r3, #1
 80013e0:	80bb      	strh	r3, [r7, #4]

    if(x>=0 && x<10)  //9.99
 80013e2:	edd7 7a00 	vldr	s15, [r7]
 80013e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	db1d      	blt.n	800142c <displayFloat+0x184>
 80013f0:	edd7 7a00 	vldr	s15, [r7]
 80013f4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	d514      	bpl.n	800142c <displayFloat+0x184>
     { sendDataLcd(s2+48);
 8001402:	8a3b      	ldrh	r3, [r7, #16]
 8001404:	3330      	adds	r3, #48	@ 0x30
 8001406:	b29b      	uxth	r3, r3
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fdbb 	bl	8000f84 <sendDataLcd>
   	   sendDataLcd('.');
 800140e:	202e      	movs	r0, #46	@ 0x2e
 8001410:	f7ff fdb8 	bl	8000f84 <sendDataLcd>
       sendDataLcd(s1+48);	sendDataLcd(s0+48);
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	3330      	adds	r3, #48	@ 0x30
 8001418:	b29b      	uxth	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fdb2 	bl	8000f84 <sendDataLcd>
 8001420:	89bb      	ldrh	r3, [r7, #12]
 8001422:	3330      	adds	r3, #48	@ 0x30
 8001424:	b29b      	uxth	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fdac 	bl	8000f84 <sendDataLcd>
	 }


	if(x>=10 && x<100)//99.99
 800142c:	edd7 7a00 	vldr	s15, [r7]
 8001430:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	db23      	blt.n	8001486 <displayFloat+0x1de>
 800143e:	edd7 7a00 	vldr	s15, [r7]
 8001442:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800156c <displayFloat+0x2c4>
 8001446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	d51a      	bpl.n	8001486 <displayFloat+0x1de>
    {
	 sendDataLcd(s3+48); sendDataLcd(s2+48);
 8001450:	8a7b      	ldrh	r3, [r7, #18]
 8001452:	3330      	adds	r3, #48	@ 0x30
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fd94 	bl	8000f84 <sendDataLcd>
 800145c:	8a3b      	ldrh	r3, [r7, #16]
 800145e:	3330      	adds	r3, #48	@ 0x30
 8001460:	b29b      	uxth	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fd8e 	bl	8000f84 <sendDataLcd>
   	 sendDataLcd('.');
 8001468:	202e      	movs	r0, #46	@ 0x2e
 800146a:	f7ff fd8b 	bl	8000f84 <sendDataLcd>
     sendDataLcd(s1+48); sendDataLcd(s0+48);
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	3330      	adds	r3, #48	@ 0x30
 8001472:	b29b      	uxth	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fd85 	bl	8000f84 <sendDataLcd>
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	3330      	adds	r3, #48	@ 0x30
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fd7f 	bl	8000f84 <sendDataLcd>

	}

	if(x>=100 && x<1000) //999.99
 8001486:	edd7 7a00 	vldr	s15, [r7]
 800148a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800156c <displayFloat+0x2c4>
 800148e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	db29      	blt.n	80014ec <displayFloat+0x244>
 8001498:	edd7 7a00 	vldr	s15, [r7]
 800149c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001588 <displayFloat+0x2e0>
 80014a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	d520      	bpl.n	80014ec <displayFloat+0x244>
    {
	 sendDataLcd(s4+48); sendDataLcd(s3+48); sendDataLcd(s2+48);
 80014aa:	8abb      	ldrh	r3, [r7, #20]
 80014ac:	3330      	adds	r3, #48	@ 0x30
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fd67 	bl	8000f84 <sendDataLcd>
 80014b6:	8a7b      	ldrh	r3, [r7, #18]
 80014b8:	3330      	adds	r3, #48	@ 0x30
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fd61 	bl	8000f84 <sendDataLcd>
 80014c2:	8a3b      	ldrh	r3, [r7, #16]
 80014c4:	3330      	adds	r3, #48	@ 0x30
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fd5b 	bl	8000f84 <sendDataLcd>
   	 sendDataLcd('.');
 80014ce:	202e      	movs	r0, #46	@ 0x2e
 80014d0:	f7ff fd58 	bl	8000f84 <sendDataLcd>
   	 sendDataLcd(s1+48); sendDataLcd(s0+48);
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	3330      	adds	r3, #48	@ 0x30
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fd52 	bl	8000f84 <sendDataLcd>
 80014e0:	89bb      	ldrh	r3, [r7, #12]
 80014e2:	3330      	adds	r3, #48	@ 0x30
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fd4c 	bl	8000f84 <sendDataLcd>
	}

    if(x>=1000 && x<10000)//9999.99
 80014ec:	edd7 7a00 	vldr	s15, [r7]
 80014f0:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001588 <displayFloat+0x2e0>
 80014f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	da00      	bge.n	8001500 <displayFloat+0x258>
	}




 }
 80014fe:	e030      	b.n	8001562 <displayFloat+0x2ba>
    if(x>=1000 && x<10000)//9999.99
 8001500:	edd7 7a00 	vldr	s15, [r7]
 8001504:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800158c <displayFloat+0x2e4>
 8001508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	d400      	bmi.n	8001514 <displayFloat+0x26c>
 }
 8001512:	e026      	b.n	8001562 <displayFloat+0x2ba>
     sendDataLcd(s5+48); sendDataLcd(s4+48); sendDataLcd(s3+48); sendDataLcd(s2+48);
 8001514:	8afb      	ldrh	r3, [r7, #22]
 8001516:	3330      	adds	r3, #48	@ 0x30
 8001518:	b29b      	uxth	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fd32 	bl	8000f84 <sendDataLcd>
 8001520:	8abb      	ldrh	r3, [r7, #20]
 8001522:	3330      	adds	r3, #48	@ 0x30
 8001524:	b29b      	uxth	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fd2c 	bl	8000f84 <sendDataLcd>
 800152c:	8a7b      	ldrh	r3, [r7, #18]
 800152e:	3330      	adds	r3, #48	@ 0x30
 8001530:	b29b      	uxth	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fd26 	bl	8000f84 <sendDataLcd>
 8001538:	8a3b      	ldrh	r3, [r7, #16]
 800153a:	3330      	adds	r3, #48	@ 0x30
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fd20 	bl	8000f84 <sendDataLcd>
   	 sendDataLcd('.');
 8001544:	202e      	movs	r0, #46	@ 0x2e
 8001546:	f7ff fd1d 	bl	8000f84 <sendDataLcd>
   	 sendDataLcd(s1+48); sendDataLcd(s0+48);
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	3330      	adds	r3, #48	@ 0x30
 800154e:	b29b      	uxth	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fd17 	bl	8000f84 <sendDataLcd>
 8001556:	89bb      	ldrh	r3, [r7, #12]
 8001558:	3330      	adds	r3, #48	@ 0x30
 800155a:	b29b      	uxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fd11 	bl	8000f84 <sendDataLcd>
 }
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	42c80000 	.word	0x42c80000
 8001570:	0a7c5ac5 	.word	0x0a7c5ac5
 8001574:	000186a0 	.word	0x000186a0
 8001578:	d1b71759 	.word	0xd1b71759
 800157c:	10624dd3 	.word	0x10624dd3
 8001580:	51eb851f 	.word	0x51eb851f
 8001584:	cccccccd 	.word	0xcccccccd
 8001588:	447a0000 	.word	0x447a0000
 800158c:	461c4000 	.word	0x461c4000

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001594:	b08c      	sub	sp, #48	@ 0x30
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001598:	f000 fef0 	bl	800237c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159c:	f000 fb10 	bl	8001bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a0:	f000 fc1a 	bl	8001dd8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80015a4:	f000 fbc8 	bl	8001d38 <MX_TIM1_Init>
  MX_ADC1_Init();
 80015a8:	f000 fb74 	bl	8001c94 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2108      	movs	r1, #8
 80015b0:	48b5      	ldr	r0, [pc, #724]	@ (8001888 <main+0x2f8>)
 80015b2:	f002 fa49 	bl	8003a48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2104      	movs	r1, #4
 80015ba:	48b3      	ldr	r0, [pc, #716]	@ (8001888 <main+0x2f8>)
 80015bc:	f002 fa44 	bl	8003a48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2102      	movs	r1, #2
 80015c4:	48b0      	ldr	r0, [pc, #704]	@ (8001888 <main+0x2f8>)
 80015c6:	f002 fa3f 	bl	8003a48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2101      	movs	r1, #1
 80015ce:	48ae      	ldr	r0, [pc, #696]	@ (8001888 <main+0x2f8>)
 80015d0:	f002 fa3a 	bl	8003a48 <HAL_GPIO_WritePin>

  lcdInit();
 80015d4:	f7ff fd4a 	bl	800106c <lcdInit>
  writeStr(1,0,"Gomulu Sistemler");
 80015d8:	4aac      	ldr	r2, [pc, #688]	@ (800188c <main+0x2fc>)
 80015da:	2100      	movs	r1, #0
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff fcf3 	bl	8000fc8 <writeStr>
  writeStr(2,0,"Final Odevi");
 80015e2:	4aab      	ldr	r2, [pc, #684]	@ (8001890 <main+0x300>)
 80015e4:	2100      	movs	r1, #0
 80015e6:	2002      	movs	r0, #2
 80015e8:	f7ff fcee 	bl	8000fc8 <writeStr>
  HAL_Delay(5000);
 80015ec:	f241 3088 	movw	r0, #5000	@ 0x1388
 80015f0:	f000 ff36 	bl	8002460 <HAL_Delay>
  clearLcd2();
 80015f4:	f7ff fd20 	bl	8001038 <clearLcd2>

  sayi=0; uyg=0; tiksay=0;
 80015f8:	4ba6      	ldr	r3, [pc, #664]	@ (8001894 <main+0x304>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	4ba6      	ldr	r3, [pc, #664]	@ (8001898 <main+0x308>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	4ba5      	ldr	r3, [pc, #660]	@ (800189c <main+0x30c>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
  writeStr(1,0,"Secim Yapiniz");
 800160a:	4aa5      	ldr	r2, [pc, #660]	@ (80018a0 <main+0x310>)
 800160c:	2100      	movs	r1, #0
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fcda 	bl	8000fc8 <writeStr>
  writeStr(2,0,"Seciminiz: ");
 8001614:	4aa3      	ldr	r2, [pc, #652]	@ (80018a4 <main+0x314>)
 8001616:	2100      	movs	r1, #0
 8001618:	2002      	movs	r0, #2
 800161a:	f7ff fcd5 	bl	8000fc8 <writeStr>
  displayInt(2,11,sayi);
 800161e:	4b9d      	ldr	r3, [pc, #628]	@ (8001894 <main+0x304>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	210b      	movs	r1, #11
 8001626:	2002      	movs	r0, #2
 8001628:	f7ff fd46 	bl	80010b8 <displayInt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uyg == 0) {
 800162c:	4b9a      	ldr	r3, [pc, #616]	@ (8001898 <main+0x308>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d127      	bne.n	8001684 <main+0xf4>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	2108      	movs	r1, #8
 8001638:	4893      	ldr	r0, [pc, #588]	@ (8001888 <main+0x2f8>)
 800163a:	f002 fa05 	bl	8003a48 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	2104      	movs	r1, #4
 8001642:	4891      	ldr	r0, [pc, #580]	@ (8001888 <main+0x2f8>)
 8001644:	f002 fa00 	bl	8003a48 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001648:	2201      	movs	r2, #1
 800164a:	2102      	movs	r1, #2
 800164c:	488e      	ldr	r0, [pc, #568]	@ (8001888 <main+0x2f8>)
 800164e:	f002 f9fb 	bl	8003a48 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001652:	2201      	movs	r2, #1
 8001654:	2101      	movs	r1, #1
 8001656:	488c      	ldr	r0, [pc, #560]	@ (8001888 <main+0x2f8>)
 8001658:	f002 f9f6 	bl	8003a48 <HAL_GPIO_WritePin>

	  	  clearLcd2();
 800165c:	f7ff fcec 	bl	8001038 <clearLcd2>
	  	  writeStr(1,0,"Secim Yapiniz");
 8001660:	4a8f      	ldr	r2, [pc, #572]	@ (80018a0 <main+0x310>)
 8001662:	2100      	movs	r1, #0
 8001664:	2001      	movs	r0, #1
 8001666:	f7ff fcaf 	bl	8000fc8 <writeStr>
	  	  writeStr(2,0,"Seciminiz: ");
 800166a:	4a8e      	ldr	r2, [pc, #568]	@ (80018a4 <main+0x314>)
 800166c:	2100      	movs	r1, #0
 800166e:	2002      	movs	r0, #2
 8001670:	f7ff fcaa 	bl	8000fc8 <writeStr>
	  	  displayInt(2,11,sayi);
 8001674:	4b87      	ldr	r3, [pc, #540]	@ (8001894 <main+0x304>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	210b      	movs	r1, #11
 800167c:	2002      	movs	r0, #2
 800167e:	f7ff fd1b 	bl	80010b8 <displayInt>
 8001682:	e7d3      	b.n	800162c <main+0x9c>
	  }
	  else if (uyg == 1) {
 8001684:	4b84      	ldr	r3, [pc, #528]	@ (8001898 <main+0x308>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d10c      	bne.n	80016a6 <main+0x116>
		  clearLcd2();
 800168c:	f7ff fcd4 	bl	8001038 <clearLcd2>
		  writeStr(1,0,"Projeyi Yapanlar:");
 8001690:	4a85      	ldr	r2, [pc, #532]	@ (80018a8 <main+0x318>)
 8001692:	2100      	movs	r1, #0
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff fc97 	bl	8000fc8 <writeStr>
		  writeStr(2,0,"Ahmet Asfour");
 800169a:	4a84      	ldr	r2, [pc, #528]	@ (80018ac <main+0x31c>)
 800169c:	2100      	movs	r1, #0
 800169e:	2002      	movs	r0, #2
 80016a0:	f7ff fc92 	bl	8000fc8 <writeStr>
 80016a4:	e7c2      	b.n	800162c <main+0x9c>
	  }
	  else if (uyg == 15) {
 80016a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001898 <main+0x308>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	d10c      	bne.n	80016c8 <main+0x138>
		  clearLcd2();
 80016ae:	f7ff fcc3 	bl	8001038 <clearLcd2>
		  writeStr(1,0,"Mert Kurt");
 80016b2:	4a7f      	ldr	r2, [pc, #508]	@ (80018b0 <main+0x320>)
 80016b4:	2100      	movs	r1, #0
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff fc86 	bl	8000fc8 <writeStr>
		  writeStr(2,0,"Yunus Delibas");
 80016bc:	4a7d      	ldr	r2, [pc, #500]	@ (80018b4 <main+0x324>)
 80016be:	2100      	movs	r1, #0
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7ff fc81 	bl	8000fc8 <writeStr>
 80016c6:	e7b1      	b.n	800162c <main+0x9c>
	  }
	  else if (uyg == 2) {
 80016c8:	4b73      	ldr	r3, [pc, #460]	@ (8001898 <main+0x308>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	f040 80f5 	bne.w	80018bc <main+0x32c>
		  clearLcd2();
 80016d2:	f7ff fcb1 	bl	8001038 <clearLcd2>
		  writeStr(1,0,"LED'ler yaniyor.");
 80016d6:	4a78      	ldr	r2, [pc, #480]	@ (80018b8 <main+0x328>)
 80016d8:	2100      	movs	r1, #0
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff fc74 	bl	8000fc8 <writeStr>

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2101      	movs	r1, #1
 80016e4:	4868      	ldr	r0, [pc, #416]	@ (8001888 <main+0x2f8>)
 80016e6:	f002 f9af 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80016ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016ee:	f000 feb7 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2102      	movs	r1, #2
 80016f6:	4864      	ldr	r0, [pc, #400]	@ (8001888 <main+0x2f8>)
 80016f8:	f002 f9a6 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2101      	movs	r1, #1
 8001700:	4861      	ldr	r0, [pc, #388]	@ (8001888 <main+0x2f8>)
 8001702:	f002 f9a1 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001706:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800170a:	f000 fea9 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2101      	movs	r1, #1
 8001712:	485d      	ldr	r0, [pc, #372]	@ (8001888 <main+0x2f8>)
 8001714:	f002 f998 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001718:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800171c:	f000 fea0 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2104      	movs	r1, #4
 8001724:	4858      	ldr	r0, [pc, #352]	@ (8001888 <main+0x2f8>)
 8001726:	f002 f98f 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800172a:	2201      	movs	r2, #1
 800172c:	2102      	movs	r1, #2
 800172e:	4856      	ldr	r0, [pc, #344]	@ (8001888 <main+0x2f8>)
 8001730:	f002 f98a 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001734:	2201      	movs	r2, #1
 8001736:	2101      	movs	r1, #1
 8001738:	4853      	ldr	r0, [pc, #332]	@ (8001888 <main+0x2f8>)
 800173a:	f002 f985 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800173e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001742:	f000 fe8d 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2101      	movs	r1, #1
 800174a:	484f      	ldr	r0, [pc, #316]	@ (8001888 <main+0x2f8>)
 800174c:	f002 f97c 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001750:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001754:	f000 fe84 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2102      	movs	r1, #2
 800175c:	484a      	ldr	r0, [pc, #296]	@ (8001888 <main+0x2f8>)
 800175e:	f002 f973 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001762:	2201      	movs	r2, #1
 8001764:	2101      	movs	r1, #1
 8001766:	4848      	ldr	r0, [pc, #288]	@ (8001888 <main+0x2f8>)
 8001768:	f002 f96e 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800176c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001770:	f000 fe76 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2101      	movs	r1, #1
 8001778:	4843      	ldr	r0, [pc, #268]	@ (8001888 <main+0x2f8>)
 800177a:	f002 f965 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800177e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001782:	f000 fe6d 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2108      	movs	r1, #8
 800178a:	483f      	ldr	r0, [pc, #252]	@ (8001888 <main+0x2f8>)
 800178c:	f002 f95c 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001790:	2201      	movs	r2, #1
 8001792:	2104      	movs	r1, #4
 8001794:	483c      	ldr	r0, [pc, #240]	@ (8001888 <main+0x2f8>)
 8001796:	f002 f957 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800179a:	2201      	movs	r2, #1
 800179c:	2102      	movs	r1, #2
 800179e:	483a      	ldr	r0, [pc, #232]	@ (8001888 <main+0x2f8>)
 80017a0:	f002 f952 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2101      	movs	r1, #1
 80017a8:	4837      	ldr	r0, [pc, #220]	@ (8001888 <main+0x2f8>)
 80017aa:	f002 f94d 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80017ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017b2:	f000 fe55 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	4833      	ldr	r0, [pc, #204]	@ (8001888 <main+0x2f8>)
 80017bc:	f002 f944 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80017c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017c4:	f000 fe4c 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2102      	movs	r1, #2
 80017cc:	482e      	ldr	r0, [pc, #184]	@ (8001888 <main+0x2f8>)
 80017ce:	f002 f93b 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80017d2:	2201      	movs	r2, #1
 80017d4:	2101      	movs	r1, #1
 80017d6:	482c      	ldr	r0, [pc, #176]	@ (8001888 <main+0x2f8>)
 80017d8:	f002 f936 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80017dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017e0:	f000 fe3e 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2101      	movs	r1, #1
 80017e8:	4827      	ldr	r0, [pc, #156]	@ (8001888 <main+0x2f8>)
 80017ea:	f002 f92d 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80017ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017f2:	f000 fe35 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2104      	movs	r1, #4
 80017fa:	4823      	ldr	r0, [pc, #140]	@ (8001888 <main+0x2f8>)
 80017fc:	f002 f924 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001800:	2201      	movs	r2, #1
 8001802:	2102      	movs	r1, #2
 8001804:	4820      	ldr	r0, [pc, #128]	@ (8001888 <main+0x2f8>)
 8001806:	f002 f91f 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 800180a:	2201      	movs	r2, #1
 800180c:	2101      	movs	r1, #1
 800180e:	481e      	ldr	r0, [pc, #120]	@ (8001888 <main+0x2f8>)
 8001810:	f002 f91a 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001814:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001818:	f000 fe22 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2101      	movs	r1, #1
 8001820:	4819      	ldr	r0, [pc, #100]	@ (8001888 <main+0x2f8>)
 8001822:	f002 f911 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001826:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800182a:	f000 fe19 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2102      	movs	r1, #2
 8001832:	4815      	ldr	r0, [pc, #84]	@ (8001888 <main+0x2f8>)
 8001834:	f002 f908 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001838:	2201      	movs	r2, #1
 800183a:	2101      	movs	r1, #1
 800183c:	4812      	ldr	r0, [pc, #72]	@ (8001888 <main+0x2f8>)
 800183e:	f002 f903 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001842:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001846:	f000 fe0b 	bl	8002460 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2101      	movs	r1, #1
 800184e:	480e      	ldr	r0, [pc, #56]	@ (8001888 <main+0x2f8>)
 8001850:	f002 f8fa 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001854:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001858:	f000 fe02 	bl	8002460 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800185c:	2201      	movs	r2, #1
 800185e:	2108      	movs	r1, #8
 8001860:	4809      	ldr	r0, [pc, #36]	@ (8001888 <main+0x2f8>)
 8001862:	f002 f8f1 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001866:	2201      	movs	r2, #1
 8001868:	2104      	movs	r1, #4
 800186a:	4807      	ldr	r0, [pc, #28]	@ (8001888 <main+0x2f8>)
 800186c:	f002 f8ec 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001870:	2201      	movs	r2, #1
 8001872:	2102      	movs	r1, #2
 8001874:	4804      	ldr	r0, [pc, #16]	@ (8001888 <main+0x2f8>)
 8001876:	f002 f8e7 	bl	8003a48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 800187a:	2201      	movs	r2, #1
 800187c:	2101      	movs	r1, #1
 800187e:	4802      	ldr	r0, [pc, #8]	@ (8001888 <main+0x2f8>)
 8001880:	f002 f8e2 	bl	8003a48 <HAL_GPIO_WritePin>
 8001884:	e6d2      	b.n	800162c <main+0x9c>
 8001886:	bf00      	nop
 8001888:	40020000 	.word	0x40020000
 800188c:	08006770 	.word	0x08006770
 8001890:	08006784 	.word	0x08006784
 8001894:	20000128 	.word	0x20000128
 8001898:	2000012c 	.word	0x2000012c
 800189c:	2000011c 	.word	0x2000011c
 80018a0:	08006790 	.word	0x08006790
 80018a4:	080067a0 	.word	0x080067a0
 80018a8:	080067ac 	.word	0x080067ac
 80018ac:	080067c0 	.word	0x080067c0
 80018b0:	080067d0 	.word	0x080067d0
 80018b4:	080067dc 	.word	0x080067dc
 80018b8:	080067ec 	.word	0x080067ec
	  }
	  else if (uyg == 3) {
 80018bc:	4bb0      	ldr	r3, [pc, #704]	@ (8001b80 <main+0x5f0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	f040 8132 	bne.w	8001b2a <main+0x59a>
		  clearLcd2();
 80018c6:	f7ff fbb7 	bl	8001038 <clearLcd2>

		  ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
		  sConfig.Channel = ADC_CHANNEL_5;
 80018d6:	2305      	movs	r3, #5
 80018d8:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	48a7      	ldr	r0, [pc, #668]	@ (8001b84 <main+0x5f4>)
 80018e8:	f001 fa4a 	bl	8002d80 <HAL_ADC_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <main+0x366>
		  {
		      Error_Handler();
 80018f2:	f000 fb2d 	bl	8001f50 <Error_Handler>
		  }

		  HAL_ADC_Start(&hadc1);
 80018f6:	48a3      	ldr	r0, [pc, #652]	@ (8001b84 <main+0x5f4>)
 80018f8:	f000 ff34 	bl	8002764 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 80018fc:	2164      	movs	r1, #100	@ 0x64
 80018fe:	48a1      	ldr	r0, [pc, #644]	@ (8001b84 <main+0x5f4>)
 8001900:	f001 f848 	bl	8002994 <HAL_ADC_PollForConversion>
		  potValue = HAL_ADC_GetValue(&hadc1);
 8001904:	489f      	ldr	r0, [pc, #636]	@ (8001b84 <main+0x5f4>)
 8001906:	f001 fa0f 	bl	8002d28 <HAL_ADC_GetValue>
 800190a:	4603      	mov	r3, r0
 800190c:	4a9e      	ldr	r2, [pc, #632]	@ (8001b88 <main+0x5f8>)
 800190e:	6013      	str	r3, [r2, #0]
		  HAL_ADC_Stop(&hadc1);
 8001910:	489c      	ldr	r0, [pc, #624]	@ (8001b84 <main+0x5f4>)
 8001912:	f000 ffff 	bl	8002914 <HAL_ADC_Stop>
		  float voltage = (potValue / 4096.0) * 5.0;
 8001916:	4b9c      	ldr	r3, [pc, #624]	@ (8001b88 <main+0x5f8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fd9e 	bl	800045c <__aeabi_ui2d>
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	4b99      	ldr	r3, [pc, #612]	@ (8001b8c <main+0x5fc>)
 8001926:	f7fe ff3d 	bl	80007a4 <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	4b96      	ldr	r3, [pc, #600]	@ (8001b90 <main+0x600>)
 8001938:	f7fe fe0a 	bl	8000550 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f8b4 	bl	8000ab0 <__aeabi_d2f>
 8001948:	4603      	mov	r3, r0
 800194a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		  writeStr(1, 0, "POT: ");
 800194c:	4a91      	ldr	r2, [pc, #580]	@ (8001b94 <main+0x604>)
 800194e:	2100      	movs	r1, #0
 8001950:	2001      	movs	r0, #1
 8001952:	f7ff fb39 	bl	8000fc8 <writeStr>
		  displayFloat(1, 5, voltage);
 8001956:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800195a:	2105      	movs	r1, #5
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff fca3 	bl	80012a8 <displayFloat>
		  writeStr(1, 9, "V");
 8001962:	4a8d      	ldr	r2, [pc, #564]	@ (8001b98 <main+0x608>)
 8001964:	2109      	movs	r1, #9
 8001966:	2001      	movs	r0, #1
 8001968:	f7ff fb2e 	bl	8000fc8 <writeStr>

		  sConfig.Channel = ADC_CHANNEL_4;
 800196c:	2304      	movs	r3, #4
 800196e:	607b      	str	r3, [r7, #4]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4883      	ldr	r0, [pc, #524]	@ (8001b84 <main+0x5f4>)
 8001976:	f001 fa03 	bl	8002d80 <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <main+0x3f4>
		  {
		      Error_Handler();
 8001980:	f000 fae6 	bl	8001f50 <Error_Handler>
		  }

		  HAL_ADC_Start(&hadc1);
 8001984:	487f      	ldr	r0, [pc, #508]	@ (8001b84 <main+0x5f4>)
 8001986:	f000 feed 	bl	8002764 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 800198a:	2164      	movs	r1, #100	@ 0x64
 800198c:	487d      	ldr	r0, [pc, #500]	@ (8001b84 <main+0x5f4>)
 800198e:	f001 f801 	bl	8002994 <HAL_ADC_PollForConversion>
		  adcValue = HAL_ADC_GetValue(&hadc1);
 8001992:	487c      	ldr	r0, [pc, #496]	@ (8001b84 <main+0x5f4>)
 8001994:	f001 f9c8 	bl	8002d28 <HAL_ADC_GetValue>
 8001998:	4603      	mov	r3, r0
 800199a:	4a80      	ldr	r2, [pc, #512]	@ (8001b9c <main+0x60c>)
 800199c:	6013      	str	r3, [r2, #0]
		  HAL_ADC_Stop(&hadc1);
 800199e:	4879      	ldr	r0, [pc, #484]	@ (8001b84 <main+0x5f4>)
 80019a0:	f000 ffb8 	bl	8002914 <HAL_ADC_Stop>

		  float Rntc;
		  float Temperature;
		  float Vout = (adcValue / 4096.0) * 3.3;
 80019a4:	4b7d      	ldr	r3, [pc, #500]	@ (8001b9c <main+0x60c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fd57 	bl	800045c <__aeabi_ui2d>
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b76      	ldr	r3, [pc, #472]	@ (8001b8c <main+0x5fc>)
 80019b4:	f7fe fef6 	bl	80007a4 <__aeabi_ddiv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	a367      	add	r3, pc, #412	@ (adr r3, 8001b60 <main+0x5d0>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe fdc3 	bl	8000550 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff f86d 	bl	8000ab0 <__aeabi_d2f>
 80019d6:	4603      	mov	r3, r0
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		  Rntc = (10000.0 * Vout) / (3.3 - Vout);
 80019da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019dc:	f7fe fd60 	bl	80004a0 <__aeabi_f2d>
 80019e0:	a361      	add	r3, pc, #388	@ (adr r3, 8001b68 <main+0x5d8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fdb3 	bl	8000550 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	461d      	mov	r5, r3
 80019f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019f4:	f7fe fd54 	bl	80004a0 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	a158      	add	r1, pc, #352	@ (adr r1, 8001b60 <main+0x5d0>)
 80019fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a02:	f7fe fbed 	bl	80001e0 <__aeabi_dsub>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fec9 	bl	80007a4 <__aeabi_ddiv>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f849 	bl	8000ab0 <__aeabi_d2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24

		  float A = 1.009249522e-03;
 8001a22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba0 <main+0x610>)
 8001a24:	623b      	str	r3, [r7, #32]
		  float B = 2.378405444e-04;
 8001a26:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba4 <main+0x614>)
 8001a28:	61fb      	str	r3, [r7, #28]
		  float C = 2.019202697e-07;
 8001a2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba8 <main+0x618>)
 8001a2c:	61bb      	str	r3, [r7, #24]

		  Temperature = 1.0 / (A + B * log(Rntc) + C * pow(log(Rntc), 3));
 8001a2e:	6a38      	ldr	r0, [r7, #32]
 8001a30:	f7fe fd36 	bl	80004a0 <__aeabi_f2d>
 8001a34:	4604      	mov	r4, r0
 8001a36:	460d      	mov	r5, r1
 8001a38:	69f8      	ldr	r0, [r7, #28]
 8001a3a:	f7fe fd31 	bl	80004a0 <__aeabi_f2d>
 8001a3e:	4680      	mov	r8, r0
 8001a40:	4689      	mov	r9, r1
 8001a42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a44:	f7fe fd2c 	bl	80004a0 <__aeabi_f2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	ec43 2b10 	vmov	d0, r2, r3
 8001a50:	f003 fd16 	bl	8005480 <log>
 8001a54:	ec53 2b10 	vmov	r2, r3, d0
 8001a58:	4640      	mov	r0, r8
 8001a5a:	4649      	mov	r1, r9
 8001a5c:	f7fe fd78 	bl	8000550 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4620      	mov	r0, r4
 8001a66:	4629      	mov	r1, r5
 8001a68:	f7fe fbbc 	bl	80001e4 <__adddf3>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4690      	mov	r8, r2
 8001a72:	4699      	mov	r9, r3
 8001a74:	69b8      	ldr	r0, [r7, #24]
 8001a76:	f7fe fd13 	bl	80004a0 <__aeabi_f2d>
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	460d      	mov	r5, r1
 8001a7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a80:	f7fe fd0e 	bl	80004a0 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	ec43 2b10 	vmov	d0, r2, r3
 8001a8c:	f003 fcf8 	bl	8005480 <log>
 8001a90:	eeb0 7a40 	vmov.f32	s14, s0
 8001a94:	eef0 7a60 	vmov.f32	s15, s1
 8001a98:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8001b70 <main+0x5e0>
 8001a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa0:	eef0 0a67 	vmov.f32	s1, s15
 8001aa4:	f003 fd2a 	bl	80054fc <pow>
 8001aa8:	ec53 2b10 	vmov	r2, r3, d0
 8001aac:	4620      	mov	r0, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7fe fd4e 	bl	8000550 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4640      	mov	r0, r8
 8001aba:	4649      	mov	r1, r9
 8001abc:	f7fe fb92 	bl	80001e4 <__adddf3>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	4938      	ldr	r1, [pc, #224]	@ (8001bac <main+0x61c>)
 8001aca:	f7fe fe6b 	bl	80007a4 <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7fe ffeb 	bl	8000ab0 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	617b      	str	r3, [r7, #20]
		  Temperature = -(Temperature - 273.15);
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7fe fcde 	bl	80004a0 <__aeabi_f2d>
 8001ae4:	a324      	add	r3, pc, #144	@ (adr r3, 8001b78 <main+0x5e8>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fb79 	bl	80001e0 <__aeabi_dsub>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7fe ffdb 	bl	8000ab0 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef1 7a67 	vneg.f32	s15, s15
 8001b04:	edc7 7a05 	vstr	s15, [r7, #20]

		  writeStr(2, 0, "Sicaklik: ");
 8001b08:	4a29      	ldr	r2, [pc, #164]	@ (8001bb0 <main+0x620>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f7ff fa5b 	bl	8000fc8 <writeStr>
		  displayFloat(2, 10, Temperature);
 8001b12:	ed97 0a05 	vldr	s0, [r7, #20]
 8001b16:	210a      	movs	r1, #10
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f7ff fbc5 	bl	80012a8 <displayFloat>
		  writeStr(2, 15, "C");
 8001b1e:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <main+0x624>)
 8001b20:	210f      	movs	r1, #15
 8001b22:	2002      	movs	r0, #2
 8001b24:	f7ff fa50 	bl	8000fc8 <writeStr>
 8001b28:	e580      	b.n	800162c <main+0x9c>
	  }
	  else if (uyg == 4) {
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <main+0x5f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d102      	bne.n	8001b38 <main+0x5a8>
		  clearLcd2();
 8001b32:	f7ff fa81 	bl	8001038 <clearLcd2>
 8001b36:	e579      	b.n	800162c <main+0x9c>
	  }
	  else if (uyg == 5) {
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <main+0x5f0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	f47f ad75 	bne.w	800162c <main+0x9c>
		  clearLcd2();
 8001b42:	f7ff fa79 	bl	8001038 <clearLcd2>
		  writeStr(1,0,"1-4 arasi sayi");
 8001b46:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb8 <main+0x628>)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff fa3c 	bl	8000fc8 <writeStr>
		  writeStr(2,0,"giriniz lutfen!");
 8001b50:	4a1a      	ldr	r2, [pc, #104]	@ (8001bbc <main+0x62c>)
 8001b52:	2100      	movs	r1, #0
 8001b54:	2002      	movs	r0, #2
 8001b56:	f7ff fa37 	bl	8000fc8 <writeStr>
	  if (uyg == 0) {
 8001b5a:	e567      	b.n	800162c <main+0x9c>
 8001b5c:	f3af 8000 	nop.w
 8001b60:	66666666 	.word	0x66666666
 8001b64:	400a6666 	.word	0x400a6666
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40c38800 	.word	0x40c38800
 8001b70:	00000000 	.word	0x00000000
 8001b74:	40080000 	.word	0x40080000
 8001b78:	66666666 	.word	0x66666666
 8001b7c:	40711266 	.word	0x40711266
 8001b80:	2000012c 	.word	0x2000012c
 8001b84:	2000008c 	.word	0x2000008c
 8001b88:	20000120 	.word	0x20000120
 8001b8c:	40b00000 	.word	0x40b00000
 8001b90:	40140000 	.word	0x40140000
 8001b94:	08006800 	.word	0x08006800
 8001b98:	08006808 	.word	0x08006808
 8001b9c:	20000124 	.word	0x20000124
 8001ba0:	3a8448cb 	.word	0x3a8448cb
 8001ba4:	397964d6 	.word	0x397964d6
 8001ba8:	3458cf6c 	.word	0x3458cf6c
 8001bac:	3ff00000 	.word	0x3ff00000
 8001bb0:	0800680c 	.word	0x0800680c
 8001bb4:	08006818 	.word	0x08006818
 8001bb8:	0800681c 	.word	0x0800681c
 8001bbc:	0800682c 	.word	0x0800682c

08001bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b094      	sub	sp, #80	@ 0x50
 8001bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	2230      	movs	r2, #48	@ 0x30
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fc22 	bl	8005418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	4b28      	ldr	r3, [pc, #160]	@ (8001c8c <SystemClock_Config+0xcc>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	4a27      	ldr	r2, [pc, #156]	@ (8001c8c <SystemClock_Config+0xcc>)
 8001bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf4:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <SystemClock_Config+0xcc>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	4b22      	ldr	r3, [pc, #136]	@ (8001c90 <SystemClock_Config+0xd0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c0c:	4a20      	ldr	r2, [pc, #128]	@ (8001c90 <SystemClock_Config+0xd0>)
 8001c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <SystemClock_Config+0xd0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c20:	2302      	movs	r3, #2
 8001c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c28:	2310      	movs	r3, #16
 8001c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c30:	2300      	movs	r3, #0
 8001c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c34:	2308      	movs	r3, #8
 8001c36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001c38:	2340      	movs	r3, #64	@ 0x40
 8001c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c40:	2304      	movs	r3, #4
 8001c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 ff4d 	bl	8003ae8 <HAL_RCC_OscConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c54:	f000 f97c 	bl	8001f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c58:	230f      	movs	r3, #15
 8001c5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2102      	movs	r1, #2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 fa63 	bl	8004140 <HAL_RCC_ClockConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c80:	f000 f966 	bl	8001f50 <Error_Handler>
  }
}
 8001c84:	bf00      	nop
 8001c86:	3750      	adds	r7, #80	@ 0x50
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000

08001c94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001ca8:	4a21      	ldr	r2, [pc, #132]	@ (8001d30 <MX_ADC1_Init+0x9c>)
 8001caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cac:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001cd4:	4a17      	ldr	r2, [pc, #92]	@ (8001d34 <MX_ADC1_Init+0xa0>)
 8001cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cf2:	480e      	ldr	r0, [pc, #56]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001cf4:	f000 fbd8 	bl	80024a8 <HAL_ADC_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001cfe:	f000 f927 	bl	8001f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d02:	2304      	movs	r3, #4
 8001d04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d0e:	463b      	mov	r3, r7
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	@ (8001d2c <MX_ADC1_Init+0x98>)
 8001d14:	f001 f834 	bl	8002d80 <HAL_ADC_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001d1e:	f000 f917 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000008c 	.word	0x2000008c
 8001d30:	40012000 	.word	0x40012000
 8001d34:	0f000001 	.word	0x0f000001

08001d38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <MX_TIM1_Init+0x98>)
 8001d56:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <MX_TIM1_Init+0x9c>)
 8001d58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <MX_TIM1_Init+0x98>)
 8001d5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <MX_TIM1_Init+0x98>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3;
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <MX_TIM1_Init+0x98>)
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <MX_TIM1_Init+0x98>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d74:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <MX_TIM1_Init+0x98>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <MX_TIM1_Init+0x98>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d80:	4813      	ldr	r0, [pc, #76]	@ (8001dd0 <MX_TIM1_Init+0x98>)
 8001d82:	f002 fc31 	bl	80045e8 <HAL_TIM_Base_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d8c:	f000 f8e0 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <MX_TIM1_Init+0x98>)
 8001d9e:	f002 fe01 	bl	80049a4 <HAL_TIM_ConfigClockSource>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001da8:	f000 f8d2 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_TIM1_Init+0x98>)
 8001dba:	f003 fa5b 	bl	8005274 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001dc4:	f000 f8c4 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200000d4 	.word	0x200000d4
 8001dd4:	40010000 	.word	0x40010000

08001dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	4b53      	ldr	r3, [pc, #332]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a52      	ldr	r2, [pc, #328]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b50      	ldr	r3, [pc, #320]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a4b      	ldr	r2, [pc, #300]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1a:	4b49      	ldr	r3, [pc, #292]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b45      	ldr	r3, [pc, #276]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a44      	ldr	r2, [pc, #272]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b42      	ldr	r3, [pc, #264]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b3e      	ldr	r3, [pc, #248]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <MX_GPIO_Init+0x168>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	210f      	movs	r1, #15
 8001e62:	4838      	ldr	r0, [pc, #224]	@ (8001f44 <MX_GPIO_Init+0x16c>)
 8001e64:	f001 fdf0 	bl	8003a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f241 31f0 	movw	r1, #5104	@ 0x13f0
 8001e6e:	4836      	ldr	r0, [pc, #216]	@ (8001f48 <MX_GPIO_Init+0x170>)
 8001e70:	f001 fdea 	bl	8003a48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e74:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	4830      	ldr	r0, [pc, #192]	@ (8001f4c <MX_GPIO_Init+0x174>)
 8001e8a:	f001 fb2b 	bl	80034e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e8e:	230f      	movs	r3, #15
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4827      	ldr	r0, [pc, #156]	@ (8001f44 <MX_GPIO_Init+0x16c>)
 8001ea6:	f001 fb1d 	bl	80034e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001eaa:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001eae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eb0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4820      	ldr	r0, [pc, #128]	@ (8001f44 <MX_GPIO_Init+0x16c>)
 8001ec2:	f001 fb0f 	bl	80034e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB14 PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001ec6:	f24e 430f 	movw	r3, #58383	@ 0xe40f
 8001eca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	481b      	ldr	r0, [pc, #108]	@ (8001f48 <MX_GPIO_Init+0x170>)
 8001edc:	f001 fb02 	bl	80034e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001ee0:	f241 33f0 	movw	r3, #5104	@ 0x13f0
 8001ee4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4813      	ldr	r0, [pc, #76]	@ (8001f48 <MX_GPIO_Init+0x170>)
 8001efa:	f001 faf3 	bl	80034e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8001efe:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8001f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f04:	2303      	movs	r3, #3
 8001f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <MX_GPIO_Init+0x16c>)
 8001f14:	f001 fae6 	bl	80034e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2017      	movs	r0, #23
 8001f1e:	f001 fa91 	bl	8003444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f22:	2017      	movs	r0, #23
 8001f24:	f001 faba 	bl	800349c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2028      	movs	r0, #40	@ 0x28
 8001f2e:	f001 fa89 	bl	8003444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f32:	2028      	movs	r0, #40	@ 0x28
 8001f34:	f001 fab2 	bl	800349c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	@ 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	40020800 	.word	0x40020800

08001f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <Error_Handler+0x8>

08001f5c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a08      	ldr	r2, [pc, #32]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_MspInit+0x4c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	@ 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8002050 <HAL_ADC_MspInit+0x8c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d12f      	bne.n	8002046 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <HAL_ADC_MspInit+0x90>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	4a19      	ldr	r2, [pc, #100]	@ (8002054 <HAL_ADC_MspInit+0x90>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff6:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <HAL_ADC_MspInit+0x90>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <HAL_ADC_MspInit+0x90>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a12      	ldr	r2, [pc, #72]	@ (8002054 <HAL_ADC_MspInit+0x90>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <HAL_ADC_MspInit+0x90>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800201e:	2330      	movs	r3, #48	@ 0x30
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002022:	2303      	movs	r3, #3
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4809      	ldr	r0, [pc, #36]	@ (8002058 <HAL_ADC_MspInit+0x94>)
 8002032:	f001 fa57 	bl	80034e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2012      	movs	r0, #18
 800203c:	f001 fa02 	bl	8003444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002040:	2012      	movs	r0, #18
 8002042:	f001 fa2b 	bl	800349c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	@ 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40012000 	.word	0x40012000
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000

0800205c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0e      	ldr	r2, [pc, #56]	@ (80020a4 <HAL_TIM_Base_MspInit+0x48>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d115      	bne.n	800209a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	4a0c      	ldr	r2, [pc, #48]	@ (80020a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6453      	str	r3, [r2, #68]	@ 0x44
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2019      	movs	r0, #25
 8002090:	f001 f9d8 	bl	8003444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002094:	2019      	movs	r0, #25
 8002096:	f001 fa01 	bl	800349c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40023800 	.word	0x40023800

080020ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <NMI_Handler+0x4>

080020b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <HardFault_Handler+0x4>

080020bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <MemManage_Handler+0x4>

080020c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <BusFault_Handler+0x4>

080020cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <UsageFault_Handler+0x4>

080020d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002104:	f000 f98c 	bl	8002420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  if (uyg == 4) {
 8002108:	4b18      	ldr	r3, [pc, #96]	@ (800216c <SysTick_Handler+0x6c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d121      	bne.n	8002154 <SysTick_Handler+0x54>
	  tiksay++;
 8002110:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <SysTick_Handler+0x70>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	4a16      	ldr	r2, [pc, #88]	@ (8002170 <SysTick_Handler+0x70>)
 8002118:	6013      	str	r3, [r2, #0]
      if (tiksay <= 2000) {
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <SysTick_Handler+0x70>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002122:	d806      	bhi.n	8002132 <SysTick_Handler+0x32>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8002124:	2201      	movs	r2, #1
 8002126:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800212a:	4812      	ldr	r0, [pc, #72]	@ (8002174 <SysTick_Handler+0x74>)
 800212c:	f001 fc8c 	bl	8003a48 <HAL_GPIO_WritePin>
      tiksay = 0;
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8002130:	e019      	b.n	8002166 <SysTick_Handler+0x66>
      else if (tiksay <= 3000) {
 8002132:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <SysTick_Handler+0x70>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800213a:	4293      	cmp	r3, r2
 800213c:	d806      	bhi.n	800214c <SysTick_Handler+0x4c>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002144:	480b      	ldr	r0, [pc, #44]	@ (8002174 <SysTick_Handler+0x74>)
 8002146:	f001 fc7f 	bl	8003a48 <HAL_GPIO_WritePin>
}
 800214a:	e00c      	b.n	8002166 <SysTick_Handler+0x66>
          tiksay = 0;
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <SysTick_Handler+0x70>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	e008      	b.n	8002166 <SysTick_Handler+0x66>
      tiksay = 0;
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <SysTick_Handler+0x70>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002160:	4804      	ldr	r0, [pc, #16]	@ (8002174 <SysTick_Handler+0x74>)
 8002162:	f001 fc71 	bl	8003a48 <HAL_GPIO_WritePin>
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000012c 	.word	0x2000012c
 8002170:	2000011c 	.word	0x2000011c
 8002174:	40020400 	.word	0x40020400

08002178 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800217c:	4802      	ldr	r0, [pc, #8]	@ (8002188 <ADC_IRQHandler+0x10>)
 800217e:	f000 fc95 	bl	8002aac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000008c 	.word	0x2000008c

0800218c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0) {
 8002190:	2140      	movs	r1, #64	@ 0x40
 8002192:	4841      	ldr	r0, [pc, #260]	@ (8002298 <EXTI9_5_IRQHandler+0x10c>)
 8002194:	f001 fc38 	bl	8003a08 <HAL_GPIO_ReadPin>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <EXTI9_5_IRQHandler+0x2c>
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0);					// Aşağı Ok
 800219e:	bf00      	nop
 80021a0:	2140      	movs	r1, #64	@ 0x40
 80021a2:	483d      	ldr	r0, [pc, #244]	@ (8002298 <EXTI9_5_IRQHandler+0x10c>)
 80021a4:	f001 fc30 	bl	8003a08 <HAL_GPIO_ReadPin>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f8      	beq.n	80021a0 <EXTI9_5_IRQHandler+0x14>
		sayi--;
 80021ae:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <EXTI9_5_IRQHandler+0x110>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	4a39      	ldr	r2, [pc, #228]	@ (800229c <EXTI9_5_IRQHandler+0x110>)
 80021b6:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0) {
 80021b8:	2180      	movs	r1, #128	@ 0x80
 80021ba:	4837      	ldr	r0, [pc, #220]	@ (8002298 <EXTI9_5_IRQHandler+0x10c>)
 80021bc:	f001 fc24 	bl	8003a08 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10c      	bne.n	80021e0 <EXTI9_5_IRQHandler+0x54>
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0);			// Yukarı Ok
 80021c6:	bf00      	nop
 80021c8:	2180      	movs	r1, #128	@ 0x80
 80021ca:	4833      	ldr	r0, [pc, #204]	@ (8002298 <EXTI9_5_IRQHandler+0x10c>)
 80021cc:	f001 fc1c 	bl	8003a08 <HAL_GPIO_ReadPin>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f8      	beq.n	80021c8 <EXTI9_5_IRQHandler+0x3c>
	  	sayi++;
 80021d6:	4b31      	ldr	r3, [pc, #196]	@ (800229c <EXTI9_5_IRQHandler+0x110>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	4a2f      	ldr	r2, [pc, #188]	@ (800229c <EXTI9_5_IRQHandler+0x110>)
 80021de:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0) {
 80021e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021e4:	482c      	ldr	r0, [pc, #176]	@ (8002298 <EXTI9_5_IRQHandler+0x10c>)
 80021e6:	f001 fc0f 	bl	8003a08 <HAL_GPIO_ReadPin>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d12b      	bne.n	8002248 <EXTI9_5_IRQHandler+0xbc>
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0);			// Enter
 80021f0:	bf00      	nop
 80021f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021f6:	4828      	ldr	r0, [pc, #160]	@ (8002298 <EXTI9_5_IRQHandler+0x10c>)
 80021f8:	f001 fc06 	bl	8003a08 <HAL_GPIO_ReadPin>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f7      	beq.n	80021f2 <EXTI9_5_IRQHandler+0x66>
		if (sayi == 1) {
 8002202:	4b26      	ldr	r3, [pc, #152]	@ (800229c <EXTI9_5_IRQHandler+0x110>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d103      	bne.n	8002212 <EXTI9_5_IRQHandler+0x86>
			uyg = 1;
 800220a:	4b25      	ldr	r3, [pc, #148]	@ (80022a0 <EXTI9_5_IRQHandler+0x114>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e01a      	b.n	8002248 <EXTI9_5_IRQHandler+0xbc>
		}
		else if (sayi == 2) {
 8002212:	4b22      	ldr	r3, [pc, #136]	@ (800229c <EXTI9_5_IRQHandler+0x110>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d103      	bne.n	8002222 <EXTI9_5_IRQHandler+0x96>
			uyg = 2;
 800221a:	4b21      	ldr	r3, [pc, #132]	@ (80022a0 <EXTI9_5_IRQHandler+0x114>)
 800221c:	2202      	movs	r2, #2
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e012      	b.n	8002248 <EXTI9_5_IRQHandler+0xbc>
		}
		else if (sayi == 3) {
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <EXTI9_5_IRQHandler+0x110>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d103      	bne.n	8002232 <EXTI9_5_IRQHandler+0xa6>
			uyg = 3;
 800222a:	4b1d      	ldr	r3, [pc, #116]	@ (80022a0 <EXTI9_5_IRQHandler+0x114>)
 800222c:	2203      	movs	r2, #3
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e00a      	b.n	8002248 <EXTI9_5_IRQHandler+0xbc>
		}
		else if (sayi == 4) {
 8002232:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <EXTI9_5_IRQHandler+0x110>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b04      	cmp	r3, #4
 8002238:	d103      	bne.n	8002242 <EXTI9_5_IRQHandler+0xb6>
			uyg = 4;
 800223a:	4b19      	ldr	r3, [pc, #100]	@ (80022a0 <EXTI9_5_IRQHandler+0x114>)
 800223c:	2204      	movs	r2, #4
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e002      	b.n	8002248 <EXTI9_5_IRQHandler+0xbc>
		}
		else {
			uyg = 5;
 8002242:	4b17      	ldr	r3, [pc, #92]	@ (80022a0 <EXTI9_5_IRQHandler+0x114>)
 8002244:	2205      	movs	r2, #5
 8002246:	601a      	str	r2, [r3, #0]
		}
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 8002248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800224c:	4812      	ldr	r0, [pc, #72]	@ (8002298 <EXTI9_5_IRQHandler+0x10c>)
 800224e:	f001 fbdb 	bl	8003a08 <HAL_GPIO_ReadPin>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10e      	bne.n	8002276 <EXTI9_5_IRQHandler+0xea>
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0);			// Esc
 8002258:	bf00      	nop
 800225a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800225e:	480e      	ldr	r0, [pc, #56]	@ (8002298 <EXTI9_5_IRQHandler+0x10c>)
 8002260:	f001 fbd2 	bl	8003a08 <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f7      	beq.n	800225a <EXTI9_5_IRQHandler+0xce>
		uyg = 0;
 800226a:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <EXTI9_5_IRQHandler+0x114>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
		sayi = 0;
 8002270:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <EXTI9_5_IRQHandler+0x110>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002276:	2040      	movs	r0, #64	@ 0x40
 8002278:	f001 fc12 	bl	8003aa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800227c:	2080      	movs	r0, #128	@ 0x80
 800227e:	f001 fc0f 	bl	8003aa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002282:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002286:	f001 fc0b 	bl	8003aa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800228a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800228e:	f001 fc07 	bl	8003aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40020000 	.word	0x40020000
 800229c:	20000128 	.word	0x20000128
 80022a0:	2000012c 	.word	0x2000012c

080022a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80022aa:	f002 fa8b 	bl	80047c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200000d4 	.word	0x200000d4

080022b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0 && sayi == 1) {
 80022bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022c0:	480d      	ldr	r0, [pc, #52]	@ (80022f8 <EXTI15_10_IRQHandler+0x40>)
 80022c2:	f001 fba1 	bl	8003a08 <HAL_GPIO_ReadPin>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10f      	bne.n	80022ec <EXTI15_10_IRQHandler+0x34>
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <EXTI15_10_IRQHandler+0x44>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d10b      	bne.n	80022ec <EXTI15_10_IRQHandler+0x34>
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0);			// Sağ Ok
 80022d4:	bf00      	nop
 80022d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022da:	4807      	ldr	r0, [pc, #28]	@ (80022f8 <EXTI15_10_IRQHandler+0x40>)
 80022dc:	f001 fb94 	bl	8003a08 <HAL_GPIO_ReadPin>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f7      	beq.n	80022d6 <EXTI15_10_IRQHandler+0x1e>
		uyg = 15;
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <EXTI15_10_IRQHandler+0x48>)
 80022e8:	220f      	movs	r2, #15
 80022ea:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80022ec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80022f0:	f001 fbd6 	bl	8003aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40020000 	.word	0x40020000
 80022fc:	20000128 	.word	0x20000128
 8002300:	2000012c 	.word	0x2000012c

08002304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <SystemInit+0x20>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230e:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <SystemInit+0x20>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002360 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800232c:	f7ff ffea 	bl	8002304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002330:	480c      	ldr	r0, [pc, #48]	@ (8002364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002332:	490d      	ldr	r1, [pc, #52]	@ (8002368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002338:	e002      	b.n	8002340 <LoopCopyDataInit>

0800233a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800233c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233e:	3304      	adds	r3, #4

08002340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002344:	d3f9      	bcc.n	800233a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002346:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002348:	4c0a      	ldr	r4, [pc, #40]	@ (8002374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800234c:	e001      	b.n	8002352 <LoopFillZerobss>

0800234e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002350:	3204      	adds	r2, #4

08002352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002354:	d3fb      	bcc.n	800234e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002356:	f003 f86d 	bl	8005434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235a:	f7ff f919 	bl	8001590 <main>
  bx  lr    
 800235e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002360:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002368:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800236c:	080069f0 	.word	0x080069f0
  ldr r2, =_sbss
 8002370:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002374:	2000026c 	.word	0x2000026c

08002378 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <DMA1_Stream0_IRQHandler>
	...

0800237c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002380:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <HAL_Init+0x40>)
 8002386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800238a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <HAL_Init+0x40>)
 8002392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002398:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a07      	ldr	r2, [pc, #28]	@ (80023bc <HAL_Init+0x40>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f001 f82d 	bl	8003404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023aa:	200f      	movs	r0, #15
 80023ac:	f000 f808 	bl	80023c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b0:	f7ff fde0 	bl	8001f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023c00 	.word	0x40023c00

080023c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <HAL_InitTick+0x54>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_InitTick+0x58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 f874 	bl	80034cc <HAL_SYSTICK_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00e      	b.n	800240c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0f      	cmp	r3, #15
 80023f2:	d80a      	bhi.n	800240a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f001 f822 	bl	8003444 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002400:	4a06      	ldr	r2, [pc, #24]	@ (800241c <HAL_InitTick+0x5c>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000004 	.word	0x20000004
 8002418:	2000000c 	.word	0x2000000c
 800241c:	20000008 	.word	0x20000008

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	@ (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	2000000c 	.word	0x2000000c
 8002444:	20000130 	.word	0x20000130

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	@ (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000130 	.word	0x20000130

08002460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff ffee 	bl	8002448 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d005      	beq.n	8002486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <HAL_Delay+0x44>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002486:	bf00      	nop
 8002488:	f7ff ffde 	bl	8002448 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d8f7      	bhi.n	8002488 <HAL_Delay+0x28>
  {
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000000c 	.word	0x2000000c

080024a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e14e      	b.n	800275c <HAL_ADC_Init+0x2b4>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a90      	ldr	r2, [pc, #576]	@ (8002704 <HAL_ADC_Init+0x25c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d004      	beq.n	80024d2 <HAL_ADC_Init+0x2a>
 80024c8:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 80024cc:	488e      	ldr	r0, [pc, #568]	@ (8002708 <HAL_ADC_Init+0x260>)
 80024ce:	f7ff fd45 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d013      	beq.n	8002502 <HAL_ADC_Init+0x5a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e2:	d00e      	beq.n	8002502 <HAL_ADC_Init+0x5a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024ec:	d009      	beq.n	8002502 <HAL_ADC_Init+0x5a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80024f6:	d004      	beq.n	8002502 <HAL_ADC_Init+0x5a>
 80024f8:	f240 1143 	movw	r1, #323	@ 0x143
 80024fc:	4882      	ldr	r0, [pc, #520]	@ (8002708 <HAL_ADC_Init+0x260>)
 80024fe:	f7ff fd2d 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d013      	beq.n	8002532 <HAL_ADC_Init+0x8a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002512:	d00e      	beq.n	8002532 <HAL_ADC_Init+0x8a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800251c:	d009      	beq.n	8002532 <HAL_ADC_Init+0x8a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002526:	d004      	beq.n	8002532 <HAL_ADC_Init+0x8a>
 8002528:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800252c:	4876      	ldr	r0, [pc, #472]	@ (8002708 <HAL_ADC_Init+0x260>)
 800252e:	f7ff fd15 	bl	8001f5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_ADC_Init+0xa4>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d004      	beq.n	800254c <HAL_ADC_Init+0xa4>
 8002542:	f240 1145 	movw	r1, #325	@ 0x145
 8002546:	4870      	ldr	r0, [pc, #448]	@ (8002708 <HAL_ADC_Init+0x260>)
 8002548:	f7ff fd08 	bl	8001f5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7e1b      	ldrb	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_ADC_Init+0xbe>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7e1b      	ldrb	r3, [r3, #24]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d004      	beq.n	8002566 <HAL_ADC_Init+0xbe>
 800255c:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8002560:	4869      	ldr	r0, [pc, #420]	@ (8002708 <HAL_ADC_Init+0x260>)
 8002562:	f7ff fcfb 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256a:	2b00      	cmp	r3, #0
 800256c:	d054      	beq.n	8002618 <HAL_ADC_Init+0x170>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002576:	d04f      	beq.n	8002618 <HAL_ADC_Init+0x170>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002580:	d04a      	beq.n	8002618 <HAL_ADC_Init+0x170>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002586:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800258a:	d045      	beq.n	8002618 <HAL_ADC_Init+0x170>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002594:	d040      	beq.n	8002618 <HAL_ADC_Init+0x170>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800259e:	d03b      	beq.n	8002618 <HAL_ADC_Init+0x170>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80025a8:	d036      	beq.n	8002618 <HAL_ADC_Init+0x170>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 80025b2:	d031      	beq.n	8002618 <HAL_ADC_Init+0x170>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025bc:	d02c      	beq.n	8002618 <HAL_ADC_Init+0x170>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c2:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 80025c6:	d027      	beq.n	8002618 <HAL_ADC_Init+0x170>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025cc:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 80025d0:	d022      	beq.n	8002618 <HAL_ADC_Init+0x170>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 80025da:	d01d      	beq.n	8002618 <HAL_ADC_Init+0x170>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80025e4:	d018      	beq.n	8002618 <HAL_ADC_Init+0x170>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 80025ee:	d013      	beq.n	8002618 <HAL_ADC_Init+0x170>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 80025f8:	d00e      	beq.n	8002618 <HAL_ADC_Init+0x170>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002602:	d009      	beq.n	8002618 <HAL_ADC_Init+0x170>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	4a40      	ldr	r2, [pc, #256]	@ (800270c <HAL_ADC_Init+0x264>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_ADC_Init+0x170>
 800260e:	f240 1147 	movw	r1, #327	@ 0x147
 8002612:	483d      	ldr	r0, [pc, #244]	@ (8002708 <HAL_ADC_Init+0x260>)
 8002614:	f7ff fca2 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <HAL_ADC_Init+0x18c>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002628:	d004      	beq.n	8002634 <HAL_ADC_Init+0x18c>
 800262a:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800262e:	4836      	ldr	r0, [pc, #216]	@ (8002708 <HAL_ADC_Init+0x260>)
 8002630:	f7ff fc94 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_ADC_Init+0x19c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b10      	cmp	r3, #16
 8002642:	d904      	bls.n	800264e <HAL_ADC_Init+0x1a6>
 8002644:	f240 1149 	movw	r1, #329	@ 0x149
 8002648:	482f      	ldr	r0, [pc, #188]	@ (8002708 <HAL_ADC_Init+0x260>)
 800264a:	f7ff fc87 	bl	8001f5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002654:	2b00      	cmp	r3, #0
 8002656:	d009      	beq.n	800266c <HAL_ADC_Init+0x1c4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800265e:	2b01      	cmp	r3, #1
 8002660:	d004      	beq.n	800266c <HAL_ADC_Init+0x1c4>
 8002662:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002666:	4828      	ldr	r0, [pc, #160]	@ (8002708 <HAL_ADC_Init+0x260>)
 8002668:	f7ff fc78 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d00c      	beq.n	800268e <HAL_ADC_Init+0x1e6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_ADC_Init+0x1e6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d004      	beq.n	800268e <HAL_ADC_Init+0x1e6>
 8002684:	f240 114b 	movw	r1, #331	@ 0x14b
 8002688:	481f      	ldr	r0, [pc, #124]	@ (8002708 <HAL_ADC_Init+0x260>)
 800268a:	f7ff fc67 	bl	8001f5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <HAL_ADC_Init+0x204>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d004      	beq.n	80026ac <HAL_ADC_Init+0x204>
 80026a2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80026a6:	4818      	ldr	r0, [pc, #96]	@ (8002708 <HAL_ADC_Init+0x260>)
 80026a8:	f7ff fc58 	bl	8001f5c <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	4a16      	ldr	r2, [pc, #88]	@ (800270c <HAL_ADC_Init+0x264>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d017      	beq.n	80026e6 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d013      	beq.n	80026e6 <HAL_ADC_Init+0x23e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026c6:	d00e      	beq.n	80026e6 <HAL_ADC_Init+0x23e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026d0:	d009      	beq.n	80026e6 <HAL_ADC_Init+0x23e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80026da:	d004      	beq.n	80026e6 <HAL_ADC_Init+0x23e>
 80026dc:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80026e0:	4809      	ldr	r0, [pc, #36]	@ (8002708 <HAL_ADC_Init+0x260>)
 80026e2:	f7ff fc3b 	bl	8001f5c <assert_failed>
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d110      	bne.n	8002710 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff fc68 	bl	8001fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002702:	e005      	b.n	8002710 <HAL_ADC_Init+0x268>
 8002704:	40012000 	.word	0x40012000
 8002708:	0800683c 	.word	0x0800683c
 800270c:	0f000001 	.word	0x0f000001
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d118      	bne.n	800274e <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002724:	f023 0302 	bic.w	r3, r3, #2
 8002728:	f043 0202 	orr.w	r2, r3, #2
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fc83 	bl	800303c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f023 0303 	bic.w	r3, r3, #3
 8002744:	f043 0201 	orr.w	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40
 800274c:	e001      	b.n	8002752 <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7e1b      	ldrb	r3, [r3, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_ADC_Start+0x26>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7e1b      	ldrb	r3, [r3, #24]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d004      	beq.n	800278a <HAL_ADC_Start+0x26>
 8002780:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8002784:	485e      	ldr	r0, [pc, #376]	@ (8002900 <HAL_ADC_Start+0x19c>)
 8002786:	f7ff fbe9 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d013      	beq.n	80027ba <HAL_ADC_Start+0x56>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800279a:	d00e      	beq.n	80027ba <HAL_ADC_Start+0x56>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027a4:	d009      	beq.n	80027ba <HAL_ADC_Start+0x56>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80027ae:	d004      	beq.n	80027ba <HAL_ADC_Start+0x56>
 80027b0:	f240 21d3 	movw	r1, #723	@ 0x2d3
 80027b4:	4852      	ldr	r0, [pc, #328]	@ (8002900 <HAL_ADC_Start+0x19c>)
 80027b6:	f7ff fbd1 	bl	8001f5c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_Start+0x64>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e097      	b.n	80028f8 <HAL_ADC_Start+0x194>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d018      	beq.n	8002810 <HAL_ADC_Start+0xac>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027ee:	4b45      	ldr	r3, [pc, #276]	@ (8002904 <HAL_ADC_Start+0x1a0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a45      	ldr	r2, [pc, #276]	@ (8002908 <HAL_ADC_Start+0x1a4>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	0c9a      	lsrs	r2, r3, #18
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002802:	e002      	b.n	800280a <HAL_ADC_Start+0xa6>
    {
      counter--;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	3b01      	subs	r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f9      	bne.n	8002804 <HAL_ADC_Start+0xa0>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d15f      	bne.n	80028de <HAL_ADC_Start+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002848:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800285c:	d106      	bne.n	800286c <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f023 0206 	bic.w	r2, r3, #6
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	645a      	str	r2, [r3, #68]	@ 0x44
 800286a:	e002      	b.n	8002872 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287a:	4b24      	ldr	r3, [pc, #144]	@ (800290c <HAL_ADC_Start+0x1a8>)
 800287c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002886:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10f      	bne.n	80028b4 <HAL_ADC_Start+0x150>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d129      	bne.n	80028f6 <HAL_ADC_Start+0x192>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	e020      	b.n	80028f6 <HAL_ADC_Start+0x192>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a15      	ldr	r2, [pc, #84]	@ (8002910 <HAL_ADC_Start+0x1ac>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d11b      	bne.n	80028f6 <HAL_ADC_Start+0x192>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d114      	bne.n	80028f6 <HAL_ADC_Start+0x192>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	e00b      	b.n	80028f6 <HAL_ADC_Start+0x192>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	f043 0210 	orr.w	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	0800683c 	.word	0x0800683c
 8002904:	20000004 	.word	0x20000004
 8002908:	431bde83 	.word	0x431bde83
 800290c:	40012300 	.word	0x40012300
 8002910:	40012000 	.word	0x40012000

08002914 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1a      	ldr	r2, [pc, #104]	@ (800298c <HAL_ADC_Stop+0x78>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_ADC_Stop+0x1c>
 8002926:	f240 314a 	movw	r1, #842	@ 0x34a
 800292a:	4819      	ldr	r0, [pc, #100]	@ (8002990 <HAL_ADC_Stop+0x7c>)
 800292c:	f7ff fb16 	bl	8001f5c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_ADC_Stop+0x2a>
 800293a:	2302      	movs	r3, #2
 800293c:	e021      	b.n	8002982 <HAL_ADC_Stop+0x6e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_ADC_Stop+0x64>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40012000 	.word	0x40012000
 8002990:	0800683c 	.word	0x0800683c

08002994 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b0:	d113      	bne.n	80029da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c0:	d10b      	bne.n	80029da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f043 0220 	orr.w	r2, r3, #32
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e063      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80029da:	f7ff fd35 	bl	8002448 <HAL_GetTick>
 80029de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e0:	e021      	b.n	8002a26 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d01d      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_ADC_PollForConversion+0x6c>
 80029f0:	f7ff fd2a 	bl	8002448 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d212      	bcs.n	8002a26 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d00b      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e03d      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d1d6      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0212 	mvn.w	r2, #18
 8002a3c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d123      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d11f      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d111      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7e1b      	ldrb	r3, [r3, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0x3a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	7e1b      	ldrb	r3, [r3, #24]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d004      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0x3a>
 8002adc:	f240 41b7 	movw	r1, #1207	@ 0x4b7
 8002ae0:	4890      	ldr	r0, [pc, #576]	@ (8002d24 <HAL_ADC_IRQHandler+0x278>)
 8002ae2:	f7ff fa3b 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x4a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d904      	bls.n	8002b00 <HAL_ADC_IRQHandler+0x54>
 8002af6:	f44f 6197 	mov.w	r1, #1208	@ 0x4b8
 8002afa:	488a      	ldr	r0, [pc, #552]	@ (8002d24 <HAL_ADC_IRQHandler+0x278>)
 8002afc:	f7ff fa2e 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d00c      	beq.n	8002b22 <HAL_ADC_IRQHandler+0x76>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_ADC_IRQHandler+0x76>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d004      	beq.n	8002b22 <HAL_ADC_IRQHandler+0x76>
 8002b18:	f240 41b9 	movw	r1, #1209	@ 0x4b9
 8002b1c:	4881      	ldr	r0, [pc, #516]	@ (8002d24 <HAL_ADC_IRQHandler+0x278>)
 8002b1e:	f7ff fa1d 	bl	8001f5c <assert_failed>

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d049      	beq.n	8002bcc <HAL_ADC_IRQHandler+0x120>
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d046      	beq.n	8002bcc <HAL_ADC_IRQHandler+0x120>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d12b      	bne.n	8002bbc <HAL_ADC_IRQHandler+0x110>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d127      	bne.n	8002bbc <HAL_ADC_IRQHandler+0x110>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <HAL_ADC_IRQHandler+0xdc>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d119      	bne.n	8002bbc <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0220 	bic.w	r2, r2, #32
 8002b96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8c0 	bl	8002d42 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0212 	mvn.w	r2, #18
 8002bca:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bda:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d057      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x1e6>
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d054      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x1e6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <HAL_ADC_IRQHandler+0x154>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d139      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x1d6>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <HAL_ADC_IRQHandler+0x17e>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d12b      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x1d6>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d124      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x1d6>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d11d      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x1d6>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d119      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c5c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d105      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x1d6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fae4 	bl	8003250 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 020c 	mvn.w	r2, #12
 8002c90:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <HAL_ADC_IRQHandler+0x22c>
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d014      	beq.n	8002cd8 <HAL_ADC_IRQHandler+0x22c>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10d      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x22c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f844 	bl	8002d56 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f06f 0201 	mvn.w	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ce6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d015      	beq.n	8002d1a <HAL_ADC_IRQHandler+0x26e>
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d012      	beq.n	8002d1a <HAL_ADC_IRQHandler+0x26e>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf8:	f043 0202 	orr.w	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0220 	mvn.w	r2, #32
 8002d08:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f82d 	bl	8002d6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0220 	mvn.w	r2, #32
 8002d18:	601a      	str	r2, [r3, #0]
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	0800683c 	.word	0x0800683c

08002d28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b12      	cmp	r3, #18
 8002d94:	d904      	bls.n	8002da0 <HAL_ADC_ConfigChannel+0x20>
 8002d96:	f240 618b 	movw	r1, #1675	@ 0x68b
 8002d9a:	486f      	ldr	r0, [pc, #444]	@ (8002f58 <HAL_ADC_ConfigChannel+0x1d8>)
 8002d9c:	f7ff f8de 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x30>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d904      	bls.n	8002dba <HAL_ADC_ConfigChannel+0x3a>
 8002db0:	f240 618c 	movw	r1, #1676	@ 0x68c
 8002db4:	4868      	ldr	r0, [pc, #416]	@ (8002f58 <HAL_ADC_ConfigChannel+0x1d8>)
 8002db6:	f7ff f8d1 	bl	8001f5c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d020      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x84>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d01c      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x84>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d018      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x84>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d014      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x84>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d010      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x84>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d00c      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x84>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d008      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x84>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b07      	cmp	r3, #7
 8002df8:	d004      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x84>
 8002dfa:	f240 618d 	movw	r1, #1677	@ 0x68d
 8002dfe:	4856      	ldr	r0, [pc, #344]	@ (8002f58 <HAL_ADC_ConfigChannel+0x1d8>)
 8002e00:	f7ff f8ac 	bl	8001f5c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x92>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e107      	b.n	8003022 <HAL_ADC_ConfigChannel+0x2a2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b09      	cmp	r3, #9
 8002e20:	d925      	bls.n	8002e6e <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68d9      	ldr	r1, [r3, #12]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	3b1e      	subs	r3, #30
 8002e38:	2207      	movs	r2, #7
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	400a      	ands	r2, r1
 8002e46:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68d9      	ldr	r1, [r3, #12]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4403      	add	r3, r0
 8002e60:	3b1e      	subs	r3, #30
 8002e62:	409a      	lsls	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	e022      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6919      	ldr	r1, [r3, #16]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	2207      	movs	r2, #7
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	400a      	ands	r2, r1
 8002e90:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6919      	ldr	r1, [r3, #16]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4403      	add	r3, r0
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d824      	bhi.n	8002f06 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b05      	subs	r3, #5
 8002ece:	221f      	movs	r2, #31
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	400a      	ands	r2, r1
 8002edc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	4618      	mov	r0, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3b05      	subs	r3, #5
 8002ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f04:	e04e      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d826      	bhi.n	8002f5c <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3b23      	subs	r3, #35	@ 0x23
 8002f20:	221f      	movs	r2, #31
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	3b23      	subs	r3, #35	@ 0x23
 8002f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f56:	e025      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x224>
 8002f58:	0800683c 	.word	0x0800683c
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b41      	subs	r3, #65	@ 0x41
 8002f6e:	221f      	movs	r2, #31
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43da      	mvns	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	3b41      	subs	r3, #65	@ 0x41
 8002f98:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fa4:	4b21      	ldr	r3, [pc, #132]	@ (800302c <HAL_ADC_ConfigChannel+0x2ac>)
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a20      	ldr	r2, [pc, #128]	@ (8003030 <HAL_ADC_ConfigChannel+0x2b0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d109      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x246>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b12      	cmp	r3, #18
 8002fb8:	d105      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x246>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a19      	ldr	r2, [pc, #100]	@ (8003030 <HAL_ADC_ConfigChannel+0x2b0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d123      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x298>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d003      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0x260>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b11      	cmp	r3, #17
 8002fde:	d11b      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x298>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d111      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x298>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8003034 <HAL_ADC_ConfigChannel+0x2b4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8003038 <HAL_ADC_ConfigChannel+0x2b8>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0c9a      	lsrs	r2, r3, #18
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800300a:	e002      	b.n	8003012 <HAL_ADC_ConfigChannel+0x292>
      {
        counter--;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3b01      	subs	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <HAL_ADC_ConfigChannel+0x28c>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40012300 	.word	0x40012300
 8003030:	40012000 	.word	0x40012000
 8003034:	20000004 	.word	0x20000004
 8003038:	431bde83 	.word	0x431bde83

0800303c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003044:	4b7f      	ldr	r3, [pc, #508]	@ (8003244 <ADC_Init+0x208>)
 8003046:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003070:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	021a      	lsls	r2, r3, #8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003094:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003248 <ADC_Init+0x20c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d022      	beq.n	800311a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003104:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	e00f      	b.n	800313a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003128:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003138:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0202 	bic.w	r2, r2, #2
 8003148:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6899      	ldr	r1, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7e1b      	ldrb	r3, [r3, #24]
 8003154:	005a      	lsls	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d028      	beq.n	80031ba <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <ADC_Init+0x13c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	2b08      	cmp	r3, #8
 8003176:	d904      	bls.n	8003182 <ADC_Init+0x146>
 8003178:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 800317c:	4833      	ldr	r0, [pc, #204]	@ (800324c <ADC_Init+0x210>)
 800317e:	f7fe feed 	bl	8001f5c <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003190:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80031a0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	3b01      	subs	r3, #1
 80031ae:	035a      	lsls	r2, r3, #13
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	e007      	b.n	80031ca <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c8:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	051a      	lsls	r2, r3, #20
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800320c:	025a      	lsls	r2, r3, #9
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6899      	ldr	r1, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	029a      	lsls	r2, r3, #10
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40012300 	.word	0x40012300
 8003248:	0f000001 	.word	0x0f000001
 800324c:	0800683c 	.word	0x0800683c

08003250 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003280:	4013      	ands	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800328c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003296:	4a04      	ldr	r2, [pc, #16]	@ (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	60d3      	str	r3, [r2, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b0:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <__NVIC_GetPriorityGrouping+0x18>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f003 0307 	and.w	r3, r3, #7
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db0b      	blt.n	80032f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	4907      	ldr	r1, [pc, #28]	@ (8003300 <__NVIC_EnableIRQ+0x38>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2001      	movs	r0, #1
 80032ea:	fa00 f202 	lsl.w	r2, r0, r2
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	2b00      	cmp	r3, #0
 8003316:	db0a      	blt.n	800332e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	490c      	ldr	r1, [pc, #48]	@ (8003350 <__NVIC_SetPriority+0x4c>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	440b      	add	r3, r1
 8003328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800332c:	e00a      	b.n	8003344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4908      	ldr	r1, [pc, #32]	@ (8003354 <__NVIC_SetPriority+0x50>)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	3b04      	subs	r3, #4
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	440b      	add	r3, r1
 8003342:	761a      	strb	r2, [r3, #24]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000e100 	.word	0xe000e100
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	@ 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
 8003372:	2b04      	cmp	r3, #4
 8003374:	bf28      	it	cs
 8003376:	2304      	movcs	r3, #4
 8003378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3304      	adds	r3, #4
 800337e:	2b06      	cmp	r3, #6
 8003380:	d902      	bls.n	8003388 <NVIC_EncodePriority+0x30>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3b03      	subs	r3, #3
 8003386:	e000      	b.n	800338a <NVIC_EncodePriority+0x32>
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	f04f 32ff 	mov.w	r2, #4294967295
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	401a      	ands	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a0:	f04f 31ff 	mov.w	r1, #4294967295
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	43d9      	mvns	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	4313      	orrs	r3, r2
         );
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	@ 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033d0:	d301      	bcc.n	80033d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00f      	b.n	80033f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003400 <SysTick_Config+0x40>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033de:	210f      	movs	r1, #15
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	f7ff ff8e 	bl	8003304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e8:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <SysTick_Config+0x40>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ee:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <SysTick_Config+0x40>)
 80033f0:	2207      	movs	r2, #7
 80033f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	e000e010 	.word	0xe000e010

08003404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b07      	cmp	r3, #7
 8003410:	d00f      	beq.n	8003432 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b06      	cmp	r3, #6
 8003416:	d00c      	beq.n	8003432 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d009      	beq.n	8003432 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d006      	beq.n	8003432 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b03      	cmp	r3, #3
 8003428:	d003      	beq.n	8003432 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800342a:	2190      	movs	r1, #144	@ 0x90
 800342c:	4804      	ldr	r0, [pc, #16]	@ (8003440 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800342e:	f7fe fd95 	bl	8001f5c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ff16 	bl	8003264 <__NVIC_SetPriorityGrouping>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	08006874 	.word	0x08006874

08003444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d903      	bls.n	8003464 <HAL_NVIC_SetPriority+0x20>
 800345c:	21a8      	movs	r1, #168	@ 0xa8
 800345e:	480e      	ldr	r0, [pc, #56]	@ (8003498 <HAL_NVIC_SetPriority+0x54>)
 8003460:	f7fe fd7c 	bl	8001f5c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b0f      	cmp	r3, #15
 8003468:	d903      	bls.n	8003472 <HAL_NVIC_SetPriority+0x2e>
 800346a:	21a9      	movs	r1, #169	@ 0xa9
 800346c:	480a      	ldr	r0, [pc, #40]	@ (8003498 <HAL_NVIC_SetPriority+0x54>)
 800346e:	f7fe fd75 	bl	8001f5c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003472:	f7ff ff1b 	bl	80032ac <__NVIC_GetPriorityGrouping>
 8003476:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	6978      	ldr	r0, [r7, #20]
 800347e:	f7ff ff6b 	bl	8003358 <NVIC_EncodePriority>
 8003482:	4602      	mov	r2, r0
 8003484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff ff3a 	bl	8003304 <__NVIC_SetPriority>
}
 8003490:	bf00      	nop
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	08006874 	.word	0x08006874

0800349c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da03      	bge.n	80034b6 <HAL_NVIC_EnableIRQ+0x1a>
 80034ae:	21bc      	movs	r1, #188	@ 0xbc
 80034b0:	4805      	ldr	r0, [pc, #20]	@ (80034c8 <HAL_NVIC_EnableIRQ+0x2c>)
 80034b2:	f7fe fd53 	bl	8001f5c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ff04 	bl	80032c8 <__NVIC_EnableIRQ>
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	08006874 	.word	0x08006874

080034cc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff73 	bl	80033c0 <SysTick_Config>
 80034da:	4603      	mov	r3, r0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a32      	ldr	r2, [pc, #200]	@ (80035c8 <HAL_GPIO_Init+0xe4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d017      	beq.n	8003532 <HAL_GPIO_Init+0x4e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a31      	ldr	r2, [pc, #196]	@ (80035cc <HAL_GPIO_Init+0xe8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_GPIO_Init+0x4e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a30      	ldr	r2, [pc, #192]	@ (80035d0 <HAL_GPIO_Init+0xec>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00f      	beq.n	8003532 <HAL_GPIO_Init+0x4e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2f      	ldr	r2, [pc, #188]	@ (80035d4 <HAL_GPIO_Init+0xf0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00b      	beq.n	8003532 <HAL_GPIO_Init+0x4e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2e      	ldr	r2, [pc, #184]	@ (80035d8 <HAL_GPIO_Init+0xf4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <HAL_GPIO_Init+0x4e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2d      	ldr	r2, [pc, #180]	@ (80035dc <HAL_GPIO_Init+0xf8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x4e>
 800352a:	21ac      	movs	r1, #172	@ 0xac
 800352c:	482c      	ldr	r0, [pc, #176]	@ (80035e0 <HAL_GPIO_Init+0xfc>)
 800352e:	f7fe fd15 	bl	8001f5c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <HAL_GPIO_Init+0x62>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003544:	d303      	bcc.n	800354e <HAL_GPIO_Init+0x6a>
 8003546:	21ad      	movs	r1, #173	@ 0xad
 8003548:	4825      	ldr	r0, [pc, #148]	@ (80035e0 <HAL_GPIO_Init+0xfc>)
 800354a:	f7fe fd07 	bl	8001f5c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d035      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d031      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b11      	cmp	r3, #17
 8003564:	d02d      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d029      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b12      	cmp	r3, #18
 8003574:	d025      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800357e:	d020      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003588:	d01b      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003592:	d016      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 800359c:	d011      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80035a6:	d00c      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80035b0:	d007      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0xde>
 80035ba:	21ae      	movs	r1, #174	@ 0xae
 80035bc:	4808      	ldr	r0, [pc, #32]	@ (80035e0 <HAL_GPIO_Init+0xfc>)
 80035be:	f7fe fccd 	bl	8001f5c <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e205      	b.n	80039d4 <HAL_GPIO_Init+0x4f0>
 80035c8:	40020000 	.word	0x40020000
 80035cc:	40020400 	.word	0x40020400
 80035d0:	40020800 	.word	0x40020800
 80035d4:	40020c00 	.word	0x40020c00
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40021c00 	.word	0x40021c00
 80035e0:	080068b0 	.word	0x080068b0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035e4:	2201      	movs	r2, #1
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	f040 81e6 	bne.w	80039ce <HAL_GPIO_Init+0x4ea>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d005      	beq.n	800361a <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003616:	2b02      	cmp	r3, #2
 8003618:	d144      	bne.n	80036a4 <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00f      	beq.n	8003642 <HAL_GPIO_Init+0x15e>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d00b      	beq.n	8003642 <HAL_GPIO_Init+0x15e>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d007      	beq.n	8003642 <HAL_GPIO_Init+0x15e>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x15e>
 800363a:	21c0      	movs	r1, #192	@ 0xc0
 800363c:	4894      	ldr	r0, [pc, #592]	@ (8003890 <HAL_GPIO_Init+0x3ac>)
 800363e:	f7fe fc8d 	bl	8001f5c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003678:	2201      	movs	r2, #1
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 0201 	and.w	r2, r3, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d027      	beq.n	8003700 <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_GPIO_Init+0x1ec>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d007      	beq.n	80036d0 <HAL_GPIO_Init+0x1ec>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x1ec>
 80036c8:	21d1      	movs	r1, #209	@ 0xd1
 80036ca:	4871      	ldr	r0, [pc, #452]	@ (8003890 <HAL_GPIO_Init+0x3ac>)
 80036cc:	f7fe fc46 	bl	8001f5c <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b02      	cmp	r3, #2
 800370a:	f040 8098 	bne.w	800383e <HAL_GPIO_Init+0x35a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d06f      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d06b      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d067      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d063      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d05f      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d05b      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d057      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d053      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d04f      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d04b      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d047      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d043      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d03f      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d03b      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b04      	cmp	r3, #4
 8003784:	d037      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d033      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b04      	cmp	r3, #4
 8003794:	d02f      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b05      	cmp	r3, #5
 800379c:	d02b      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d027      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b05      	cmp	r3, #5
 80037ac:	d023      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d01f      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b07      	cmp	r3, #7
 80037bc:	d01b      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	d017      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d013      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b09      	cmp	r3, #9
 80037d4:	d00f      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b09      	cmp	r3, #9
 80037dc:	d00b      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b0a      	cmp	r3, #10
 80037e4:	d007      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x312>
 80037ee:	21de      	movs	r1, #222	@ 0xde
 80037f0:	4827      	ldr	r0, [pc, #156]	@ (8003890 <HAL_GPIO_Init+0x3ac>)
 80037f2:	f7fe fbb3 	bl	8001f5c <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	08da      	lsrs	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3208      	adds	r2, #8
 80037fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	220f      	movs	r2, #15
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	69b9      	ldr	r1, [r7, #24]
 800383a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0203 	and.w	r2, r3, #3
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80a7 	beq.w	80039ce <HAL_GPIO_Init+0x4ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	4b03      	ldr	r3, [pc, #12]	@ (8003894 <HAL_GPIO_Init+0x3b0>)
 8003886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003888:	4a02      	ldr	r2, [pc, #8]	@ (8003894 <HAL_GPIO_Init+0x3b0>)
 800388a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800388e:	e003      	b.n	8003898 <HAL_GPIO_Init+0x3b4>
 8003890:	080068b0 	.word	0x080068b0
 8003894:	40023800 	.word	0x40023800
 8003898:	6453      	str	r3, [r2, #68]	@ 0x44
 800389a:	4b53      	ldr	r3, [pc, #332]	@ (80039e8 <HAL_GPIO_Init+0x504>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a6:	4a51      	ldr	r2, [pc, #324]	@ (80039ec <HAL_GPIO_Init+0x508>)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	220f      	movs	r2, #15
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a48      	ldr	r2, [pc, #288]	@ (80039f0 <HAL_GPIO_Init+0x50c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d019      	beq.n	8003906 <HAL_GPIO_Init+0x422>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a47      	ldr	r2, [pc, #284]	@ (80039f4 <HAL_GPIO_Init+0x510>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_GPIO_Init+0x41e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a46      	ldr	r2, [pc, #280]	@ (80039f8 <HAL_GPIO_Init+0x514>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00d      	beq.n	80038fe <HAL_GPIO_Init+0x41a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a45      	ldr	r2, [pc, #276]	@ (80039fc <HAL_GPIO_Init+0x518>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <HAL_GPIO_Init+0x416>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a44      	ldr	r2, [pc, #272]	@ (8003a00 <HAL_GPIO_Init+0x51c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_GPIO_Init+0x412>
 80038f2:	2304      	movs	r3, #4
 80038f4:	e008      	b.n	8003908 <HAL_GPIO_Init+0x424>
 80038f6:	2307      	movs	r3, #7
 80038f8:	e006      	b.n	8003908 <HAL_GPIO_Init+0x424>
 80038fa:	2303      	movs	r3, #3
 80038fc:	e004      	b.n	8003908 <HAL_GPIO_Init+0x424>
 80038fe:	2302      	movs	r3, #2
 8003900:	e002      	b.n	8003908 <HAL_GPIO_Init+0x424>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_GPIO_Init+0x424>
 8003906:	2300      	movs	r3, #0
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	f002 0203 	and.w	r2, r2, #3
 800390e:	0092      	lsls	r2, r2, #2
 8003910:	4093      	lsls	r3, r2
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003918:	4934      	ldr	r1, [pc, #208]	@ (80039ec <HAL_GPIO_Init+0x508>)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	3302      	adds	r3, #2
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003926:	4b37      	ldr	r3, [pc, #220]	@ (8003a04 <HAL_GPIO_Init+0x520>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x466>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800394a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a04 <HAL_GPIO_Init+0x520>)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003950:	4b2c      	ldr	r3, [pc, #176]	@ (8003a04 <HAL_GPIO_Init+0x520>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x490>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003974:	4a23      	ldr	r2, [pc, #140]	@ (8003a04 <HAL_GPIO_Init+0x520>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800397a:	4b22      	ldr	r3, [pc, #136]	@ (8003a04 <HAL_GPIO_Init+0x520>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x4ba>
        {
          temp |= iocurrent;
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800399e:	4a19      	ldr	r2, [pc, #100]	@ (8003a04 <HAL_GPIO_Init+0x520>)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039a4:	4b17      	ldr	r3, [pc, #92]	@ (8003a04 <HAL_GPIO_Init+0x520>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x4e4>
        {
          temp |= iocurrent;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a04 <HAL_GPIO_Init+0x520>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3301      	adds	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b0f      	cmp	r3, #15
 80039d8:	f67f ae04 	bls.w	80035e4 <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40020000 	.word	0x40020000
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020800 	.word	0x40020800
 80039fc:	40020c00 	.word	0x40020c00
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40013c00 	.word	0x40013c00

08003a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d104      	bne.n	8003a24 <HAL_GPIO_ReadPin+0x1c>
 8003a1a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8003a1e:	4809      	ldr	r0, [pc, #36]	@ (8003a44 <HAL_GPIO_ReadPin+0x3c>)
 8003a20:	f7fe fa9c 	bl	8001f5c <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e001      	b.n	8003a3a <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	080068b0 	.word	0x080068b0

08003a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
 8003a54:	4613      	mov	r3, r2
 8003a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a58:	887b      	ldrh	r3, [r7, #2]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <HAL_GPIO_WritePin+0x20>
 8003a5e:	f240 119d 	movw	r1, #413	@ 0x19d
 8003a62:	480e      	ldr	r0, [pc, #56]	@ (8003a9c <HAL_GPIO_WritePin+0x54>)
 8003a64:	f7fe fa7a 	bl	8001f5c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_GPIO_WritePin+0x36>
 8003a6e:	787b      	ldrb	r3, [r7, #1]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d004      	beq.n	8003a7e <HAL_GPIO_WritePin+0x36>
 8003a74:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8003a78:	4808      	ldr	r0, [pc, #32]	@ (8003a9c <HAL_GPIO_WritePin+0x54>)
 8003a7a:	f7fe fa6f 	bl	8001f5c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003a7e:	787b      	ldrb	r3, [r7, #1]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a84:	887a      	ldrh	r2, [r7, #2]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a8a:	e003      	b.n	8003a94 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a8c:	887b      	ldrh	r3, [r7, #2]
 8003a8e:	041a      	lsls	r2, r3, #16
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	619a      	str	r2, [r3, #24]
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	080068b0 	.word	0x080068b0

08003aa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d006      	beq.n	8003ac4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ab6:	4a05      	ldr	r2, [pc, #20]	@ (8003acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f806 	bl	8003ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40013c00 	.word	0x40013c00

08003ad0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e318      	b.n	800412c <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	d903      	bls.n	8003b0a <HAL_RCC_OscConfig+0x22>
 8003b02:	21e6      	movs	r1, #230	@ 0xe6
 8003b04:	4897      	ldr	r0, [pc, #604]	@ (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003b06:	f7fe fa29 	bl	8001f5c <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8088 	beq.w	8003c28 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <HAL_RCC_OscConfig+0x54>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b28:	d008      	beq.n	8003b3c <HAL_RCC_OscConfig+0x54>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b32:	d003      	beq.n	8003b3c <HAL_RCC_OscConfig+0x54>
 8003b34:	21eb      	movs	r1, #235	@ 0xeb
 8003b36:	488b      	ldr	r0, [pc, #556]	@ (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003b38:	f7fe fa10 	bl	8001f5c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b3c:	4b8a      	ldr	r3, [pc, #552]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d00c      	beq.n	8003b62 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b48:	4b87      	ldr	r3, [pc, #540]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d112      	bne.n	8003b7a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b54:	4b84      	ldr	r3, [pc, #528]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b60:	d10b      	bne.n	8003b7a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b62:	4b81      	ldr	r3, [pc, #516]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d05b      	beq.n	8003c26 <HAL_RCC_OscConfig+0x13e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d157      	bne.n	8003c26 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e2d8      	b.n	800412c <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b82:	d106      	bne.n	8003b92 <HAL_RCC_OscConfig+0xaa>
 8003b84:	4b78      	ldr	r3, [pc, #480]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a77      	ldr	r2, [pc, #476]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	e01d      	b.n	8003bce <HAL_RCC_OscConfig+0xe6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b9a:	d10c      	bne.n	8003bb6 <HAL_RCC_OscConfig+0xce>
 8003b9c:	4b72      	ldr	r3, [pc, #456]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a71      	ldr	r2, [pc, #452]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003ba2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a6e      	ldr	r2, [pc, #440]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	e00b      	b.n	8003bce <HAL_RCC_OscConfig+0xe6>
 8003bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6b      	ldr	r2, [pc, #428]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b69      	ldr	r3, [pc, #420]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a68      	ldr	r2, [pc, #416]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bcc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d013      	beq.n	8003bfe <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fe fc37 	bl	8002448 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bde:	f7fe fc33 	bl	8002448 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b64      	cmp	r3, #100	@ 0x64
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e29d      	b.n	800412c <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf0:	4b5d      	ldr	r3, [pc, #372]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0xf6>
 8003bfc:	e014      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fe fc23 	bl	8002448 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c06:	f7fe fc1f 	bl	8002448 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b64      	cmp	r3, #100	@ 0x64
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e289      	b.n	800412c <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c18:	4b53      	ldr	r3, [pc, #332]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x11e>
 8003c24:	e000      	b.n	8003c28 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d079      	beq.n	8003d28 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCC_OscConfig+0x166>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d004      	beq.n	8003c4e <HAL_RCC_OscConfig+0x166>
 8003c44:	f240 111d 	movw	r1, #285	@ 0x11d
 8003c48:	4846      	ldr	r0, [pc, #280]	@ (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	f7fe f987 	bl	8001f5c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b1f      	cmp	r3, #31
 8003c54:	d904      	bls.n	8003c60 <HAL_RCC_OscConfig+0x178>
 8003c56:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8003c5a:	4842      	ldr	r0, [pc, #264]	@ (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003c5c:	f7fe f97e 	bl	8001f5c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c60:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00b      	beq.n	8003c84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d11c      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c78:	4b3b      	ldr	r3, [pc, #236]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d116      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c84:	4b38      	ldr	r3, [pc, #224]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_OscConfig+0x1b4>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e247      	b.n	800412c <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9c:	4b32      	ldr	r3, [pc, #200]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	492f      	ldr	r1, [pc, #188]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb0:	e03a      	b.n	8003d28 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d020      	beq.n	8003cfc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cba:	4b2c      	ldr	r3, [pc, #176]	@ (8003d6c <HAL_RCC_OscConfig+0x284>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fbc2 	bl	8002448 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc8:	f7fe fbbe 	bl	8002448 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e228      	b.n	800412c <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cda:	4b23      	ldr	r3, [pc, #140]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b20      	ldr	r3, [pc, #128]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	491c      	ldr	r1, [pc, #112]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
 8003cfa:	e015      	b.n	8003d28 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d6c <HAL_RCC_OscConfig+0x284>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fe fba1 	bl	8002448 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7fe fb9d 	bl	8002448 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e207      	b.n	800412c <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1c:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d045      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCC_OscConfig+0x266>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d004      	beq.n	8003d4e <HAL_RCC_OscConfig+0x266>
 8003d44:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003d48:	4806      	ldr	r0, [pc, #24]	@ (8003d64 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	f7fe f907 	bl	8001f5c <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01e      	beq.n	8003d94 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_OscConfig+0x288>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fe fb74 	bl	8002448 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d62:	e010      	b.n	8003d86 <HAL_RCC_OscConfig+0x29e>
 8003d64:	080068ec 	.word	0x080068ec
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	42470000 	.word	0x42470000
 8003d70:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fe fb68 	bl	8002448 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e1d2      	b.n	800412c <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	4b5e      	ldr	r3, [pc, #376]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x28c>
 8003d92:	e015      	b.n	8003dc0 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d94:	4b5b      	ldr	r3, [pc, #364]	@ (8003f04 <HAL_RCC_OscConfig+0x41c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7fe fb55 	bl	8002448 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da2:	f7fe fb51 	bl	8002448 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e1bb      	b.n	800412c <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db4:	4b52      	ldr	r3, [pc, #328]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80b0 	beq.w	8003f2e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x30c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d008      	beq.n	8003df4 <HAL_RCC_OscConfig+0x30c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d004      	beq.n	8003df4 <HAL_RCC_OscConfig+0x30c>
 8003dea:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8003dee:	4846      	ldr	r0, [pc, #280]	@ (8003f08 <HAL_RCC_OscConfig+0x420>)
 8003df0:	f7fe f8b4 	bl	8001f5c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df4:	4b42      	ldr	r3, [pc, #264]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10f      	bne.n	8003e20 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	2300      	movs	r3, #0
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	4b3e      	ldr	r3, [pc, #248]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	4a3d      	ldr	r2, [pc, #244]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e10:	4b3b      	ldr	r3, [pc, #236]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	4b3a      	ldr	r3, [pc, #232]	@ (8003f0c <HAL_RCC_OscConfig+0x424>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d118      	bne.n	8003e5e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2c:	4b37      	ldr	r3, [pc, #220]	@ (8003f0c <HAL_RCC_OscConfig+0x424>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a36      	ldr	r2, [pc, #216]	@ (8003f0c <HAL_RCC_OscConfig+0x424>)
 8003e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e38:	f7fe fb06 	bl	8002448 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fe fb02 	bl	8002448 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e16c      	b.n	800412c <HAL_RCC_OscConfig+0x644>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e52:	4b2e      	ldr	r3, [pc, #184]	@ (8003f0c <HAL_RCC_OscConfig+0x424>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x38c>
 8003e66:	4b26      	ldr	r3, [pc, #152]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a25      	ldr	r2, [pc, #148]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e72:	e01c      	b.n	8003eae <HAL_RCC_OscConfig+0x3c6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0x3ae>
 8003e7c:	4b20      	ldr	r3, [pc, #128]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e80:	4a1f      	ldr	r2, [pc, #124]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e88:	4b1d      	ldr	r3, [pc, #116]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e94:	e00b      	b.n	8003eae <HAL_RCC_OscConfig+0x3c6>
 8003e96:	4b1a      	ldr	r3, [pc, #104]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9a:	4a19      	ldr	r2, [pc, #100]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea2:	4b17      	ldr	r3, [pc, #92]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d015      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fe fac7 	bl	8002448 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fe fac3 	bl	8002448 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e12b      	b.n	800412c <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f00 <HAL_RCC_OscConfig+0x418>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ee      	beq.n	8003ebe <HAL_RCC_OscConfig+0x3d6>
 8003ee0:	e01c      	b.n	8003f1c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fab1 	bl	8002448 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee8:	e012      	b.n	8003f10 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fe faad 	bl	8002448 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d909      	bls.n	8003f10 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e115      	b.n	800412c <HAL_RCC_OscConfig+0x644>
 8003f00:	40023800 	.word	0x40023800
 8003f04:	42470e80 	.word	0x42470e80
 8003f08:	080068ec 	.word	0x080068ec
 8003f0c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f10:	4b88      	ldr	r3, [pc, #544]	@ (8004134 <HAL_RCC_OscConfig+0x64c>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e6      	bne.n	8003eea <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4b84      	ldr	r3, [pc, #528]	@ (8004134 <HAL_RCC_OscConfig+0x64c>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	4a83      	ldr	r2, [pc, #524]	@ (8004134 <HAL_RCC_OscConfig+0x64c>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00c      	beq.n	8003f50 <HAL_RCC_OscConfig+0x468>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d008      	beq.n	8003f50 <HAL_RCC_OscConfig+0x468>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d004      	beq.n	8003f50 <HAL_RCC_OscConfig+0x468>
 8003f46:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8003f4a:	487b      	ldr	r0, [pc, #492]	@ (8004138 <HAL_RCC_OscConfig+0x650>)
 8003f4c:	f7fe f806 	bl	8001f5c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80e8 	beq.w	800412a <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f5a:	4b76      	ldr	r3, [pc, #472]	@ (8004134 <HAL_RCC_OscConfig+0x64c>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	f000 80a9 	beq.w	80040ba <HAL_RCC_OscConfig+0x5d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	f040 808d 	bne.w	800408c <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_RCC_OscConfig+0x4a6>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f82:	d004      	beq.n	8003f8e <HAL_RCC_OscConfig+0x4a6>
 8003f84:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8003f88:	486b      	ldr	r0, [pc, #428]	@ (8004138 <HAL_RCC_OscConfig+0x650>)
 8003f8a:	f7fd ffe7 	bl	8001f5c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d903      	bls.n	8003f9e <HAL_RCC_OscConfig+0x4b6>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f9c:	d904      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x4c0>
 8003f9e:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8003fa2:	4865      	ldr	r0, [pc, #404]	@ (8004138 <HAL_RCC_OscConfig+0x650>)
 8003fa4:	f7fd ffda 	bl	8001f5c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	2b31      	cmp	r3, #49	@ 0x31
 8003fae:	d904      	bls.n	8003fba <HAL_RCC_OscConfig+0x4d2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8003fb8:	d904      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
 8003fba:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8003fbe:	485e      	ldr	r0, [pc, #376]	@ (8004138 <HAL_RCC_OscConfig+0x650>)
 8003fc0:	f7fd ffcc 	bl	8001f5c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d010      	beq.n	8003fee <HAL_RCC_OscConfig+0x506>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d00c      	beq.n	8003fee <HAL_RCC_OscConfig+0x506>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	2b06      	cmp	r3, #6
 8003fda:	d008      	beq.n	8003fee <HAL_RCC_OscConfig+0x506>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d004      	beq.n	8003fee <HAL_RCC_OscConfig+0x506>
 8003fe4:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8003fe8:	4853      	ldr	r0, [pc, #332]	@ (8004138 <HAL_RCC_OscConfig+0x650>)
 8003fea:	f7fd ffb7 	bl	8001f5c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d903      	bls.n	8003ffe <HAL_RCC_OscConfig+0x516>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	d904      	bls.n	8004008 <HAL_RCC_OscConfig+0x520>
 8003ffe:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8004002:	484d      	ldr	r0, [pc, #308]	@ (8004138 <HAL_RCC_OscConfig+0x650>)
 8004004:	f7fd ffaa 	bl	8001f5c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004008:	4b4c      	ldr	r3, [pc, #304]	@ (800413c <HAL_RCC_OscConfig+0x654>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fe fa1b 	bl	8002448 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004016:	f7fe fa17 	bl	8002448 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e081      	b.n	800412c <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004028:	4b42      	ldr	r3, [pc, #264]	@ (8004134 <HAL_RCC_OscConfig+0x64c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	019b      	lsls	r3, r3, #6
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	3b01      	subs	r3, #1
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	061b      	lsls	r3, r3, #24
 8004058:	4936      	ldr	r1, [pc, #216]	@ (8004134 <HAL_RCC_OscConfig+0x64c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800405e:	4b37      	ldr	r3, [pc, #220]	@ (800413c <HAL_RCC_OscConfig+0x654>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fe f9f0 	bl	8002448 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406c:	f7fe f9ec 	bl	8002448 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e056      	b.n	800412c <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407e:	4b2d      	ldr	r3, [pc, #180]	@ (8004134 <HAL_RCC_OscConfig+0x64c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x584>
 800408a:	e04e      	b.n	800412a <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408c:	4b2b      	ldr	r3, [pc, #172]	@ (800413c <HAL_RCC_OscConfig+0x654>)
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fe f9d9 	bl	8002448 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe f9d5 	bl	8002448 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e03f      	b.n	800412c <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ac:	4b21      	ldr	r3, [pc, #132]	@ (8004134 <HAL_RCC_OscConfig+0x64c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f0      	bne.n	800409a <HAL_RCC_OscConfig+0x5b2>
 80040b8:	e037      	b.n	800412a <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e032      	b.n	800412c <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004134 <HAL_RCC_OscConfig+0x64c>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d028      	beq.n	8004126 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040de:	429a      	cmp	r2, r3
 80040e0:	d121      	bne.n	8004126 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d11a      	bne.n	8004126 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040f6:	4013      	ands	r3, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040fe:	4293      	cmp	r3, r2
 8004100:	d111      	bne.n	8004126 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d107      	bne.n	8004126 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x642>
#endif
        {
          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	080068ec 	.word	0x080068ec
 800413c:	42470060 	.word	0x42470060

08004140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e174      	b.n	800443e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_RCC_ClockConfig+0x24>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b0f      	cmp	r3, #15
 8004162:	d904      	bls.n	800416e <HAL_RCC_ClockConfig+0x2e>
 8004164:	f240 215a 	movw	r1, #602	@ 0x25a
 8004168:	487b      	ldr	r0, [pc, #492]	@ (8004358 <HAL_RCC_ClockConfig+0x218>)
 800416a:	f7fd fef7 	bl	8001f5c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d019      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x68>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d016      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x68>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d013      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x68>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d010      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x68>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b04      	cmp	r3, #4
 800418a:	d00d      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x68>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b05      	cmp	r3, #5
 8004190:	d00a      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x68>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b06      	cmp	r3, #6
 8004196:	d007      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x68>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b07      	cmp	r3, #7
 800419c:	d004      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x68>
 800419e:	f240 215b 	movw	r1, #603	@ 0x25b
 80041a2:	486d      	ldr	r0, [pc, #436]	@ (8004358 <HAL_RCC_ClockConfig+0x218>)
 80041a4:	f7fd feda 	bl	8001f5c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a8:	4b6c      	ldr	r3, [pc, #432]	@ (800435c <HAL_RCC_ClockConfig+0x21c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d90c      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b69      	ldr	r3, [pc, #420]	@ (800435c <HAL_RCC_ClockConfig+0x21c>)
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b67      	ldr	r3, [pc, #412]	@ (800435c <HAL_RCC_ClockConfig+0x21c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e136      	b.n	800443e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d049      	beq.n	8004270 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e8:	4b5d      	ldr	r3, [pc, #372]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4a5c      	ldr	r2, [pc, #368]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 80041ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004200:	4b57      	ldr	r3, [pc, #348]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a56      	ldr	r2, [pc, #344]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 8004206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800420a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d024      	beq.n	800425e <HAL_RCC_ClockConfig+0x11e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b80      	cmp	r3, #128	@ 0x80
 800421a:	d020      	beq.n	800425e <HAL_RCC_ClockConfig+0x11e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b90      	cmp	r3, #144	@ 0x90
 8004222:	d01c      	beq.n	800425e <HAL_RCC_ClockConfig+0x11e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2ba0      	cmp	r3, #160	@ 0xa0
 800422a:	d018      	beq.n	800425e <HAL_RCC_ClockConfig+0x11e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2bb0      	cmp	r3, #176	@ 0xb0
 8004232:	d014      	beq.n	800425e <HAL_RCC_ClockConfig+0x11e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2bc0      	cmp	r3, #192	@ 0xc0
 800423a:	d010      	beq.n	800425e <HAL_RCC_ClockConfig+0x11e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2bd0      	cmp	r3, #208	@ 0xd0
 8004242:	d00c      	beq.n	800425e <HAL_RCC_ClockConfig+0x11e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2be0      	cmp	r3, #224	@ 0xe0
 800424a:	d008      	beq.n	800425e <HAL_RCC_ClockConfig+0x11e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2bf0      	cmp	r3, #240	@ 0xf0
 8004252:	d004      	beq.n	800425e <HAL_RCC_ClockConfig+0x11e>
 8004254:	f240 217e 	movw	r1, #638	@ 0x27e
 8004258:	483f      	ldr	r0, [pc, #252]	@ (8004358 <HAL_RCC_ClockConfig+0x218>)
 800425a:	f7fd fe7f 	bl	8001f5c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425e:	4b40      	ldr	r3, [pc, #256]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	493d      	ldr	r1, [pc, #244]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 800426c:	4313      	orrs	r3, r2
 800426e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d059      	beq.n	8004330 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x166>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d00c      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x166>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x166>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d004      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x166>
 800429c:	f240 2185 	movw	r1, #645	@ 0x285
 80042a0:	482d      	ldr	r0, [pc, #180]	@ (8004358 <HAL_RCC_ClockConfig+0x218>)
 80042a2:	f7fd fe5b 	bl	8001f5c <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d107      	bne.n	80042be <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d119      	bne.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e0bf      	b.n	800443e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d003      	beq.n	80042ce <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d107      	bne.n	80042de <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ce:	4b24      	ldr	r3, [pc, #144]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e0af      	b.n	800443e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042de:	4b20      	ldr	r3, [pc, #128]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e0a7      	b.n	800443e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f023 0203 	bic.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4919      	ldr	r1, [pc, #100]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004300:	f7fe f8a2 	bl	8002448 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	e00a      	b.n	800431e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004308:	f7fe f89e 	bl	8002448 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e08f      	b.n	800443e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	4b10      	ldr	r3, [pc, #64]	@ (8004360 <HAL_RCC_ClockConfig+0x220>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 020c 	and.w	r2, r3, #12
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	429a      	cmp	r2, r3
 800432e:	d1eb      	bne.n	8004308 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004330:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <HAL_RCC_ClockConfig+0x21c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d212      	bcs.n	8004364 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	4b07      	ldr	r3, [pc, #28]	@ (800435c <HAL_RCC_ClockConfig+0x21c>)
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_RCC_ClockConfig+0x21c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d007      	beq.n	8004364 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e072      	b.n	800443e <HAL_RCC_ClockConfig+0x2fe>
 8004358:	080068ec 	.word	0x080068ec
 800435c:	40023c00 	.word	0x40023c00
 8004360:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d025      	beq.n	80043bc <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d018      	beq.n	80043aa <HAL_RCC_ClockConfig+0x26a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004380:	d013      	beq.n	80043aa <HAL_RCC_ClockConfig+0x26a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800438a:	d00e      	beq.n	80043aa <HAL_RCC_ClockConfig+0x26a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004394:	d009      	beq.n	80043aa <HAL_RCC_ClockConfig+0x26a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800439e:	d004      	beq.n	80043aa <HAL_RCC_ClockConfig+0x26a>
 80043a0:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80043a4:	4828      	ldr	r0, [pc, #160]	@ (8004448 <HAL_RCC_ClockConfig+0x308>)
 80043a6:	f7fd fdd9 	bl	8001f5c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043aa:	4b28      	ldr	r3, [pc, #160]	@ (800444c <HAL_RCC_ClockConfig+0x30c>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	4925      	ldr	r1, [pc, #148]	@ (800444c <HAL_RCC_ClockConfig+0x30c>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d026      	beq.n	8004416 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d018      	beq.n	8004402 <HAL_RCC_ClockConfig+0x2c2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d8:	d013      	beq.n	8004402 <HAL_RCC_ClockConfig+0x2c2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043e2:	d00e      	beq.n	8004402 <HAL_RCC_ClockConfig+0x2c2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80043ec:	d009      	beq.n	8004402 <HAL_RCC_ClockConfig+0x2c2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80043f6:	d004      	beq.n	8004402 <HAL_RCC_ClockConfig+0x2c2>
 80043f8:	f240 21ca 	movw	r1, #714	@ 0x2ca
 80043fc:	4812      	ldr	r0, [pc, #72]	@ (8004448 <HAL_RCC_ClockConfig+0x308>)
 80043fe:	f7fd fdad 	bl	8001f5c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004402:	4b12      	ldr	r3, [pc, #72]	@ (800444c <HAL_RCC_ClockConfig+0x30c>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	@ (800444c <HAL_RCC_ClockConfig+0x30c>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4602      	mov	r2, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_RCC_ClockConfig+0x30c>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	490a      	ldr	r1, [pc, #40]	@ (8004450 <HAL_RCC_ClockConfig+0x310>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	@ (8004454 <HAL_RCC_ClockConfig+0x314>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <HAL_RCC_ClockConfig+0x318>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd ffc2 	bl	80023c0 <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	080068ec 	.word	0x080068ec
 800444c:	40023800 	.word	0x40023800
 8004450:	08006998 	.word	0x08006998
 8004454:	20000004 	.word	0x20000004
 8004458:	20000008 	.word	0x20000008

0800445c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004460:	b090      	sub	sp, #64	@ 0x40
 8004462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
 8004468:	2300      	movs	r3, #0
 800446a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800446c:	2300      	movs	r3, #0
 800446e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004474:	4b59      	ldr	r3, [pc, #356]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d00d      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x40>
 8004480:	2b08      	cmp	r3, #8
 8004482:	f200 80a1 	bhi.w	80045c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x34>
 800448a:	2b04      	cmp	r3, #4
 800448c:	d003      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x3a>
 800448e:	e09b      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b53      	ldr	r3, [pc, #332]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004492:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004494:	e09b      	b.n	80045ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004496:	4b53      	ldr	r3, [pc, #332]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004498:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800449a:	e098      	b.n	80045ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800449c:	4b4f      	ldr	r3, [pc, #316]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a6:	4b4d      	ldr	r3, [pc, #308]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d028      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b2:	4b4a      	ldr	r3, [pc, #296]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	2200      	movs	r2, #0
 80044ba:	623b      	str	r3, [r7, #32]
 80044bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044c4:	2100      	movs	r1, #0
 80044c6:	4b47      	ldr	r3, [pc, #284]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80044c8:	fb03 f201 	mul.w	r2, r3, r1
 80044cc:	2300      	movs	r3, #0
 80044ce:	fb00 f303 	mul.w	r3, r0, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	4a43      	ldr	r2, [pc, #268]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80044d6:	fba0 1202 	umull	r1, r2, r0, r2
 80044da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044dc:	460a      	mov	r2, r1
 80044de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80044e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044e2:	4413      	add	r3, r2
 80044e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e8:	2200      	movs	r2, #0
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	61fa      	str	r2, [r7, #28]
 80044ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80044f6:	f7fc fb2b 	bl	8000b50 <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4613      	mov	r3, r2
 8004500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004502:	e053      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004504:	4b35      	ldr	r3, [pc, #212]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	099b      	lsrs	r3, r3, #6
 800450a:	2200      	movs	r2, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	617a      	str	r2, [r7, #20]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004516:	f04f 0b00 	mov.w	fp, #0
 800451a:	4652      	mov	r2, sl
 800451c:	465b      	mov	r3, fp
 800451e:	f04f 0000 	mov.w	r0, #0
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	0159      	lsls	r1, r3, #5
 8004528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800452c:	0150      	lsls	r0, r2, #5
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	ebb2 080a 	subs.w	r8, r2, sl
 8004536:	eb63 090b 	sbc.w	r9, r3, fp
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004546:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800454a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800454e:	ebb2 0408 	subs.w	r4, r2, r8
 8004552:	eb63 0509 	sbc.w	r5, r3, r9
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	00eb      	lsls	r3, r5, #3
 8004560:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004564:	00e2      	lsls	r2, r4, #3
 8004566:	4614      	mov	r4, r2
 8004568:	461d      	mov	r5, r3
 800456a:	eb14 030a 	adds.w	r3, r4, sl
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	eb45 030b 	adc.w	r3, r5, fp
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004582:	4629      	mov	r1, r5
 8004584:	028b      	lsls	r3, r1, #10
 8004586:	4621      	mov	r1, r4
 8004588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800458c:	4621      	mov	r1, r4
 800458e:	028a      	lsls	r2, r1, #10
 8004590:	4610      	mov	r0, r2
 8004592:	4619      	mov	r1, r3
 8004594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004596:	2200      	movs	r2, #0
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	60fa      	str	r2, [r7, #12]
 800459c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a0:	f7fc fad6 	bl	8000b50 <__aeabi_uldivmod>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4613      	mov	r3, r2
 80045aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045ac:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x180>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	3301      	adds	r3, #1
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80045bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045c6:	e002      	b.n	80045ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c8:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3740      	adds	r7, #64	@ 0x40
 80045d4:	46bd      	mov	sp, r7
 80045d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	00f42400 	.word	0x00f42400
 80045e4:	017d7840 	.word	0x017d7840

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0cf      	b.n	800479a <HAL_TIM_Base_Init+0x1b2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a69      	ldr	r2, [pc, #420]	@ (80047a4 <HAL_TIM_Base_Init+0x1bc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d027      	beq.n	8004654 <HAL_TIM_Base_Init+0x6c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800460c:	d022      	beq.n	8004654 <HAL_TIM_Base_Init+0x6c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a65      	ldr	r2, [pc, #404]	@ (80047a8 <HAL_TIM_Base_Init+0x1c0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d01d      	beq.n	8004654 <HAL_TIM_Base_Init+0x6c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a63      	ldr	r2, [pc, #396]	@ (80047ac <HAL_TIM_Base_Init+0x1c4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d018      	beq.n	8004654 <HAL_TIM_Base_Init+0x6c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a62      	ldr	r2, [pc, #392]	@ (80047b0 <HAL_TIM_Base_Init+0x1c8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_TIM_Base_Init+0x6c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a60      	ldr	r2, [pc, #384]	@ (80047b4 <HAL_TIM_Base_Init+0x1cc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00e      	beq.n	8004654 <HAL_TIM_Base_Init+0x6c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a5f      	ldr	r2, [pc, #380]	@ (80047b8 <HAL_TIM_Base_Init+0x1d0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_TIM_Base_Init+0x6c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a5d      	ldr	r2, [pc, #372]	@ (80047bc <HAL_TIM_Base_Init+0x1d4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_TIM_Base_Init+0x6c>
 800464a:	f240 1113 	movw	r1, #275	@ 0x113
 800464e:	485c      	ldr	r0, [pc, #368]	@ (80047c0 <HAL_TIM_Base_Init+0x1d8>)
 8004650:	f7fd fc84 	bl	8001f5c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d014      	beq.n	8004686 <HAL_TIM_Base_Init+0x9e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b10      	cmp	r3, #16
 8004662:	d010      	beq.n	8004686 <HAL_TIM_Base_Init+0x9e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b20      	cmp	r3, #32
 800466a:	d00c      	beq.n	8004686 <HAL_TIM_Base_Init+0x9e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d008      	beq.n	8004686 <HAL_TIM_Base_Init+0x9e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b60      	cmp	r3, #96	@ 0x60
 800467a:	d004      	beq.n	8004686 <HAL_TIM_Base_Init+0x9e>
 800467c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8004680:	484f      	ldr	r0, [pc, #316]	@ (80047c0 <HAL_TIM_Base_Init+0x1d8>)
 8004682:	f7fd fc6b 	bl	8001f5c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00e      	beq.n	80046ac <HAL_TIM_Base_Init+0xc4>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004696:	d009      	beq.n	80046ac <HAL_TIM_Base_Init+0xc4>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a0:	d004      	beq.n	80046ac <HAL_TIM_Base_Init+0xc4>
 80046a2:	f240 1115 	movw	r1, #277	@ 0x115
 80046a6:	4846      	ldr	r0, [pc, #280]	@ (80047c0 <HAL_TIM_Base_Init+0x1d8>)
 80046a8:	f7fd fc58 	bl	8001f5c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b4:	d004      	beq.n	80046c0 <HAL_TIM_Base_Init+0xd8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a3d      	ldr	r2, [pc, #244]	@ (80047b0 <HAL_TIM_Base_Init+0x1c8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d107      	bne.n	80046d0 <HAL_TIM_Base_Init+0xe8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf14      	ite	ne
 80046c8:	2301      	movne	r3, #1
 80046ca:	2300      	moveq	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e00e      	b.n	80046ee <HAL_TIM_Base_Init+0x106>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d006      	beq.n	80046e6 <HAL_TIM_Base_Init+0xfe>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e0:	d201      	bcs.n	80046e6 <HAL_TIM_Base_Init+0xfe>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_TIM_Base_Init+0x100>
 80046e6:	2300      	movs	r3, #0
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <HAL_TIM_Base_Init+0x114>
 80046f2:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80046f6:	4832      	ldr	r0, [pc, #200]	@ (80047c0 <HAL_TIM_Base_Init+0x1d8>)
 80046f8:	f7fd fc30 	bl	8001f5c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_TIM_Base_Init+0x12e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b80      	cmp	r3, #128	@ 0x80
 800470a:	d004      	beq.n	8004716 <HAL_TIM_Base_Init+0x12e>
 800470c:	f240 1117 	movw	r1, #279	@ 0x117
 8004710:	482b      	ldr	r0, [pc, #172]	@ (80047c0 <HAL_TIM_Base_Init+0x1d8>)
 8004712:	f7fd fc23 	bl	8001f5c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_TIM_Base_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd fc96 	bl	800205c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f000 fc70 	bl	8005028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40000c00 	.word	0x40000c00
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800
 80047c0:	08006924 	.word	0x08006924

080047c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d020      	beq.n	8004828 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01b      	beq.n	8004828 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0202 	mvn.w	r2, #2
 80047f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fbec 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004814:	e005      	b.n	8004822 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fbde 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fbef 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d020      	beq.n	8004874 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01b      	beq.n	8004874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0204 	mvn.w	r2, #4
 8004844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2202      	movs	r2, #2
 800484a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fbc6 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fbb8 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fbc9 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d020      	beq.n	80048c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01b      	beq.n	80048c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0208 	mvn.w	r2, #8
 8004890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2204      	movs	r2, #4
 8004896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fba0 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb92 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fba3 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d020      	beq.n	800490c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01b      	beq.n	800490c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0210 	mvn.w	r2, #16
 80048dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2208      	movs	r2, #8
 80048e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fb7a 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 80048f8:	e005      	b.n	8004906 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fb6c 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fb7d 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00c      	beq.n	8004930 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0201 	mvn.w	r2, #1
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fb4a 	bl	8004fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00c      	beq.n	8004954 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800494c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fd58 	bl	8005404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fb4e 	bl	8005014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00c      	beq.n	800499c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0220 	mvn.w	r2, #32
 8004994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fd2a 	bl	80053f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_TIM_ConfigClockSource+0x1c>
 80049bc:	2302      	movs	r3, #2
 80049be:	e2f0      	b.n	8004fa2 <HAL_TIM_ConfigClockSource+0x5fe>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d8:	d029      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x8a>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b70      	cmp	r3, #112	@ 0x70
 80049e0:	d025      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x8a>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ea:	d020      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x8a>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b40      	cmp	r3, #64	@ 0x40
 80049f2:	d01c      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x8a>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b50      	cmp	r3, #80	@ 0x50
 80049fa:	d018      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x8a>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b60      	cmp	r3, #96	@ 0x60
 8004a02:	d014      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x8a>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d010      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x8a>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d00c      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x8a>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d008      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x8a>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b30      	cmp	r3, #48	@ 0x30
 8004a22:	d004      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x8a>
 8004a24:	f241 41c3 	movw	r1, #5315	@ 0x14c3
 8004a28:	487c      	ldr	r0, [pc, #496]	@ (8004c1c <HAL_TIM_ConfigClockSource+0x278>)
 8004a2a:	f7fd fa97 	bl	8001f5c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a56:	f000 80f1 	beq.w	8004c3c <HAL_TIM_ConfigClockSource+0x298>
 8004a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a5e:	f200 8293 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x5e4>
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a66:	d02d      	beq.n	8004ac4 <HAL_TIM_ConfigClockSource+0x120>
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a6c:	f200 828c 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x5e4>
 8004a70:	2b70      	cmp	r3, #112	@ 0x70
 8004a72:	d05d      	beq.n	8004b30 <HAL_TIM_ConfigClockSource+0x18c>
 8004a74:	2b70      	cmp	r3, #112	@ 0x70
 8004a76:	f200 8287 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x5e4>
 8004a7a:	2b60      	cmp	r3, #96	@ 0x60
 8004a7c:	f000 81a0 	beq.w	8004dc0 <HAL_TIM_ConfigClockSource+0x41c>
 8004a80:	2b60      	cmp	r3, #96	@ 0x60
 8004a82:	f200 8281 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x5e4>
 8004a86:	2b50      	cmp	r3, #80	@ 0x50
 8004a88:	f000 8144 	beq.w	8004d14 <HAL_TIM_ConfigClockSource+0x370>
 8004a8c:	2b50      	cmp	r3, #80	@ 0x50
 8004a8e:	f200 827b 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x5e4>
 8004a92:	2b40      	cmp	r3, #64	@ 0x40
 8004a94:	f000 81f6 	beq.w	8004e84 <HAL_TIM_ConfigClockSource+0x4e0>
 8004a98:	2b40      	cmp	r3, #64	@ 0x40
 8004a9a:	f200 8275 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x5e4>
 8004a9e:	2b30      	cmp	r3, #48	@ 0x30
 8004aa0:	f000 8246 	beq.w	8004f30 <HAL_TIM_ConfigClockSource+0x58c>
 8004aa4:	2b30      	cmp	r3, #48	@ 0x30
 8004aa6:	f200 826f 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x5e4>
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	f000 8240 	beq.w	8004f30 <HAL_TIM_ConfigClockSource+0x58c>
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	f200 8269 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x5e4>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 823a 	beq.w	8004f30 <HAL_TIM_ConfigClockSource+0x58c>
 8004abc:	2b10      	cmp	r3, #16
 8004abe:	f000 8237 	beq.w	8004f30 <HAL_TIM_ConfigClockSource+0x58c>
 8004ac2:	e261      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a55      	ldr	r2, [pc, #340]	@ (8004c20 <HAL_TIM_ConfigClockSource+0x27c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	f000 825f 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x5ea>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad8:	f000 8259 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x5ea>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a50      	ldr	r2, [pc, #320]	@ (8004c24 <HAL_TIM_ConfigClockSource+0x280>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	f000 8253 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x5ea>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a4e      	ldr	r2, [pc, #312]	@ (8004c28 <HAL_TIM_ConfigClockSource+0x284>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	f000 824d 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x5ea>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a4c      	ldr	r2, [pc, #304]	@ (8004c2c <HAL_TIM_ConfigClockSource+0x288>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	f000 8247 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x5ea>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a4a      	ldr	r2, [pc, #296]	@ (8004c30 <HAL_TIM_ConfigClockSource+0x28c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	f000 8241 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x5ea>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a48      	ldr	r2, [pc, #288]	@ (8004c34 <HAL_TIM_ConfigClockSource+0x290>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	f000 823b 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x5ea>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a46      	ldr	r2, [pc, #280]	@ (8004c38 <HAL_TIM_ConfigClockSource+0x294>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	f000 8235 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x5ea>
 8004b24:	f241 41cf 	movw	r1, #5327	@ 0x14cf
 8004b28:	483c      	ldr	r0, [pc, #240]	@ (8004c1c <HAL_TIM_ConfigClockSource+0x278>)
 8004b2a:	f7fd fa17 	bl	8001f5c <assert_failed>
      break;
 8004b2e:	e22e      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a3a      	ldr	r2, [pc, #232]	@ (8004c20 <HAL_TIM_ConfigClockSource+0x27c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x1d2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b42:	d018      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x1d2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a36      	ldr	r2, [pc, #216]	@ (8004c24 <HAL_TIM_ConfigClockSource+0x280>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x1d2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a35      	ldr	r2, [pc, #212]	@ (8004c28 <HAL_TIM_ConfigClockSource+0x284>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x1d2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a33      	ldr	r2, [pc, #204]	@ (8004c2c <HAL_TIM_ConfigClockSource+0x288>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x1d2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a32      	ldr	r2, [pc, #200]	@ (8004c30 <HAL_TIM_ConfigClockSource+0x28c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x1d2>
 8004b6c:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8004b70:	482a      	ldr	r0, [pc, #168]	@ (8004c1c <HAL_TIM_ConfigClockSource+0x278>)
 8004b72:	f7fd f9f3 	bl	8001f5c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d013      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x202>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b86:	d00e      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x202>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x202>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x202>
 8004b9c:	f241 41d9 	movw	r1, #5337	@ 0x14d9
 8004ba0:	481e      	ldr	r0, [pc, #120]	@ (8004c1c <HAL_TIM_ConfigClockSource+0x278>)
 8004ba2:	f7fd f9db 	bl	8001f5c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bae:	d014      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x236>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x236>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00c      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x236>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d008      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x236>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b0a      	cmp	r3, #10
 8004bce:	d004      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x236>
 8004bd0:	f241 41da 	movw	r1, #5338	@ 0x14da
 8004bd4:	4811      	ldr	r0, [pc, #68]	@ (8004c1c <HAL_TIM_ConfigClockSource+0x278>)
 8004bd6:	f7fd f9c1 	bl	8001f5c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2b0f      	cmp	r3, #15
 8004be0:	d904      	bls.n	8004bec <HAL_TIM_ConfigClockSource+0x248>
 8004be2:	f241 41db 	movw	r1, #5339	@ 0x14db
 8004be6:	480d      	ldr	r0, [pc, #52]	@ (8004c1c <HAL_TIM_ConfigClockSource+0x278>)
 8004be8:	f7fd f9b8 	bl	8001f5c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bfc:	f000 fb1a 	bl	8005234 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]
      break;
 8004c18:	e1ba      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x5ec>
 8004c1a:	bf00      	nop
 8004c1c:	08006924 	.word	0x08006924
 8004c20:	40010000 	.word	0x40010000
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	40000c00 	.word	0x40000c00
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a8a      	ldr	r2, [pc, #552]	@ (8004e6c <HAL_TIM_ConfigClockSource+0x4c8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d018      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x2d4>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4e:	d013      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x2d4>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a86      	ldr	r2, [pc, #536]	@ (8004e70 <HAL_TIM_ConfigClockSource+0x4cc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x2d4>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a85      	ldr	r2, [pc, #532]	@ (8004e74 <HAL_TIM_ConfigClockSource+0x4d0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x2d4>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a83      	ldr	r2, [pc, #524]	@ (8004e78 <HAL_TIM_ConfigClockSource+0x4d4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x2d4>
 8004c6e:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8004c72:	4882      	ldr	r0, [pc, #520]	@ (8004e7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004c74:	f7fd f972 	bl	8001f5c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d013      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0x304>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0x304>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0x304>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0x304>
 8004c9e:	f241 41f1 	movw	r1, #5361	@ 0x14f1
 8004ca2:	4876      	ldr	r0, [pc, #472]	@ (8004e7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004ca4:	f7fd f95a 	bl	8001f5c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb0:	d014      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0x338>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0x338>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0x338>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d008      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0x338>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b0a      	cmp	r3, #10
 8004cd0:	d004      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0x338>
 8004cd2:	f241 41f2 	movw	r1, #5362	@ 0x14f2
 8004cd6:	4869      	ldr	r0, [pc, #420]	@ (8004e7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004cd8:	f7fd f940 	bl	8001f5c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b0f      	cmp	r3, #15
 8004ce2:	d904      	bls.n	8004cee <HAL_TIM_ConfigClockSource+0x34a>
 8004ce4:	f241 41f3 	movw	r1, #5363	@ 0x14f3
 8004ce8:	4864      	ldr	r0, [pc, #400]	@ (8004e7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004cea:	f7fd f937 	bl	8001f5c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cfe:	f000 fa99 	bl	8005234 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d10:	609a      	str	r2, [r3, #8]
      break;
 8004d12:	e13d      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a54      	ldr	r2, [pc, #336]	@ (8004e6c <HAL_TIM_ConfigClockSource+0x4c8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01d      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x3b6>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d26:	d018      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x3b6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a50      	ldr	r2, [pc, #320]	@ (8004e70 <HAL_TIM_ConfigClockSource+0x4cc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x3b6>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a4f      	ldr	r2, [pc, #316]	@ (8004e74 <HAL_TIM_ConfigClockSource+0x4d0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x3b6>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a4d      	ldr	r2, [pc, #308]	@ (8004e78 <HAL_TIM_ConfigClockSource+0x4d4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x3b6>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8004e80 <HAL_TIM_ConfigClockSource+0x4dc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x3b6>
 8004d50:	f241 5102 	movw	r1, #5378	@ 0x1502
 8004d54:	4849      	ldr	r0, [pc, #292]	@ (8004e7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004d56:	f7fd f901 	bl	8001f5c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d62:	d014      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x3ea>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x3ea>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00c      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x3ea>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d008      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x3ea>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b0a      	cmp	r3, #10
 8004d82:	d004      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x3ea>
 8004d84:	f241 5105 	movw	r1, #5381	@ 0x1505
 8004d88:	483c      	ldr	r0, [pc, #240]	@ (8004e7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004d8a:	f7fd f8e7 	bl	8001f5c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b0f      	cmp	r3, #15
 8004d94:	d904      	bls.n	8004da0 <HAL_TIM_ConfigClockSource+0x3fc>
 8004d96:	f241 5106 	movw	r1, #5382	@ 0x1506
 8004d9a:	4838      	ldr	r0, [pc, #224]	@ (8004e7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004d9c:	f7fd f8de 	bl	8001f5c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dac:	461a      	mov	r2, r3
 8004dae:	f000 f9c7 	bl	8005140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2150      	movs	r1, #80	@ 0x50
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fa20 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004dbe:	e0e7      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a29      	ldr	r2, [pc, #164]	@ (8004e6c <HAL_TIM_ConfigClockSource+0x4c8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01d      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x462>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd2:	d018      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x462>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a25      	ldr	r2, [pc, #148]	@ (8004e70 <HAL_TIM_ConfigClockSource+0x4cc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x462>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a24      	ldr	r2, [pc, #144]	@ (8004e74 <HAL_TIM_ConfigClockSource+0x4d0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x462>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a22      	ldr	r2, [pc, #136]	@ (8004e78 <HAL_TIM_ConfigClockSource+0x4d4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x462>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a22      	ldr	r2, [pc, #136]	@ (8004e80 <HAL_TIM_ConfigClockSource+0x4dc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x462>
 8004dfc:	f241 5112 	movw	r1, #5394	@ 0x1512
 8004e00:	481e      	ldr	r0, [pc, #120]	@ (8004e7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004e02:	f7fd f8ab 	bl	8001f5c <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e0e:	d014      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x496>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x496>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x496>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d008      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x496>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b0a      	cmp	r3, #10
 8004e2e:	d004      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x496>
 8004e30:	f241 5115 	movw	r1, #5397	@ 0x1515
 8004e34:	4811      	ldr	r0, [pc, #68]	@ (8004e7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004e36:	f7fd f891 	bl	8001f5c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2b0f      	cmp	r3, #15
 8004e40:	d904      	bls.n	8004e4c <HAL_TIM_ConfigClockSource+0x4a8>
 8004e42:	f241 5116 	movw	r1, #5398	@ 0x1516
 8004e46:	480d      	ldr	r0, [pc, #52]	@ (8004e7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004e48:	f7fd f888 	bl	8001f5c <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f000 f9a0 	bl	800519e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2160      	movs	r1, #96	@ 0x60
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f9ca 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e091      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x5ec>
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	40000400 	.word	0x40000400
 8004e74:	40000800 	.word	0x40000800
 8004e78:	40000c00 	.word	0x40000c00
 8004e7c:	08006924 	.word	0x08006924
 8004e80:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a48      	ldr	r2, [pc, #288]	@ (8004fac <HAL_TIM_ConfigClockSource+0x608>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01d      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x526>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e96:	d018      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x526>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a44      	ldr	r2, [pc, #272]	@ (8004fb0 <HAL_TIM_ConfigClockSource+0x60c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x526>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a43      	ldr	r2, [pc, #268]	@ (8004fb4 <HAL_TIM_ConfigClockSource+0x610>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x526>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a41      	ldr	r2, [pc, #260]	@ (8004fb8 <HAL_TIM_ConfigClockSource+0x614>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x526>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a40      	ldr	r2, [pc, #256]	@ (8004fbc <HAL_TIM_ConfigClockSource+0x618>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x526>
 8004ec0:	f241 5122 	movw	r1, #5410	@ 0x1522
 8004ec4:	483e      	ldr	r0, [pc, #248]	@ (8004fc0 <HAL_TIM_ConfigClockSource+0x61c>)
 8004ec6:	f7fd f849 	bl	8001f5c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ed2:	d014      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x55a>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x55a>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00c      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x55a>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d008      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x55a>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b0a      	cmp	r3, #10
 8004ef2:	d004      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x55a>
 8004ef4:	f241 5125 	movw	r1, #5413	@ 0x1525
 8004ef8:	4831      	ldr	r0, [pc, #196]	@ (8004fc0 <HAL_TIM_ConfigClockSource+0x61c>)
 8004efa:	f7fd f82f 	bl	8001f5c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	2b0f      	cmp	r3, #15
 8004f04:	d904      	bls.n	8004f10 <HAL_TIM_ConfigClockSource+0x56c>
 8004f06:	f241 5126 	movw	r1, #5414	@ 0x1526
 8004f0a:	482d      	ldr	r0, [pc, #180]	@ (8004fc0 <HAL_TIM_ConfigClockSource+0x61c>)
 8004f0c:	f7fd f826 	bl	8001f5c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	f000 f90f 	bl	8005140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2140      	movs	r1, #64	@ 0x40
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 f968 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004f2e:	e02f      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1d      	ldr	r2, [pc, #116]	@ (8004fac <HAL_TIM_ConfigClockSource+0x608>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01d      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x5d2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f42:	d018      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x5d2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a19      	ldr	r2, [pc, #100]	@ (8004fb0 <HAL_TIM_ConfigClockSource+0x60c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x5d2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a18      	ldr	r2, [pc, #96]	@ (8004fb4 <HAL_TIM_ConfigClockSource+0x610>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x5d2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a16      	ldr	r2, [pc, #88]	@ (8004fb8 <HAL_TIM_ConfigClockSource+0x614>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x5d2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a15      	ldr	r2, [pc, #84]	@ (8004fbc <HAL_TIM_ConfigClockSource+0x618>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x5d2>
 8004f6c:	f241 5135 	movw	r1, #5429	@ 0x1535
 8004f70:	4813      	ldr	r0, [pc, #76]	@ (8004fc0 <HAL_TIM_ConfigClockSource+0x61c>)
 8004f72:	f7fc fff3 	bl	8001f5c <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f000 f93c 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004f86:	e003      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f8c:	e000      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8004f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	08006924 	.word	0x08006924

08004fc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a3a      	ldr	r2, [pc, #232]	@ (8005124 <TIM_Base_SetConfig+0xfc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00f      	beq.n	8005060 <TIM_Base_SetConfig+0x38>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005046:	d00b      	beq.n	8005060 <TIM_Base_SetConfig+0x38>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a37      	ldr	r2, [pc, #220]	@ (8005128 <TIM_Base_SetConfig+0x100>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d007      	beq.n	8005060 <TIM_Base_SetConfig+0x38>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a36      	ldr	r2, [pc, #216]	@ (800512c <TIM_Base_SetConfig+0x104>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_Base_SetConfig+0x38>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a35      	ldr	r2, [pc, #212]	@ (8005130 <TIM_Base_SetConfig+0x108>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d108      	bne.n	8005072 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a2b      	ldr	r2, [pc, #172]	@ (8005124 <TIM_Base_SetConfig+0xfc>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01b      	beq.n	80050b2 <TIM_Base_SetConfig+0x8a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005080:	d017      	beq.n	80050b2 <TIM_Base_SetConfig+0x8a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a28      	ldr	r2, [pc, #160]	@ (8005128 <TIM_Base_SetConfig+0x100>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <TIM_Base_SetConfig+0x8a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a27      	ldr	r2, [pc, #156]	@ (800512c <TIM_Base_SetConfig+0x104>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00f      	beq.n	80050b2 <TIM_Base_SetConfig+0x8a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a26      	ldr	r2, [pc, #152]	@ (8005130 <TIM_Base_SetConfig+0x108>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00b      	beq.n	80050b2 <TIM_Base_SetConfig+0x8a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a25      	ldr	r2, [pc, #148]	@ (8005134 <TIM_Base_SetConfig+0x10c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <TIM_Base_SetConfig+0x8a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a24      	ldr	r2, [pc, #144]	@ (8005138 <TIM_Base_SetConfig+0x110>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_Base_SetConfig+0x8a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a23      	ldr	r2, [pc, #140]	@ (800513c <TIM_Base_SetConfig+0x114>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d108      	bne.n	80050c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005124 <TIM_Base_SetConfig+0xfc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d103      	bne.n	80050f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d105      	bne.n	8005116 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f023 0201 	bic.w	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]
  }
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40014000 	.word	0x40014000
 8005138:	40014400 	.word	0x40014400
 800513c:	40014800 	.word	0x40014800

08005140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f023 0201 	bic.w	r2, r3, #1
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800516a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f023 030a 	bic.w	r3, r3, #10
 800517c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f023 0210 	bic.w	r2, r3, #16
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	031b      	lsls	r3, r3, #12
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	f043 0307 	orr.w	r3, r3, #7
 8005220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800524e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	021a      	lsls	r2, r3, #8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	431a      	orrs	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	609a      	str	r2, [r3, #8]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a55      	ldr	r2, [pc, #340]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d018      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005290:	d013      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a51      	ldr	r2, [pc, #324]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00e      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a4f      	ldr	r2, [pc, #316]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d009      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a4e      	ldr	r2, [pc, #312]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d004      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80052b0:	f240 71a9 	movw	r1, #1961	@ 0x7a9
 80052b4:	484c      	ldr	r0, [pc, #304]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80052b6:	f7fc fe51 	bl	8001f5c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d020      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	d01c      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d018      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b30      	cmp	r3, #48	@ 0x30
 80052d8:	d014      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b40      	cmp	r3, #64	@ 0x40
 80052e0:	d010      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b50      	cmp	r3, #80	@ 0x50
 80052e8:	d00c      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b60      	cmp	r3, #96	@ 0x60
 80052f0:	d008      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b70      	cmp	r3, #112	@ 0x70
 80052f8:	d004      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80052fa:	f240 71aa 	movw	r1, #1962	@ 0x7aa
 80052fe:	483a      	ldr	r0, [pc, #232]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8005300:	f7fc fe2c 	bl	8001f5c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b80      	cmp	r3, #128	@ 0x80
 800530a:	d008      	beq.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d004      	beq.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8005314:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8005318:	4833      	ldr	r0, [pc, #204]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800531a:	f7fc fe1f 	bl	8001f5c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005328:	2302      	movs	r3, #2
 800532a:	e050      	b.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d018      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005378:	d013      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a17      	ldr	r2, [pc, #92]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00e      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a15      	ldr	r2, [pc, #84]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d009      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a14      	ldr	r2, [pc, #80]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a13      	ldr	r2, [pc, #76]	@ (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d10c      	bne.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	0800695c 	.word	0x0800695c
 80053ec:	40014000 	.word	0x40014000

080053f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <memset>:
 8005418:	4402      	add	r2, r0
 800541a:	4603      	mov	r3, r0
 800541c:	4293      	cmp	r3, r2
 800541e:	d100      	bne.n	8005422 <memset+0xa>
 8005420:	4770      	bx	lr
 8005422:	f803 1b01 	strb.w	r1, [r3], #1
 8005426:	e7f9      	b.n	800541c <memset+0x4>

08005428 <__errno>:
 8005428:	4b01      	ldr	r3, [pc, #4]	@ (8005430 <__errno+0x8>)
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	20000010 	.word	0x20000010

08005434 <__libc_init_array>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	4d0d      	ldr	r5, [pc, #52]	@ (800546c <__libc_init_array+0x38>)
 8005438:	4c0d      	ldr	r4, [pc, #52]	@ (8005470 <__libc_init_array+0x3c>)
 800543a:	1b64      	subs	r4, r4, r5
 800543c:	10a4      	asrs	r4, r4, #2
 800543e:	2600      	movs	r6, #0
 8005440:	42a6      	cmp	r6, r4
 8005442:	d109      	bne.n	8005458 <__libc_init_array+0x24>
 8005444:	4d0b      	ldr	r5, [pc, #44]	@ (8005474 <__libc_init_array+0x40>)
 8005446:	4c0c      	ldr	r4, [pc, #48]	@ (8005478 <__libc_init_array+0x44>)
 8005448:	f001 f978 	bl	800673c <_init>
 800544c:	1b64      	subs	r4, r4, r5
 800544e:	10a4      	asrs	r4, r4, #2
 8005450:	2600      	movs	r6, #0
 8005452:	42a6      	cmp	r6, r4
 8005454:	d105      	bne.n	8005462 <__libc_init_array+0x2e>
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	f855 3b04 	ldr.w	r3, [r5], #4
 800545c:	4798      	blx	r3
 800545e:	3601      	adds	r6, #1
 8005460:	e7ee      	b.n	8005440 <__libc_init_array+0xc>
 8005462:	f855 3b04 	ldr.w	r3, [r5], #4
 8005466:	4798      	blx	r3
 8005468:	3601      	adds	r6, #1
 800546a:	e7f2      	b.n	8005452 <__libc_init_array+0x1e>
 800546c:	080069e8 	.word	0x080069e8
 8005470:	080069e8 	.word	0x080069e8
 8005474:	080069e8 	.word	0x080069e8
 8005478:	080069ec 	.word	0x080069ec
 800547c:	00000000 	.word	0x00000000

08005480 <log>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	ed2d 8b02 	vpush	{d8}
 8005486:	ec55 4b10 	vmov	r4, r5, d0
 800548a:	f000 f8bd 	bl	8005608 <__ieee754_log>
 800548e:	4622      	mov	r2, r4
 8005490:	462b      	mov	r3, r5
 8005492:	4620      	mov	r0, r4
 8005494:	4629      	mov	r1, r5
 8005496:	eeb0 8a40 	vmov.f32	s16, s0
 800549a:	eef0 8a60 	vmov.f32	s17, s1
 800549e:	f7fb faf1 	bl	8000a84 <__aeabi_dcmpun>
 80054a2:	b998      	cbnz	r0, 80054cc <log+0x4c>
 80054a4:	2200      	movs	r2, #0
 80054a6:	2300      	movs	r3, #0
 80054a8:	4620      	mov	r0, r4
 80054aa:	4629      	mov	r1, r5
 80054ac:	f7fb fae0 	bl	8000a70 <__aeabi_dcmpgt>
 80054b0:	b960      	cbnz	r0, 80054cc <log+0x4c>
 80054b2:	2200      	movs	r2, #0
 80054b4:	2300      	movs	r3, #0
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7fb fab1 	bl	8000a20 <__aeabi_dcmpeq>
 80054be:	b160      	cbz	r0, 80054da <log+0x5a>
 80054c0:	f7ff ffb2 	bl	8005428 <__errno>
 80054c4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80054f0 <log+0x70>
 80054c8:	2322      	movs	r3, #34	@ 0x22
 80054ca:	6003      	str	r3, [r0, #0]
 80054cc:	eeb0 0a48 	vmov.f32	s0, s16
 80054d0:	eef0 0a68 	vmov.f32	s1, s17
 80054d4:	ecbd 8b02 	vpop	{d8}
 80054d8:	bd38      	pop	{r3, r4, r5, pc}
 80054da:	f7ff ffa5 	bl	8005428 <__errno>
 80054de:	ecbd 8b02 	vpop	{d8}
 80054e2:	2321      	movs	r3, #33	@ 0x21
 80054e4:	6003      	str	r3, [r0, #0]
 80054e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054ea:	4803      	ldr	r0, [pc, #12]	@ (80054f8 <log+0x78>)
 80054ec:	f000 b884 	b.w	80055f8 <nan>
 80054f0:	00000000 	.word	0x00000000
 80054f4:	fff00000 	.word	0xfff00000
 80054f8:	080069a8 	.word	0x080069a8

080054fc <pow>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	ed2d 8b02 	vpush	{d8}
 8005502:	eeb0 8a40 	vmov.f32	s16, s0
 8005506:	eef0 8a60 	vmov.f32	s17, s1
 800550a:	ec55 4b11 	vmov	r4, r5, d1
 800550e:	f000 fa33 	bl	8005978 <__ieee754_pow>
 8005512:	4622      	mov	r2, r4
 8005514:	462b      	mov	r3, r5
 8005516:	4620      	mov	r0, r4
 8005518:	4629      	mov	r1, r5
 800551a:	ec57 6b10 	vmov	r6, r7, d0
 800551e:	f7fb fab1 	bl	8000a84 <__aeabi_dcmpun>
 8005522:	2800      	cmp	r0, #0
 8005524:	d13b      	bne.n	800559e <pow+0xa2>
 8005526:	ec51 0b18 	vmov	r0, r1, d8
 800552a:	2200      	movs	r2, #0
 800552c:	2300      	movs	r3, #0
 800552e:	f7fb fa77 	bl	8000a20 <__aeabi_dcmpeq>
 8005532:	b1b8      	cbz	r0, 8005564 <pow+0x68>
 8005534:	2200      	movs	r2, #0
 8005536:	2300      	movs	r3, #0
 8005538:	4620      	mov	r0, r4
 800553a:	4629      	mov	r1, r5
 800553c:	f7fb fa70 	bl	8000a20 <__aeabi_dcmpeq>
 8005540:	2800      	cmp	r0, #0
 8005542:	d146      	bne.n	80055d2 <pow+0xd6>
 8005544:	ec45 4b10 	vmov	d0, r4, r5
 8005548:	f000 f848 	bl	80055dc <finite>
 800554c:	b338      	cbz	r0, 800559e <pow+0xa2>
 800554e:	2200      	movs	r2, #0
 8005550:	2300      	movs	r3, #0
 8005552:	4620      	mov	r0, r4
 8005554:	4629      	mov	r1, r5
 8005556:	f7fb fa6d 	bl	8000a34 <__aeabi_dcmplt>
 800555a:	b300      	cbz	r0, 800559e <pow+0xa2>
 800555c:	f7ff ff64 	bl	8005428 <__errno>
 8005560:	2322      	movs	r3, #34	@ 0x22
 8005562:	e01b      	b.n	800559c <pow+0xa0>
 8005564:	ec47 6b10 	vmov	d0, r6, r7
 8005568:	f000 f838 	bl	80055dc <finite>
 800556c:	b9e0      	cbnz	r0, 80055a8 <pow+0xac>
 800556e:	eeb0 0a48 	vmov.f32	s0, s16
 8005572:	eef0 0a68 	vmov.f32	s1, s17
 8005576:	f000 f831 	bl	80055dc <finite>
 800557a:	b1a8      	cbz	r0, 80055a8 <pow+0xac>
 800557c:	ec45 4b10 	vmov	d0, r4, r5
 8005580:	f000 f82c 	bl	80055dc <finite>
 8005584:	b180      	cbz	r0, 80055a8 <pow+0xac>
 8005586:	4632      	mov	r2, r6
 8005588:	463b      	mov	r3, r7
 800558a:	4630      	mov	r0, r6
 800558c:	4639      	mov	r1, r7
 800558e:	f7fb fa79 	bl	8000a84 <__aeabi_dcmpun>
 8005592:	2800      	cmp	r0, #0
 8005594:	d0e2      	beq.n	800555c <pow+0x60>
 8005596:	f7ff ff47 	bl	8005428 <__errno>
 800559a:	2321      	movs	r3, #33	@ 0x21
 800559c:	6003      	str	r3, [r0, #0]
 800559e:	ecbd 8b02 	vpop	{d8}
 80055a2:	ec47 6b10 	vmov	d0, r6, r7
 80055a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a8:	2200      	movs	r2, #0
 80055aa:	2300      	movs	r3, #0
 80055ac:	4630      	mov	r0, r6
 80055ae:	4639      	mov	r1, r7
 80055b0:	f7fb fa36 	bl	8000a20 <__aeabi_dcmpeq>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d0f2      	beq.n	800559e <pow+0xa2>
 80055b8:	eeb0 0a48 	vmov.f32	s0, s16
 80055bc:	eef0 0a68 	vmov.f32	s1, s17
 80055c0:	f000 f80c 	bl	80055dc <finite>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d0ea      	beq.n	800559e <pow+0xa2>
 80055c8:	ec45 4b10 	vmov	d0, r4, r5
 80055cc:	f000 f806 	bl	80055dc <finite>
 80055d0:	e7c3      	b.n	800555a <pow+0x5e>
 80055d2:	4f01      	ldr	r7, [pc, #4]	@ (80055d8 <pow+0xdc>)
 80055d4:	2600      	movs	r6, #0
 80055d6:	e7e2      	b.n	800559e <pow+0xa2>
 80055d8:	3ff00000 	.word	0x3ff00000

080055dc <finite>:
 80055dc:	b082      	sub	sp, #8
 80055de:	ed8d 0b00 	vstr	d0, [sp]
 80055e2:	9801      	ldr	r0, [sp, #4]
 80055e4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80055e8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80055ec:	0fc0      	lsrs	r0, r0, #31
 80055ee:	b002      	add	sp, #8
 80055f0:	4770      	bx	lr
 80055f2:	0000      	movs	r0, r0
 80055f4:	0000      	movs	r0, r0
	...

080055f8 <nan>:
 80055f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005600 <nan+0x8>
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	00000000 	.word	0x00000000
 8005604:	7ff80000 	.word	0x7ff80000

08005608 <__ieee754_log>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	ec51 0b10 	vmov	r0, r1, d0
 8005610:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005614:	b087      	sub	sp, #28
 8005616:	460d      	mov	r5, r1
 8005618:	da26      	bge.n	8005668 <__ieee754_log+0x60>
 800561a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800561e:	4303      	orrs	r3, r0
 8005620:	4602      	mov	r2, r0
 8005622:	d10a      	bne.n	800563a <__ieee754_log+0x32>
 8005624:	49ce      	ldr	r1, [pc, #824]	@ (8005960 <__ieee754_log+0x358>)
 8005626:	2200      	movs	r2, #0
 8005628:	2300      	movs	r3, #0
 800562a:	2000      	movs	r0, #0
 800562c:	f7fb f8ba 	bl	80007a4 <__aeabi_ddiv>
 8005630:	ec41 0b10 	vmov	d0, r0, r1
 8005634:	b007      	add	sp, #28
 8005636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563a:	2900      	cmp	r1, #0
 800563c:	da05      	bge.n	800564a <__ieee754_log+0x42>
 800563e:	460b      	mov	r3, r1
 8005640:	f7fa fdce 	bl	80001e0 <__aeabi_dsub>
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	e7f0      	b.n	800562c <__ieee754_log+0x24>
 800564a:	4bc6      	ldr	r3, [pc, #792]	@ (8005964 <__ieee754_log+0x35c>)
 800564c:	2200      	movs	r2, #0
 800564e:	f7fa ff7f 	bl	8000550 <__aeabi_dmul>
 8005652:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8005656:	460d      	mov	r5, r1
 8005658:	4ac3      	ldr	r2, [pc, #780]	@ (8005968 <__ieee754_log+0x360>)
 800565a:	4295      	cmp	r5, r2
 800565c:	dd06      	ble.n	800566c <__ieee754_log+0x64>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	f7fa fdbf 	bl	80001e4 <__adddf3>
 8005666:	e7e3      	b.n	8005630 <__ieee754_log+0x28>
 8005668:	2300      	movs	r3, #0
 800566a:	e7f5      	b.n	8005658 <__ieee754_log+0x50>
 800566c:	152c      	asrs	r4, r5, #20
 800566e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8005672:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005676:	441c      	add	r4, r3
 8005678:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800567c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8005680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005684:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8005688:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800568c:	ea42 0105 	orr.w	r1, r2, r5
 8005690:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005694:	2200      	movs	r2, #0
 8005696:	4bb5      	ldr	r3, [pc, #724]	@ (800596c <__ieee754_log+0x364>)
 8005698:	f7fa fda2 	bl	80001e0 <__aeabi_dsub>
 800569c:	1cab      	adds	r3, r5, #2
 800569e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	4682      	mov	sl, r0
 80056a6:	468b      	mov	fp, r1
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	dc53      	bgt.n	8005756 <__ieee754_log+0x14e>
 80056ae:	2300      	movs	r3, #0
 80056b0:	f7fb f9b6 	bl	8000a20 <__aeabi_dcmpeq>
 80056b4:	b1d0      	cbz	r0, 80056ec <__ieee754_log+0xe4>
 80056b6:	2c00      	cmp	r4, #0
 80056b8:	f000 8120 	beq.w	80058fc <__ieee754_log+0x2f4>
 80056bc:	4620      	mov	r0, r4
 80056be:	f7fa fedd 	bl	800047c <__aeabi_i2d>
 80056c2:	a391      	add	r3, pc, #580	@ (adr r3, 8005908 <__ieee754_log+0x300>)
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	4606      	mov	r6, r0
 80056ca:	460f      	mov	r7, r1
 80056cc:	f7fa ff40 	bl	8000550 <__aeabi_dmul>
 80056d0:	a38f      	add	r3, pc, #572	@ (adr r3, 8005910 <__ieee754_log+0x308>)
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	4604      	mov	r4, r0
 80056d8:	460d      	mov	r5, r1
 80056da:	4630      	mov	r0, r6
 80056dc:	4639      	mov	r1, r7
 80056de:	f7fa ff37 	bl	8000550 <__aeabi_dmul>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4620      	mov	r0, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	e7ba      	b.n	8005662 <__ieee754_log+0x5a>
 80056ec:	a38a      	add	r3, pc, #552	@ (adr r3, 8005918 <__ieee754_log+0x310>)
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	4650      	mov	r0, sl
 80056f4:	4659      	mov	r1, fp
 80056f6:	f7fa ff2b 	bl	8000550 <__aeabi_dmul>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	2000      	movs	r0, #0
 8005700:	499b      	ldr	r1, [pc, #620]	@ (8005970 <__ieee754_log+0x368>)
 8005702:	f7fa fd6d 	bl	80001e0 <__aeabi_dsub>
 8005706:	4652      	mov	r2, sl
 8005708:	4606      	mov	r6, r0
 800570a:	460f      	mov	r7, r1
 800570c:	465b      	mov	r3, fp
 800570e:	4650      	mov	r0, sl
 8005710:	4659      	mov	r1, fp
 8005712:	f7fa ff1d 	bl	8000550 <__aeabi_dmul>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4630      	mov	r0, r6
 800571c:	4639      	mov	r1, r7
 800571e:	f7fa ff17 	bl	8000550 <__aeabi_dmul>
 8005722:	4606      	mov	r6, r0
 8005724:	460f      	mov	r7, r1
 8005726:	b914      	cbnz	r4, 800572e <__ieee754_log+0x126>
 8005728:	4632      	mov	r2, r6
 800572a:	463b      	mov	r3, r7
 800572c:	e0a0      	b.n	8005870 <__ieee754_log+0x268>
 800572e:	4620      	mov	r0, r4
 8005730:	f7fa fea4 	bl	800047c <__aeabi_i2d>
 8005734:	a374      	add	r3, pc, #464	@ (adr r3, 8005908 <__ieee754_log+0x300>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	4680      	mov	r8, r0
 800573c:	4689      	mov	r9, r1
 800573e:	f7fa ff07 	bl	8000550 <__aeabi_dmul>
 8005742:	a373      	add	r3, pc, #460	@ (adr r3, 8005910 <__ieee754_log+0x308>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	4604      	mov	r4, r0
 800574a:	460d      	mov	r5, r1
 800574c:	4640      	mov	r0, r8
 800574e:	4649      	mov	r1, r9
 8005750:	f7fa fefe 	bl	8000550 <__aeabi_dmul>
 8005754:	e0a5      	b.n	80058a2 <__ieee754_log+0x29a>
 8005756:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800575a:	f7fa fd43 	bl	80001e4 <__adddf3>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4650      	mov	r0, sl
 8005764:	4659      	mov	r1, fp
 8005766:	f7fb f81d 	bl	80007a4 <__aeabi_ddiv>
 800576a:	e9cd 0100 	strd	r0, r1, [sp]
 800576e:	4620      	mov	r0, r4
 8005770:	f7fa fe84 	bl	800047c <__aeabi_i2d>
 8005774:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	f7fa fee6 	bl	8000550 <__aeabi_dmul>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800578c:	f7fa fee0 	bl	8000550 <__aeabi_dmul>
 8005790:	a363      	add	r3, pc, #396	@ (adr r3, 8005920 <__ieee754_log+0x318>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	4680      	mov	r8, r0
 8005798:	4689      	mov	r9, r1
 800579a:	f7fa fed9 	bl	8000550 <__aeabi_dmul>
 800579e:	a362      	add	r3, pc, #392	@ (adr r3, 8005928 <__ieee754_log+0x320>)
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f7fa fd1e 	bl	80001e4 <__adddf3>
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	f7fa fed0 	bl	8000550 <__aeabi_dmul>
 80057b0:	a35f      	add	r3, pc, #380	@ (adr r3, 8005930 <__ieee754_log+0x328>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa fd15 	bl	80001e4 <__adddf3>
 80057ba:	4642      	mov	r2, r8
 80057bc:	464b      	mov	r3, r9
 80057be:	f7fa fec7 	bl	8000550 <__aeabi_dmul>
 80057c2:	a35d      	add	r3, pc, #372	@ (adr r3, 8005938 <__ieee754_log+0x330>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f7fa fd0c 	bl	80001e4 <__adddf3>
 80057cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057d0:	f7fa febe 	bl	8000550 <__aeabi_dmul>
 80057d4:	a35a      	add	r3, pc, #360	@ (adr r3, 8005940 <__ieee754_log+0x338>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057de:	4640      	mov	r0, r8
 80057e0:	4649      	mov	r1, r9
 80057e2:	f7fa feb5 	bl	8000550 <__aeabi_dmul>
 80057e6:	a358      	add	r3, pc, #352	@ (adr r3, 8005948 <__ieee754_log+0x340>)
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f7fa fcfa 	bl	80001e4 <__adddf3>
 80057f0:	4642      	mov	r2, r8
 80057f2:	464b      	mov	r3, r9
 80057f4:	f7fa feac 	bl	8000550 <__aeabi_dmul>
 80057f8:	a355      	add	r3, pc, #340	@ (adr r3, 8005950 <__ieee754_log+0x348>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f7fa fcf1 	bl	80001e4 <__adddf3>
 8005802:	4642      	mov	r2, r8
 8005804:	464b      	mov	r3, r9
 8005806:	f7fa fea3 	bl	8000550 <__aeabi_dmul>
 800580a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8005816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800581a:	f7fa fce3 	bl	80001e4 <__adddf3>
 800581e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8005822:	3551      	adds	r5, #81	@ 0x51
 8005824:	4335      	orrs	r5, r6
 8005826:	2d00      	cmp	r5, #0
 8005828:	4680      	mov	r8, r0
 800582a:	4689      	mov	r9, r1
 800582c:	dd48      	ble.n	80058c0 <__ieee754_log+0x2b8>
 800582e:	4b50      	ldr	r3, [pc, #320]	@ (8005970 <__ieee754_log+0x368>)
 8005830:	2200      	movs	r2, #0
 8005832:	4650      	mov	r0, sl
 8005834:	4659      	mov	r1, fp
 8005836:	f7fa fe8b 	bl	8000550 <__aeabi_dmul>
 800583a:	4652      	mov	r2, sl
 800583c:	465b      	mov	r3, fp
 800583e:	f7fa fe87 	bl	8000550 <__aeabi_dmul>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4606      	mov	r6, r0
 8005848:	460f      	mov	r7, r1
 800584a:	4640      	mov	r0, r8
 800584c:	4649      	mov	r1, r9
 800584e:	f7fa fcc9 	bl	80001e4 <__adddf3>
 8005852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005856:	f7fa fe7b 	bl	8000550 <__aeabi_dmul>
 800585a:	4680      	mov	r8, r0
 800585c:	4689      	mov	r9, r1
 800585e:	b964      	cbnz	r4, 800587a <__ieee754_log+0x272>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4630      	mov	r0, r6
 8005866:	4639      	mov	r1, r7
 8005868:	f7fa fcba 	bl	80001e0 <__aeabi_dsub>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4650      	mov	r0, sl
 8005872:	4659      	mov	r1, fp
 8005874:	f7fa fcb4 	bl	80001e0 <__aeabi_dsub>
 8005878:	e6da      	b.n	8005630 <__ieee754_log+0x28>
 800587a:	a323      	add	r3, pc, #140	@ (adr r3, 8005908 <__ieee754_log+0x300>)
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005884:	f7fa fe64 	bl	8000550 <__aeabi_dmul>
 8005888:	a321      	add	r3, pc, #132	@ (adr r3, 8005910 <__ieee754_log+0x308>)
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	4604      	mov	r4, r0
 8005890:	460d      	mov	r5, r1
 8005892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005896:	f7fa fe5b 	bl	8000550 <__aeabi_dmul>
 800589a:	4642      	mov	r2, r8
 800589c:	464b      	mov	r3, r9
 800589e:	f7fa fca1 	bl	80001e4 <__adddf3>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4630      	mov	r0, r6
 80058a8:	4639      	mov	r1, r7
 80058aa:	f7fa fc99 	bl	80001e0 <__aeabi_dsub>
 80058ae:	4652      	mov	r2, sl
 80058b0:	465b      	mov	r3, fp
 80058b2:	f7fa fc95 	bl	80001e0 <__aeabi_dsub>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4620      	mov	r0, r4
 80058bc:	4629      	mov	r1, r5
 80058be:	e7d9      	b.n	8005874 <__ieee754_log+0x26c>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4650      	mov	r0, sl
 80058c6:	4659      	mov	r1, fp
 80058c8:	f7fa fc8a 	bl	80001e0 <__aeabi_dsub>
 80058cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058d0:	f7fa fe3e 	bl	8000550 <__aeabi_dmul>
 80058d4:	4606      	mov	r6, r0
 80058d6:	460f      	mov	r7, r1
 80058d8:	2c00      	cmp	r4, #0
 80058da:	f43f af25 	beq.w	8005728 <__ieee754_log+0x120>
 80058de:	a30a      	add	r3, pc, #40	@ (adr r3, 8005908 <__ieee754_log+0x300>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058e8:	f7fa fe32 	bl	8000550 <__aeabi_dmul>
 80058ec:	a308      	add	r3, pc, #32	@ (adr r3, 8005910 <__ieee754_log+0x308>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	4604      	mov	r4, r0
 80058f4:	460d      	mov	r5, r1
 80058f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058fa:	e729      	b.n	8005750 <__ieee754_log+0x148>
 80058fc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8005958 <__ieee754_log+0x350>
 8005900:	e698      	b.n	8005634 <__ieee754_log+0x2c>
 8005902:	bf00      	nop
 8005904:	f3af 8000 	nop.w
 8005908:	fee00000 	.word	0xfee00000
 800590c:	3fe62e42 	.word	0x3fe62e42
 8005910:	35793c76 	.word	0x35793c76
 8005914:	3dea39ef 	.word	0x3dea39ef
 8005918:	55555555 	.word	0x55555555
 800591c:	3fd55555 	.word	0x3fd55555
 8005920:	df3e5244 	.word	0xdf3e5244
 8005924:	3fc2f112 	.word	0x3fc2f112
 8005928:	96cb03de 	.word	0x96cb03de
 800592c:	3fc74664 	.word	0x3fc74664
 8005930:	94229359 	.word	0x94229359
 8005934:	3fd24924 	.word	0x3fd24924
 8005938:	55555593 	.word	0x55555593
 800593c:	3fe55555 	.word	0x3fe55555
 8005940:	d078c69f 	.word	0xd078c69f
 8005944:	3fc39a09 	.word	0x3fc39a09
 8005948:	1d8e78af 	.word	0x1d8e78af
 800594c:	3fcc71c5 	.word	0x3fcc71c5
 8005950:	9997fa04 	.word	0x9997fa04
 8005954:	3fd99999 	.word	0x3fd99999
	...
 8005960:	c3500000 	.word	0xc3500000
 8005964:	43500000 	.word	0x43500000
 8005968:	7fefffff 	.word	0x7fefffff
 800596c:	3ff00000 	.word	0x3ff00000
 8005970:	3fe00000 	.word	0x3fe00000
 8005974:	00000000 	.word	0x00000000

08005978 <__ieee754_pow>:
 8005978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	b091      	sub	sp, #68	@ 0x44
 800597e:	ed8d 1b00 	vstr	d1, [sp]
 8005982:	e9dd 1900 	ldrd	r1, r9, [sp]
 8005986:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800598a:	ea5a 0001 	orrs.w	r0, sl, r1
 800598e:	ec57 6b10 	vmov	r6, r7, d0
 8005992:	d113      	bne.n	80059bc <__ieee754_pow+0x44>
 8005994:	19b3      	adds	r3, r6, r6
 8005996:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800599a:	4152      	adcs	r2, r2
 800599c:	4298      	cmp	r0, r3
 800599e:	4b98      	ldr	r3, [pc, #608]	@ (8005c00 <__ieee754_pow+0x288>)
 80059a0:	4193      	sbcs	r3, r2
 80059a2:	f080 84ea 	bcs.w	800637a <__ieee754_pow+0xa02>
 80059a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059aa:	4630      	mov	r0, r6
 80059ac:	4639      	mov	r1, r7
 80059ae:	f7fa fc19 	bl	80001e4 <__adddf3>
 80059b2:	ec41 0b10 	vmov	d0, r0, r1
 80059b6:	b011      	add	sp, #68	@ 0x44
 80059b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059bc:	4a91      	ldr	r2, [pc, #580]	@ (8005c04 <__ieee754_pow+0x28c>)
 80059be:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80059c2:	4590      	cmp	r8, r2
 80059c4:	463d      	mov	r5, r7
 80059c6:	4633      	mov	r3, r6
 80059c8:	d806      	bhi.n	80059d8 <__ieee754_pow+0x60>
 80059ca:	d101      	bne.n	80059d0 <__ieee754_pow+0x58>
 80059cc:	2e00      	cmp	r6, #0
 80059ce:	d1ea      	bne.n	80059a6 <__ieee754_pow+0x2e>
 80059d0:	4592      	cmp	sl, r2
 80059d2:	d801      	bhi.n	80059d8 <__ieee754_pow+0x60>
 80059d4:	d10e      	bne.n	80059f4 <__ieee754_pow+0x7c>
 80059d6:	b169      	cbz	r1, 80059f4 <__ieee754_pow+0x7c>
 80059d8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80059dc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80059e0:	431d      	orrs	r5, r3
 80059e2:	d1e0      	bne.n	80059a6 <__ieee754_pow+0x2e>
 80059e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80059e8:	18db      	adds	r3, r3, r3
 80059ea:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80059ee:	4152      	adcs	r2, r2
 80059f0:	429d      	cmp	r5, r3
 80059f2:	e7d4      	b.n	800599e <__ieee754_pow+0x26>
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	46c3      	mov	fp, r8
 80059f8:	da3a      	bge.n	8005a70 <__ieee754_pow+0xf8>
 80059fa:	4a83      	ldr	r2, [pc, #524]	@ (8005c08 <__ieee754_pow+0x290>)
 80059fc:	4592      	cmp	sl, r2
 80059fe:	d84d      	bhi.n	8005a9c <__ieee754_pow+0x124>
 8005a00:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005a04:	4592      	cmp	sl, r2
 8005a06:	f240 84c7 	bls.w	8006398 <__ieee754_pow+0xa20>
 8005a0a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8005a0e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005a12:	2a14      	cmp	r2, #20
 8005a14:	dd0f      	ble.n	8005a36 <__ieee754_pow+0xbe>
 8005a16:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005a1a:	fa21 f402 	lsr.w	r4, r1, r2
 8005a1e:	fa04 f202 	lsl.w	r2, r4, r2
 8005a22:	428a      	cmp	r2, r1
 8005a24:	f040 84b8 	bne.w	8006398 <__ieee754_pow+0xa20>
 8005a28:	f004 0401 	and.w	r4, r4, #1
 8005a2c:	f1c4 0402 	rsb	r4, r4, #2
 8005a30:	2900      	cmp	r1, #0
 8005a32:	d158      	bne.n	8005ae6 <__ieee754_pow+0x16e>
 8005a34:	e00e      	b.n	8005a54 <__ieee754_pow+0xdc>
 8005a36:	2900      	cmp	r1, #0
 8005a38:	d154      	bne.n	8005ae4 <__ieee754_pow+0x16c>
 8005a3a:	f1c2 0214 	rsb	r2, r2, #20
 8005a3e:	fa4a f402 	asr.w	r4, sl, r2
 8005a42:	fa04 f202 	lsl.w	r2, r4, r2
 8005a46:	4552      	cmp	r2, sl
 8005a48:	f040 84a3 	bne.w	8006392 <__ieee754_pow+0xa1a>
 8005a4c:	f004 0401 	and.w	r4, r4, #1
 8005a50:	f1c4 0402 	rsb	r4, r4, #2
 8005a54:	4a6d      	ldr	r2, [pc, #436]	@ (8005c0c <__ieee754_pow+0x294>)
 8005a56:	4592      	cmp	sl, r2
 8005a58:	d12e      	bne.n	8005ab8 <__ieee754_pow+0x140>
 8005a5a:	f1b9 0f00 	cmp.w	r9, #0
 8005a5e:	f280 8494 	bge.w	800638a <__ieee754_pow+0xa12>
 8005a62:	496a      	ldr	r1, [pc, #424]	@ (8005c0c <__ieee754_pow+0x294>)
 8005a64:	4632      	mov	r2, r6
 8005a66:	463b      	mov	r3, r7
 8005a68:	2000      	movs	r0, #0
 8005a6a:	f7fa fe9b 	bl	80007a4 <__aeabi_ddiv>
 8005a6e:	e7a0      	b.n	80059b2 <__ieee754_pow+0x3a>
 8005a70:	2400      	movs	r4, #0
 8005a72:	bbc1      	cbnz	r1, 8005ae6 <__ieee754_pow+0x16e>
 8005a74:	4a63      	ldr	r2, [pc, #396]	@ (8005c04 <__ieee754_pow+0x28c>)
 8005a76:	4592      	cmp	sl, r2
 8005a78:	d1ec      	bne.n	8005a54 <__ieee754_pow+0xdc>
 8005a7a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8005a7e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005a82:	431a      	orrs	r2, r3
 8005a84:	f000 8479 	beq.w	800637a <__ieee754_pow+0xa02>
 8005a88:	4b61      	ldr	r3, [pc, #388]	@ (8005c10 <__ieee754_pow+0x298>)
 8005a8a:	4598      	cmp	r8, r3
 8005a8c:	d908      	bls.n	8005aa0 <__ieee754_pow+0x128>
 8005a8e:	f1b9 0f00 	cmp.w	r9, #0
 8005a92:	f2c0 8476 	blt.w	8006382 <__ieee754_pow+0xa0a>
 8005a96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a9a:	e78a      	b.n	80059b2 <__ieee754_pow+0x3a>
 8005a9c:	2402      	movs	r4, #2
 8005a9e:	e7e8      	b.n	8005a72 <__ieee754_pow+0xfa>
 8005aa0:	f1b9 0f00 	cmp.w	r9, #0
 8005aa4:	f04f 0000 	mov.w	r0, #0
 8005aa8:	f04f 0100 	mov.w	r1, #0
 8005aac:	da81      	bge.n	80059b2 <__ieee754_pow+0x3a>
 8005aae:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005ab2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005ab6:	e77c      	b.n	80059b2 <__ieee754_pow+0x3a>
 8005ab8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8005abc:	d106      	bne.n	8005acc <__ieee754_pow+0x154>
 8005abe:	4632      	mov	r2, r6
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	f7fa fd43 	bl	8000550 <__aeabi_dmul>
 8005aca:	e772      	b.n	80059b2 <__ieee754_pow+0x3a>
 8005acc:	4a51      	ldr	r2, [pc, #324]	@ (8005c14 <__ieee754_pow+0x29c>)
 8005ace:	4591      	cmp	r9, r2
 8005ad0:	d109      	bne.n	8005ae6 <__ieee754_pow+0x16e>
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	db07      	blt.n	8005ae6 <__ieee754_pow+0x16e>
 8005ad6:	ec47 6b10 	vmov	d0, r6, r7
 8005ada:	b011      	add	sp, #68	@ 0x44
 8005adc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae0:	f000 bd52 	b.w	8006588 <__ieee754_sqrt>
 8005ae4:	2400      	movs	r4, #0
 8005ae6:	ec47 6b10 	vmov	d0, r6, r7
 8005aea:	9302      	str	r3, [sp, #8]
 8005aec:	f000 fc88 	bl	8006400 <fabs>
 8005af0:	9b02      	ldr	r3, [sp, #8]
 8005af2:	ec51 0b10 	vmov	r0, r1, d0
 8005af6:	bb53      	cbnz	r3, 8005b4e <__ieee754_pow+0x1d6>
 8005af8:	4b44      	ldr	r3, [pc, #272]	@ (8005c0c <__ieee754_pow+0x294>)
 8005afa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d002      	beq.n	8005b08 <__ieee754_pow+0x190>
 8005b02:	f1b8 0f00 	cmp.w	r8, #0
 8005b06:	d122      	bne.n	8005b4e <__ieee754_pow+0x1d6>
 8005b08:	f1b9 0f00 	cmp.w	r9, #0
 8005b0c:	da05      	bge.n	8005b1a <__ieee754_pow+0x1a2>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	2000      	movs	r0, #0
 8005b14:	493d      	ldr	r1, [pc, #244]	@ (8005c0c <__ieee754_pow+0x294>)
 8005b16:	f7fa fe45 	bl	80007a4 <__aeabi_ddiv>
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	f6bf af49 	bge.w	80059b2 <__ieee754_pow+0x3a>
 8005b20:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8005b24:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8005b28:	ea58 0804 	orrs.w	r8, r8, r4
 8005b2c:	d108      	bne.n	8005b40 <__ieee754_pow+0x1c8>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4610      	mov	r0, r2
 8005b34:	4619      	mov	r1, r3
 8005b36:	f7fa fb53 	bl	80001e0 <__aeabi_dsub>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	e794      	b.n	8005a6a <__ieee754_pow+0xf2>
 8005b40:	2c01      	cmp	r4, #1
 8005b42:	f47f af36 	bne.w	80059b2 <__ieee754_pow+0x3a>
 8005b46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	e731      	b.n	80059b2 <__ieee754_pow+0x3a>
 8005b4e:	0feb      	lsrs	r3, r5, #31
 8005b50:	3b01      	subs	r3, #1
 8005b52:	ea53 0204 	orrs.w	r2, r3, r4
 8005b56:	d102      	bne.n	8005b5e <__ieee754_pow+0x1e6>
 8005b58:	4632      	mov	r2, r6
 8005b5a:	463b      	mov	r3, r7
 8005b5c:	e7e9      	b.n	8005b32 <__ieee754_pow+0x1ba>
 8005b5e:	3c01      	subs	r4, #1
 8005b60:	431c      	orrs	r4, r3
 8005b62:	d016      	beq.n	8005b92 <__ieee754_pow+0x21a>
 8005b64:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005bf0 <__ieee754_pow+0x278>
 8005b68:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b70:	f240 8112 	bls.w	8005d98 <__ieee754_pow+0x420>
 8005b74:	4b28      	ldr	r3, [pc, #160]	@ (8005c18 <__ieee754_pow+0x2a0>)
 8005b76:	459a      	cmp	sl, r3
 8005b78:	4b25      	ldr	r3, [pc, #148]	@ (8005c10 <__ieee754_pow+0x298>)
 8005b7a:	d916      	bls.n	8005baa <__ieee754_pow+0x232>
 8005b7c:	4598      	cmp	r8, r3
 8005b7e:	d80b      	bhi.n	8005b98 <__ieee754_pow+0x220>
 8005b80:	f1b9 0f00 	cmp.w	r9, #0
 8005b84:	da0b      	bge.n	8005b9e <__ieee754_pow+0x226>
 8005b86:	2000      	movs	r0, #0
 8005b88:	b011      	add	sp, #68	@ 0x44
 8005b8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8e:	f000 bcf3 	b.w	8006578 <__math_oflow>
 8005b92:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8005bf8 <__ieee754_pow+0x280>
 8005b96:	e7e7      	b.n	8005b68 <__ieee754_pow+0x1f0>
 8005b98:	f1b9 0f00 	cmp.w	r9, #0
 8005b9c:	dcf3      	bgt.n	8005b86 <__ieee754_pow+0x20e>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	b011      	add	sp, #68	@ 0x44
 8005ba2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba6:	f000 bcdf 	b.w	8006568 <__math_uflow>
 8005baa:	4598      	cmp	r8, r3
 8005bac:	d20c      	bcs.n	8005bc8 <__ieee754_pow+0x250>
 8005bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f7fa ff3d 	bl	8000a34 <__aeabi_dcmplt>
 8005bba:	3800      	subs	r0, #0
 8005bbc:	bf18      	it	ne
 8005bbe:	2001      	movne	r0, #1
 8005bc0:	f1b9 0f00 	cmp.w	r9, #0
 8005bc4:	daec      	bge.n	8005ba0 <__ieee754_pow+0x228>
 8005bc6:	e7df      	b.n	8005b88 <__ieee754_pow+0x210>
 8005bc8:	4b10      	ldr	r3, [pc, #64]	@ (8005c0c <__ieee754_pow+0x294>)
 8005bca:	4598      	cmp	r8, r3
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	d924      	bls.n	8005c1c <__ieee754_pow+0x2a4>
 8005bd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f7fa ff2c 	bl	8000a34 <__aeabi_dcmplt>
 8005bdc:	3800      	subs	r0, #0
 8005bde:	bf18      	it	ne
 8005be0:	2001      	movne	r0, #1
 8005be2:	f1b9 0f00 	cmp.w	r9, #0
 8005be6:	dccf      	bgt.n	8005b88 <__ieee754_pow+0x210>
 8005be8:	e7da      	b.n	8005ba0 <__ieee754_pow+0x228>
 8005bea:	bf00      	nop
 8005bec:	f3af 8000 	nop.w
 8005bf0:	00000000 	.word	0x00000000
 8005bf4:	3ff00000 	.word	0x3ff00000
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	bff00000 	.word	0xbff00000
 8005c00:	fff00000 	.word	0xfff00000
 8005c04:	7ff00000 	.word	0x7ff00000
 8005c08:	433fffff 	.word	0x433fffff
 8005c0c:	3ff00000 	.word	0x3ff00000
 8005c10:	3fefffff 	.word	0x3fefffff
 8005c14:	3fe00000 	.word	0x3fe00000
 8005c18:	43f00000 	.word	0x43f00000
 8005c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8005d88 <__ieee754_pow+0x410>)
 8005c1e:	f7fa fadf 	bl	80001e0 <__aeabi_dsub>
 8005c22:	a351      	add	r3, pc, #324	@ (adr r3, 8005d68 <__ieee754_pow+0x3f0>)
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	4604      	mov	r4, r0
 8005c2a:	460d      	mov	r5, r1
 8005c2c:	f7fa fc90 	bl	8000550 <__aeabi_dmul>
 8005c30:	a34f      	add	r3, pc, #316	@ (adr r3, 8005d70 <__ieee754_pow+0x3f8>)
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	4606      	mov	r6, r0
 8005c38:	460f      	mov	r7, r1
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	f7fa fc87 	bl	8000550 <__aeabi_dmul>
 8005c42:	4b52      	ldr	r3, [pc, #328]	@ (8005d8c <__ieee754_pow+0x414>)
 8005c44:	4682      	mov	sl, r0
 8005c46:	468b      	mov	fp, r1
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	f7fa fc7f 	bl	8000550 <__aeabi_dmul>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	a148      	add	r1, pc, #288	@ (adr r1, 8005d78 <__ieee754_pow+0x400>)
 8005c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c5c:	f7fa fac0 	bl	80001e0 <__aeabi_dsub>
 8005c60:	4622      	mov	r2, r4
 8005c62:	462b      	mov	r3, r5
 8005c64:	f7fa fc74 	bl	8000550 <__aeabi_dmul>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	4948      	ldr	r1, [pc, #288]	@ (8005d90 <__ieee754_pow+0x418>)
 8005c70:	f7fa fab6 	bl	80001e0 <__aeabi_dsub>
 8005c74:	4622      	mov	r2, r4
 8005c76:	4680      	mov	r8, r0
 8005c78:	4689      	mov	r9, r1
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f7fa fc66 	bl	8000550 <__aeabi_dmul>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4640      	mov	r0, r8
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	f7fa fc60 	bl	8000550 <__aeabi_dmul>
 8005c90:	a33b      	add	r3, pc, #236	@ (adr r3, 8005d80 <__ieee754_pow+0x408>)
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f7fa fc5b 	bl	8000550 <__aeabi_dmul>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4650      	mov	r0, sl
 8005ca0:	4659      	mov	r1, fp
 8005ca2:	f7fa fa9d 	bl	80001e0 <__aeabi_dsub>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4680      	mov	r8, r0
 8005cac:	4689      	mov	r9, r1
 8005cae:	4630      	mov	r0, r6
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	f7fa fa97 	bl	80001e4 <__adddf3>
 8005cb6:	2400      	movs	r4, #0
 8005cb8:	4632      	mov	r2, r6
 8005cba:	463b      	mov	r3, r7
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	f7fa fa8e 	bl	80001e0 <__aeabi_dsub>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4640      	mov	r0, r8
 8005cca:	4649      	mov	r1, r9
 8005ccc:	f7fa fa88 	bl	80001e0 <__aeabi_dsub>
 8005cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9304      	str	r3, [sp, #16]
 8005cdc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	460f      	mov	r7, r1
 8005ce4:	4652      	mov	r2, sl
 8005ce6:	465b      	mov	r3, fp
 8005ce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cec:	f7fa fa78 	bl	80001e0 <__aeabi_dsub>
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	462b      	mov	r3, r5
 8005cf4:	f7fa fc2c 	bl	8000550 <__aeabi_dmul>
 8005cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	4689      	mov	r9, r1
 8005d00:	4630      	mov	r0, r6
 8005d02:	4639      	mov	r1, r7
 8005d04:	f7fa fc24 	bl	8000550 <__aeabi_dmul>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	4649      	mov	r1, r9
 8005d10:	f7fa fa68 	bl	80001e4 <__adddf3>
 8005d14:	4652      	mov	r2, sl
 8005d16:	465b      	mov	r3, fp
 8005d18:	4606      	mov	r6, r0
 8005d1a:	460f      	mov	r7, r1
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	4629      	mov	r1, r5
 8005d20:	f7fa fc16 	bl	8000550 <__aeabi_dmul>
 8005d24:	460b      	mov	r3, r1
 8005d26:	4602      	mov	r2, r0
 8005d28:	4680      	mov	r8, r0
 8005d2a:	4689      	mov	r9, r1
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	4639      	mov	r1, r7
 8005d30:	f7fa fa58 	bl	80001e4 <__adddf3>
 8005d34:	4b17      	ldr	r3, [pc, #92]	@ (8005d94 <__ieee754_pow+0x41c>)
 8005d36:	4299      	cmp	r1, r3
 8005d38:	4604      	mov	r4, r0
 8005d3a:	460d      	mov	r5, r1
 8005d3c:	468a      	mov	sl, r1
 8005d3e:	468b      	mov	fp, r1
 8005d40:	f340 82ef 	ble.w	8006322 <__ieee754_pow+0x9aa>
 8005d44:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005d48:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005d4c:	4303      	orrs	r3, r0
 8005d4e:	f000 81e8 	beq.w	8006122 <__ieee754_pow+0x7aa>
 8005d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d56:	2200      	movs	r2, #0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f7fa fe6b 	bl	8000a34 <__aeabi_dcmplt>
 8005d5e:	3800      	subs	r0, #0
 8005d60:	bf18      	it	ne
 8005d62:	2001      	movne	r0, #1
 8005d64:	e710      	b.n	8005b88 <__ieee754_pow+0x210>
 8005d66:	bf00      	nop
 8005d68:	60000000 	.word	0x60000000
 8005d6c:	3ff71547 	.word	0x3ff71547
 8005d70:	f85ddf44 	.word	0xf85ddf44
 8005d74:	3e54ae0b 	.word	0x3e54ae0b
 8005d78:	55555555 	.word	0x55555555
 8005d7c:	3fd55555 	.word	0x3fd55555
 8005d80:	652b82fe 	.word	0x652b82fe
 8005d84:	3ff71547 	.word	0x3ff71547
 8005d88:	3ff00000 	.word	0x3ff00000
 8005d8c:	3fd00000 	.word	0x3fd00000
 8005d90:	3fe00000 	.word	0x3fe00000
 8005d94:	408fffff 	.word	0x408fffff
 8005d98:	4bd5      	ldr	r3, [pc, #852]	@ (80060f0 <__ieee754_pow+0x778>)
 8005d9a:	402b      	ands	r3, r5
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	b92b      	cbnz	r3, 8005dac <__ieee754_pow+0x434>
 8005da0:	4bd4      	ldr	r3, [pc, #848]	@ (80060f4 <__ieee754_pow+0x77c>)
 8005da2:	f7fa fbd5 	bl	8000550 <__aeabi_dmul>
 8005da6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8005daa:	468b      	mov	fp, r1
 8005dac:	ea4f 532b 	mov.w	r3, fp, asr #20
 8005db0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005db4:	4413      	add	r3, r2
 8005db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005db8:	4bcf      	ldr	r3, [pc, #828]	@ (80060f8 <__ieee754_pow+0x780>)
 8005dba:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8005dbe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8005dc2:	459b      	cmp	fp, r3
 8005dc4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005dc8:	dd08      	ble.n	8005ddc <__ieee754_pow+0x464>
 8005dca:	4bcc      	ldr	r3, [pc, #816]	@ (80060fc <__ieee754_pow+0x784>)
 8005dcc:	459b      	cmp	fp, r3
 8005dce:	f340 81a5 	ble.w	800611c <__ieee754_pow+0x7a4>
 8005dd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dd8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005ddc:	f04f 0a00 	mov.w	sl, #0
 8005de0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005de4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005de6:	4bc6      	ldr	r3, [pc, #792]	@ (8006100 <__ieee754_pow+0x788>)
 8005de8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005dec:	ed93 7b00 	vldr	d7, [r3]
 8005df0:	4629      	mov	r1, r5
 8005df2:	ec53 2b17 	vmov	r2, r3, d7
 8005df6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005dfa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005dfe:	f7fa f9ef 	bl	80001e0 <__aeabi_dsub>
 8005e02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e06:	4606      	mov	r6, r0
 8005e08:	460f      	mov	r7, r1
 8005e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e0e:	f7fa f9e9 	bl	80001e4 <__adddf3>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	2000      	movs	r0, #0
 8005e18:	49ba      	ldr	r1, [pc, #744]	@ (8006104 <__ieee754_pow+0x78c>)
 8005e1a:	f7fa fcc3 	bl	80007a4 <__aeabi_ddiv>
 8005e1e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4630      	mov	r0, r6
 8005e28:	4639      	mov	r1, r7
 8005e2a:	f7fa fb91 	bl	8000550 <__aeabi_dmul>
 8005e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e32:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8005e36:	106d      	asrs	r5, r5, #1
 8005e38:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005e3c:	f04f 0b00 	mov.w	fp, #0
 8005e40:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005e44:	4661      	mov	r1, ip
 8005e46:	2200      	movs	r2, #0
 8005e48:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005e4c:	4658      	mov	r0, fp
 8005e4e:	46e1      	mov	r9, ip
 8005e50:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8005e54:	4614      	mov	r4, r2
 8005e56:	461d      	mov	r5, r3
 8005e58:	f7fa fb7a 	bl	8000550 <__aeabi_dmul>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4630      	mov	r0, r6
 8005e62:	4639      	mov	r1, r7
 8005e64:	f7fa f9bc 	bl	80001e0 <__aeabi_dsub>
 8005e68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	460f      	mov	r7, r1
 8005e70:	4620      	mov	r0, r4
 8005e72:	4629      	mov	r1, r5
 8005e74:	f7fa f9b4 	bl	80001e0 <__aeabi_dsub>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e80:	f7fa f9ae 	bl	80001e0 <__aeabi_dsub>
 8005e84:	465a      	mov	r2, fp
 8005e86:	464b      	mov	r3, r9
 8005e88:	f7fa fb62 	bl	8000550 <__aeabi_dmul>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4630      	mov	r0, r6
 8005e92:	4639      	mov	r1, r7
 8005e94:	f7fa f9a4 	bl	80001e0 <__aeabi_dsub>
 8005e98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e9c:	f7fa fb58 	bl	8000550 <__aeabi_dmul>
 8005ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ea4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	4619      	mov	r1, r3
 8005eac:	f7fa fb50 	bl	8000550 <__aeabi_dmul>
 8005eb0:	a37d      	add	r3, pc, #500	@ (adr r3, 80060a8 <__ieee754_pow+0x730>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	460d      	mov	r5, r1
 8005eba:	f7fa fb49 	bl	8000550 <__aeabi_dmul>
 8005ebe:	a37c      	add	r3, pc, #496	@ (adr r3, 80060b0 <__ieee754_pow+0x738>)
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f7fa f98e 	bl	80001e4 <__adddf3>
 8005ec8:	4622      	mov	r2, r4
 8005eca:	462b      	mov	r3, r5
 8005ecc:	f7fa fb40 	bl	8000550 <__aeabi_dmul>
 8005ed0:	a379      	add	r3, pc, #484	@ (adr r3, 80060b8 <__ieee754_pow+0x740>)
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f7fa f985 	bl	80001e4 <__adddf3>
 8005eda:	4622      	mov	r2, r4
 8005edc:	462b      	mov	r3, r5
 8005ede:	f7fa fb37 	bl	8000550 <__aeabi_dmul>
 8005ee2:	a377      	add	r3, pc, #476	@ (adr r3, 80060c0 <__ieee754_pow+0x748>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f7fa f97c 	bl	80001e4 <__adddf3>
 8005eec:	4622      	mov	r2, r4
 8005eee:	462b      	mov	r3, r5
 8005ef0:	f7fa fb2e 	bl	8000550 <__aeabi_dmul>
 8005ef4:	a374      	add	r3, pc, #464	@ (adr r3, 80060c8 <__ieee754_pow+0x750>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f7fa f973 	bl	80001e4 <__adddf3>
 8005efe:	4622      	mov	r2, r4
 8005f00:	462b      	mov	r3, r5
 8005f02:	f7fa fb25 	bl	8000550 <__aeabi_dmul>
 8005f06:	a372      	add	r3, pc, #456	@ (adr r3, 80060d0 <__ieee754_pow+0x758>)
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f7fa f96a 	bl	80001e4 <__adddf3>
 8005f10:	4622      	mov	r2, r4
 8005f12:	4606      	mov	r6, r0
 8005f14:	460f      	mov	r7, r1
 8005f16:	462b      	mov	r3, r5
 8005f18:	4620      	mov	r0, r4
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	f7fa fb18 	bl	8000550 <__aeabi_dmul>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4630      	mov	r0, r6
 8005f26:	4639      	mov	r1, r7
 8005f28:	f7fa fb12 	bl	8000550 <__aeabi_dmul>
 8005f2c:	465a      	mov	r2, fp
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	464b      	mov	r3, r9
 8005f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f38:	f7fa f954 	bl	80001e4 <__adddf3>
 8005f3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f40:	f7fa fb06 	bl	8000550 <__aeabi_dmul>
 8005f44:	4622      	mov	r2, r4
 8005f46:	462b      	mov	r3, r5
 8005f48:	f7fa f94c 	bl	80001e4 <__adddf3>
 8005f4c:	465a      	mov	r2, fp
 8005f4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f52:	464b      	mov	r3, r9
 8005f54:	4658      	mov	r0, fp
 8005f56:	4649      	mov	r1, r9
 8005f58:	f7fa fafa 	bl	8000550 <__aeabi_dmul>
 8005f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8006108 <__ieee754_pow+0x790>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	4606      	mov	r6, r0
 8005f62:	460f      	mov	r7, r1
 8005f64:	f7fa f93e 	bl	80001e4 <__adddf3>
 8005f68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f6c:	f7fa f93a 	bl	80001e4 <__adddf3>
 8005f70:	46d8      	mov	r8, fp
 8005f72:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8005f76:	460d      	mov	r5, r1
 8005f78:	465a      	mov	r2, fp
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	4649      	mov	r1, r9
 8005f80:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8005f84:	f7fa fae4 	bl	8000550 <__aeabi_dmul>
 8005f88:	465c      	mov	r4, fp
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	4689      	mov	r9, r1
 8005f8e:	4b5e      	ldr	r3, [pc, #376]	@ (8006108 <__ieee754_pow+0x790>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	4620      	mov	r0, r4
 8005f94:	4629      	mov	r1, r5
 8005f96:	f7fa f923 	bl	80001e0 <__aeabi_dsub>
 8005f9a:	4632      	mov	r2, r6
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	f7fa f91f 	bl	80001e0 <__aeabi_dsub>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005faa:	f7fa f919 	bl	80001e0 <__aeabi_dsub>
 8005fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fb2:	f7fa facd 	bl	8000550 <__aeabi_dmul>
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4606      	mov	r6, r0
 8005fba:	460f      	mov	r7, r1
 8005fbc:	462b      	mov	r3, r5
 8005fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fc2:	f7fa fac5 	bl	8000550 <__aeabi_dmul>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4630      	mov	r0, r6
 8005fcc:	4639      	mov	r1, r7
 8005fce:	f7fa f909 	bl	80001e4 <__adddf3>
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	460f      	mov	r7, r1
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4640      	mov	r0, r8
 8005fdc:	4649      	mov	r1, r9
 8005fde:	f7fa f901 	bl	80001e4 <__adddf3>
 8005fe2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8005fe6:	a33c      	add	r3, pc, #240	@ (adr r3, 80060d8 <__ieee754_pow+0x760>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	4658      	mov	r0, fp
 8005fee:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	f7fa faac 	bl	8000550 <__aeabi_dmul>
 8005ff8:	465c      	mov	r4, fp
 8005ffa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ffe:	4642      	mov	r2, r8
 8006000:	464b      	mov	r3, r9
 8006002:	4620      	mov	r0, r4
 8006004:	4629      	mov	r1, r5
 8006006:	f7fa f8eb 	bl	80001e0 <__aeabi_dsub>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4630      	mov	r0, r6
 8006010:	4639      	mov	r1, r7
 8006012:	f7fa f8e5 	bl	80001e0 <__aeabi_dsub>
 8006016:	a332      	add	r3, pc, #200	@ (adr r3, 80060e0 <__ieee754_pow+0x768>)
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f7fa fa98 	bl	8000550 <__aeabi_dmul>
 8006020:	a331      	add	r3, pc, #196	@ (adr r3, 80060e8 <__ieee754_pow+0x770>)
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	4606      	mov	r6, r0
 8006028:	460f      	mov	r7, r1
 800602a:	4620      	mov	r0, r4
 800602c:	4629      	mov	r1, r5
 800602e:	f7fa fa8f 	bl	8000550 <__aeabi_dmul>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4630      	mov	r0, r6
 8006038:	4639      	mov	r1, r7
 800603a:	f7fa f8d3 	bl	80001e4 <__adddf3>
 800603e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006040:	4b32      	ldr	r3, [pc, #200]	@ (800610c <__ieee754_pow+0x794>)
 8006042:	4413      	add	r3, r2
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa f8cc 	bl	80001e4 <__adddf3>
 800604c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006050:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006052:	f7fa fa13 	bl	800047c <__aeabi_i2d>
 8006056:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006058:	4b2d      	ldr	r3, [pc, #180]	@ (8006110 <__ieee754_pow+0x798>)
 800605a:	4413      	add	r3, r2
 800605c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006060:	4606      	mov	r6, r0
 8006062:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006066:	460f      	mov	r7, r1
 8006068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800606c:	f7fa f8ba 	bl	80001e4 <__adddf3>
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	f7fa f8b6 	bl	80001e4 <__adddf3>
 8006078:	4632      	mov	r2, r6
 800607a:	463b      	mov	r3, r7
 800607c:	f7fa f8b2 	bl	80001e4 <__adddf3>
 8006080:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8006084:	4632      	mov	r2, r6
 8006086:	463b      	mov	r3, r7
 8006088:	4658      	mov	r0, fp
 800608a:	460d      	mov	r5, r1
 800608c:	f7fa f8a8 	bl	80001e0 <__aeabi_dsub>
 8006090:	4642      	mov	r2, r8
 8006092:	464b      	mov	r3, r9
 8006094:	f7fa f8a4 	bl	80001e0 <__aeabi_dsub>
 8006098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800609c:	f7fa f8a0 	bl	80001e0 <__aeabi_dsub>
 80060a0:	465c      	mov	r4, fp
 80060a2:	4602      	mov	r2, r0
 80060a4:	e036      	b.n	8006114 <__ieee754_pow+0x79c>
 80060a6:	bf00      	nop
 80060a8:	4a454eef 	.word	0x4a454eef
 80060ac:	3fca7e28 	.word	0x3fca7e28
 80060b0:	93c9db65 	.word	0x93c9db65
 80060b4:	3fcd864a 	.word	0x3fcd864a
 80060b8:	a91d4101 	.word	0xa91d4101
 80060bc:	3fd17460 	.word	0x3fd17460
 80060c0:	518f264d 	.word	0x518f264d
 80060c4:	3fd55555 	.word	0x3fd55555
 80060c8:	db6fabff 	.word	0xdb6fabff
 80060cc:	3fdb6db6 	.word	0x3fdb6db6
 80060d0:	33333303 	.word	0x33333303
 80060d4:	3fe33333 	.word	0x3fe33333
 80060d8:	e0000000 	.word	0xe0000000
 80060dc:	3feec709 	.word	0x3feec709
 80060e0:	dc3a03fd 	.word	0xdc3a03fd
 80060e4:	3feec709 	.word	0x3feec709
 80060e8:	145b01f5 	.word	0x145b01f5
 80060ec:	be3e2fe0 	.word	0xbe3e2fe0
 80060f0:	7ff00000 	.word	0x7ff00000
 80060f4:	43400000 	.word	0x43400000
 80060f8:	0003988e 	.word	0x0003988e
 80060fc:	000bb679 	.word	0x000bb679
 8006100:	080069d0 	.word	0x080069d0
 8006104:	3ff00000 	.word	0x3ff00000
 8006108:	40080000 	.word	0x40080000
 800610c:	080069b0 	.word	0x080069b0
 8006110:	080069c0 	.word	0x080069c0
 8006114:	460b      	mov	r3, r1
 8006116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800611a:	e5d7      	b.n	8005ccc <__ieee754_pow+0x354>
 800611c:	f04f 0a01 	mov.w	sl, #1
 8006120:	e65e      	b.n	8005de0 <__ieee754_pow+0x468>
 8006122:	a3b4      	add	r3, pc, #720	@ (adr r3, 80063f4 <__ieee754_pow+0xa7c>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	4630      	mov	r0, r6
 800612a:	4639      	mov	r1, r7
 800612c:	f7fa f85a 	bl	80001e4 <__adddf3>
 8006130:	4642      	mov	r2, r8
 8006132:	e9cd 0100 	strd	r0, r1, [sp]
 8006136:	464b      	mov	r3, r9
 8006138:	4620      	mov	r0, r4
 800613a:	4629      	mov	r1, r5
 800613c:	f7fa f850 	bl	80001e0 <__aeabi_dsub>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006148:	f7fa fc92 	bl	8000a70 <__aeabi_dcmpgt>
 800614c:	2800      	cmp	r0, #0
 800614e:	f47f ae00 	bne.w	8005d52 <__ieee754_pow+0x3da>
 8006152:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006156:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800615a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800615e:	fa43 fa0a 	asr.w	sl, r3, sl
 8006162:	44da      	add	sl, fp
 8006164:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006168:	489d      	ldr	r0, [pc, #628]	@ (80063e0 <__ieee754_pow+0xa68>)
 800616a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800616e:	4108      	asrs	r0, r1
 8006170:	ea00 030a 	and.w	r3, r0, sl
 8006174:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006178:	f1c1 0114 	rsb	r1, r1, #20
 800617c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006180:	fa4a fa01 	asr.w	sl, sl, r1
 8006184:	f1bb 0f00 	cmp.w	fp, #0
 8006188:	4640      	mov	r0, r8
 800618a:	4649      	mov	r1, r9
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	bfb8      	it	lt
 8006192:	f1ca 0a00 	rsblt	sl, sl, #0
 8006196:	f7fa f823 	bl	80001e0 <__aeabi_dsub>
 800619a:	4680      	mov	r8, r0
 800619c:	4689      	mov	r9, r1
 800619e:	4632      	mov	r2, r6
 80061a0:	463b      	mov	r3, r7
 80061a2:	4640      	mov	r0, r8
 80061a4:	4649      	mov	r1, r9
 80061a6:	f7fa f81d 	bl	80001e4 <__adddf3>
 80061aa:	2400      	movs	r4, #0
 80061ac:	a37c      	add	r3, pc, #496	@ (adr r3, 80063a0 <__ieee754_pow+0xa28>)
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	4620      	mov	r0, r4
 80061b4:	460d      	mov	r5, r1
 80061b6:	f7fa f9cb 	bl	8000550 <__aeabi_dmul>
 80061ba:	4642      	mov	r2, r8
 80061bc:	e9cd 0100 	strd	r0, r1, [sp]
 80061c0:	464b      	mov	r3, r9
 80061c2:	4620      	mov	r0, r4
 80061c4:	4629      	mov	r1, r5
 80061c6:	f7fa f80b 	bl	80001e0 <__aeabi_dsub>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4630      	mov	r0, r6
 80061d0:	4639      	mov	r1, r7
 80061d2:	f7fa f805 	bl	80001e0 <__aeabi_dsub>
 80061d6:	a374      	add	r3, pc, #464	@ (adr r3, 80063a8 <__ieee754_pow+0xa30>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f7fa f9b8 	bl	8000550 <__aeabi_dmul>
 80061e0:	a373      	add	r3, pc, #460	@ (adr r3, 80063b0 <__ieee754_pow+0xa38>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	4680      	mov	r8, r0
 80061e8:	4689      	mov	r9, r1
 80061ea:	4620      	mov	r0, r4
 80061ec:	4629      	mov	r1, r5
 80061ee:	f7fa f9af 	bl	8000550 <__aeabi_dmul>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4640      	mov	r0, r8
 80061f8:	4649      	mov	r1, r9
 80061fa:	f7f9 fff3 	bl	80001e4 <__adddf3>
 80061fe:	4604      	mov	r4, r0
 8006200:	460d      	mov	r5, r1
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	e9dd 0100 	ldrd	r0, r1, [sp]
 800620a:	f7f9 ffeb 	bl	80001e4 <__adddf3>
 800620e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006212:	4680      	mov	r8, r0
 8006214:	4689      	mov	r9, r1
 8006216:	f7f9 ffe3 	bl	80001e0 <__aeabi_dsub>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7f9 ffdd 	bl	80001e0 <__aeabi_dsub>
 8006226:	4642      	mov	r2, r8
 8006228:	4606      	mov	r6, r0
 800622a:	460f      	mov	r7, r1
 800622c:	464b      	mov	r3, r9
 800622e:	4640      	mov	r0, r8
 8006230:	4649      	mov	r1, r9
 8006232:	f7fa f98d 	bl	8000550 <__aeabi_dmul>
 8006236:	a360      	add	r3, pc, #384	@ (adr r3, 80063b8 <__ieee754_pow+0xa40>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	4604      	mov	r4, r0
 800623e:	460d      	mov	r5, r1
 8006240:	f7fa f986 	bl	8000550 <__aeabi_dmul>
 8006244:	a35e      	add	r3, pc, #376	@ (adr r3, 80063c0 <__ieee754_pow+0xa48>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7f9 ffc9 	bl	80001e0 <__aeabi_dsub>
 800624e:	4622      	mov	r2, r4
 8006250:	462b      	mov	r3, r5
 8006252:	f7fa f97d 	bl	8000550 <__aeabi_dmul>
 8006256:	a35c      	add	r3, pc, #368	@ (adr r3, 80063c8 <__ieee754_pow+0xa50>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7f9 ffc2 	bl	80001e4 <__adddf3>
 8006260:	4622      	mov	r2, r4
 8006262:	462b      	mov	r3, r5
 8006264:	f7fa f974 	bl	8000550 <__aeabi_dmul>
 8006268:	a359      	add	r3, pc, #356	@ (adr r3, 80063d0 <__ieee754_pow+0xa58>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7f9 ffb7 	bl	80001e0 <__aeabi_dsub>
 8006272:	4622      	mov	r2, r4
 8006274:	462b      	mov	r3, r5
 8006276:	f7fa f96b 	bl	8000550 <__aeabi_dmul>
 800627a:	a357      	add	r3, pc, #348	@ (adr r3, 80063d8 <__ieee754_pow+0xa60>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f7f9 ffb0 	bl	80001e4 <__adddf3>
 8006284:	4622      	mov	r2, r4
 8006286:	462b      	mov	r3, r5
 8006288:	f7fa f962 	bl	8000550 <__aeabi_dmul>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4640      	mov	r0, r8
 8006292:	4649      	mov	r1, r9
 8006294:	f7f9 ffa4 	bl	80001e0 <__aeabi_dsub>
 8006298:	4604      	mov	r4, r0
 800629a:	460d      	mov	r5, r1
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7fa f954 	bl	8000550 <__aeabi_dmul>
 80062a8:	2200      	movs	r2, #0
 80062aa:	e9cd 0100 	strd	r0, r1, [sp]
 80062ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80062b2:	4620      	mov	r0, r4
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7f9 ff93 	bl	80001e0 <__aeabi_dsub>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062c2:	f7fa fa6f 	bl	80007a4 <__aeabi_ddiv>
 80062c6:	4632      	mov	r2, r6
 80062c8:	4604      	mov	r4, r0
 80062ca:	460d      	mov	r5, r1
 80062cc:	463b      	mov	r3, r7
 80062ce:	4640      	mov	r0, r8
 80062d0:	4649      	mov	r1, r9
 80062d2:	f7fa f93d 	bl	8000550 <__aeabi_dmul>
 80062d6:	4632      	mov	r2, r6
 80062d8:	463b      	mov	r3, r7
 80062da:	f7f9 ff83 	bl	80001e4 <__adddf3>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4620      	mov	r0, r4
 80062e4:	4629      	mov	r1, r5
 80062e6:	f7f9 ff7b 	bl	80001e0 <__aeabi_dsub>
 80062ea:	4642      	mov	r2, r8
 80062ec:	464b      	mov	r3, r9
 80062ee:	f7f9 ff77 	bl	80001e0 <__aeabi_dsub>
 80062f2:	460b      	mov	r3, r1
 80062f4:	4602      	mov	r2, r0
 80062f6:	493b      	ldr	r1, [pc, #236]	@ (80063e4 <__ieee754_pow+0xa6c>)
 80062f8:	2000      	movs	r0, #0
 80062fa:	f7f9 ff71 	bl	80001e0 <__aeabi_dsub>
 80062fe:	ec41 0b10 	vmov	d0, r0, r1
 8006302:	ee10 3a90 	vmov	r3, s1
 8006306:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800630a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800630e:	da30      	bge.n	8006372 <__ieee754_pow+0x9fa>
 8006310:	4650      	mov	r0, sl
 8006312:	f000 f87d 	bl	8006410 <scalbn>
 8006316:	ec51 0b10 	vmov	r0, r1, d0
 800631a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800631e:	f7ff bbd2 	b.w	8005ac6 <__ieee754_pow+0x14e>
 8006322:	4c31      	ldr	r4, [pc, #196]	@ (80063e8 <__ieee754_pow+0xa70>)
 8006324:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006328:	42a3      	cmp	r3, r4
 800632a:	d91a      	bls.n	8006362 <__ieee754_pow+0x9ea>
 800632c:	4b2f      	ldr	r3, [pc, #188]	@ (80063ec <__ieee754_pow+0xa74>)
 800632e:	440b      	add	r3, r1
 8006330:	4303      	orrs	r3, r0
 8006332:	d009      	beq.n	8006348 <__ieee754_pow+0x9d0>
 8006334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006338:	2200      	movs	r2, #0
 800633a:	2300      	movs	r3, #0
 800633c:	f7fa fb7a 	bl	8000a34 <__aeabi_dcmplt>
 8006340:	3800      	subs	r0, #0
 8006342:	bf18      	it	ne
 8006344:	2001      	movne	r0, #1
 8006346:	e42b      	b.n	8005ba0 <__ieee754_pow+0x228>
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	f7f9 ff48 	bl	80001e0 <__aeabi_dsub>
 8006350:	4632      	mov	r2, r6
 8006352:	463b      	mov	r3, r7
 8006354:	f7fa fb82 	bl	8000a5c <__aeabi_dcmpge>
 8006358:	2800      	cmp	r0, #0
 800635a:	d1eb      	bne.n	8006334 <__ieee754_pow+0x9bc>
 800635c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80063fc <__ieee754_pow+0xa84>
 8006360:	e6f7      	b.n	8006152 <__ieee754_pow+0x7da>
 8006362:	469a      	mov	sl, r3
 8006364:	4b22      	ldr	r3, [pc, #136]	@ (80063f0 <__ieee754_pow+0xa78>)
 8006366:	459a      	cmp	sl, r3
 8006368:	f63f aef3 	bhi.w	8006152 <__ieee754_pow+0x7da>
 800636c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006370:	e715      	b.n	800619e <__ieee754_pow+0x826>
 8006372:	ec51 0b10 	vmov	r0, r1, d0
 8006376:	4619      	mov	r1, r3
 8006378:	e7cf      	b.n	800631a <__ieee754_pow+0x9a2>
 800637a:	491a      	ldr	r1, [pc, #104]	@ (80063e4 <__ieee754_pow+0xa6c>)
 800637c:	2000      	movs	r0, #0
 800637e:	f7ff bb18 	b.w	80059b2 <__ieee754_pow+0x3a>
 8006382:	2000      	movs	r0, #0
 8006384:	2100      	movs	r1, #0
 8006386:	f7ff bb14 	b.w	80059b2 <__ieee754_pow+0x3a>
 800638a:	4630      	mov	r0, r6
 800638c:	4639      	mov	r1, r7
 800638e:	f7ff bb10 	b.w	80059b2 <__ieee754_pow+0x3a>
 8006392:	460c      	mov	r4, r1
 8006394:	f7ff bb5e 	b.w	8005a54 <__ieee754_pow+0xdc>
 8006398:	2400      	movs	r4, #0
 800639a:	f7ff bb49 	b.w	8005a30 <__ieee754_pow+0xb8>
 800639e:	bf00      	nop
 80063a0:	00000000 	.word	0x00000000
 80063a4:	3fe62e43 	.word	0x3fe62e43
 80063a8:	fefa39ef 	.word	0xfefa39ef
 80063ac:	3fe62e42 	.word	0x3fe62e42
 80063b0:	0ca86c39 	.word	0x0ca86c39
 80063b4:	be205c61 	.word	0xbe205c61
 80063b8:	72bea4d0 	.word	0x72bea4d0
 80063bc:	3e663769 	.word	0x3e663769
 80063c0:	c5d26bf1 	.word	0xc5d26bf1
 80063c4:	3ebbbd41 	.word	0x3ebbbd41
 80063c8:	af25de2c 	.word	0xaf25de2c
 80063cc:	3f11566a 	.word	0x3f11566a
 80063d0:	16bebd93 	.word	0x16bebd93
 80063d4:	3f66c16c 	.word	0x3f66c16c
 80063d8:	5555553e 	.word	0x5555553e
 80063dc:	3fc55555 	.word	0x3fc55555
 80063e0:	fff00000 	.word	0xfff00000
 80063e4:	3ff00000 	.word	0x3ff00000
 80063e8:	4090cbff 	.word	0x4090cbff
 80063ec:	3f6f3400 	.word	0x3f6f3400
 80063f0:	3fe00000 	.word	0x3fe00000
 80063f4:	652b82fe 	.word	0x652b82fe
 80063f8:	3c971547 	.word	0x3c971547
 80063fc:	4090cc00 	.word	0x4090cc00

08006400 <fabs>:
 8006400:	ec51 0b10 	vmov	r0, r1, d0
 8006404:	4602      	mov	r2, r0
 8006406:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800640a:	ec43 2b10 	vmov	d0, r2, r3
 800640e:	4770      	bx	lr

08006410 <scalbn>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	ec55 4b10 	vmov	r4, r5, d0
 8006416:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800641a:	4606      	mov	r6, r0
 800641c:	462b      	mov	r3, r5
 800641e:	b991      	cbnz	r1, 8006446 <scalbn+0x36>
 8006420:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006424:	4323      	orrs	r3, r4
 8006426:	d03d      	beq.n	80064a4 <scalbn+0x94>
 8006428:	4b35      	ldr	r3, [pc, #212]	@ (8006500 <scalbn+0xf0>)
 800642a:	4620      	mov	r0, r4
 800642c:	4629      	mov	r1, r5
 800642e:	2200      	movs	r2, #0
 8006430:	f7fa f88e 	bl	8000550 <__aeabi_dmul>
 8006434:	4b33      	ldr	r3, [pc, #204]	@ (8006504 <scalbn+0xf4>)
 8006436:	429e      	cmp	r6, r3
 8006438:	4604      	mov	r4, r0
 800643a:	460d      	mov	r5, r1
 800643c:	da0f      	bge.n	800645e <scalbn+0x4e>
 800643e:	a328      	add	r3, pc, #160	@ (adr r3, 80064e0 <scalbn+0xd0>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	e01e      	b.n	8006484 <scalbn+0x74>
 8006446:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800644a:	4291      	cmp	r1, r2
 800644c:	d10b      	bne.n	8006466 <scalbn+0x56>
 800644e:	4622      	mov	r2, r4
 8006450:	4620      	mov	r0, r4
 8006452:	4629      	mov	r1, r5
 8006454:	f7f9 fec6 	bl	80001e4 <__adddf3>
 8006458:	4604      	mov	r4, r0
 800645a:	460d      	mov	r5, r1
 800645c:	e022      	b.n	80064a4 <scalbn+0x94>
 800645e:	460b      	mov	r3, r1
 8006460:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006464:	3936      	subs	r1, #54	@ 0x36
 8006466:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800646a:	4296      	cmp	r6, r2
 800646c:	dd0d      	ble.n	800648a <scalbn+0x7a>
 800646e:	2d00      	cmp	r5, #0
 8006470:	a11d      	add	r1, pc, #116	@ (adr r1, 80064e8 <scalbn+0xd8>)
 8006472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006476:	da02      	bge.n	800647e <scalbn+0x6e>
 8006478:	a11d      	add	r1, pc, #116	@ (adr r1, 80064f0 <scalbn+0xe0>)
 800647a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800647e:	a31a      	add	r3, pc, #104	@ (adr r3, 80064e8 <scalbn+0xd8>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f7fa f864 	bl	8000550 <__aeabi_dmul>
 8006488:	e7e6      	b.n	8006458 <scalbn+0x48>
 800648a:	1872      	adds	r2, r6, r1
 800648c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006490:	428a      	cmp	r2, r1
 8006492:	dcec      	bgt.n	800646e <scalbn+0x5e>
 8006494:	2a00      	cmp	r2, #0
 8006496:	dd08      	ble.n	80064aa <scalbn+0x9a>
 8006498:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800649c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80064a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80064a4:	ec45 4b10 	vmov	d0, r4, r5
 80064a8:	bd70      	pop	{r4, r5, r6, pc}
 80064aa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80064ae:	da08      	bge.n	80064c2 <scalbn+0xb2>
 80064b0:	2d00      	cmp	r5, #0
 80064b2:	a10b      	add	r1, pc, #44	@ (adr r1, 80064e0 <scalbn+0xd0>)
 80064b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064b8:	dac1      	bge.n	800643e <scalbn+0x2e>
 80064ba:	a10f      	add	r1, pc, #60	@ (adr r1, 80064f8 <scalbn+0xe8>)
 80064bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064c0:	e7bd      	b.n	800643e <scalbn+0x2e>
 80064c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80064c6:	3236      	adds	r2, #54	@ 0x36
 80064c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80064cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80064d0:	4620      	mov	r0, r4
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <scalbn+0xf8>)
 80064d4:	4629      	mov	r1, r5
 80064d6:	2200      	movs	r2, #0
 80064d8:	e7d4      	b.n	8006484 <scalbn+0x74>
 80064da:	bf00      	nop
 80064dc:	f3af 8000 	nop.w
 80064e0:	c2f8f359 	.word	0xc2f8f359
 80064e4:	01a56e1f 	.word	0x01a56e1f
 80064e8:	8800759c 	.word	0x8800759c
 80064ec:	7e37e43c 	.word	0x7e37e43c
 80064f0:	8800759c 	.word	0x8800759c
 80064f4:	fe37e43c 	.word	0xfe37e43c
 80064f8:	c2f8f359 	.word	0xc2f8f359
 80064fc:	81a56e1f 	.word	0x81a56e1f
 8006500:	43500000 	.word	0x43500000
 8006504:	ffff3cb0 	.word	0xffff3cb0
 8006508:	3c900000 	.word	0x3c900000

0800650c <with_errno>:
 800650c:	b510      	push	{r4, lr}
 800650e:	ed2d 8b02 	vpush	{d8}
 8006512:	eeb0 8a40 	vmov.f32	s16, s0
 8006516:	eef0 8a60 	vmov.f32	s17, s1
 800651a:	4604      	mov	r4, r0
 800651c:	f7fe ff84 	bl	8005428 <__errno>
 8006520:	eeb0 0a48 	vmov.f32	s0, s16
 8006524:	eef0 0a68 	vmov.f32	s1, s17
 8006528:	ecbd 8b02 	vpop	{d8}
 800652c:	6004      	str	r4, [r0, #0]
 800652e:	bd10      	pop	{r4, pc}

08006530 <xflow>:
 8006530:	4603      	mov	r3, r0
 8006532:	b507      	push	{r0, r1, r2, lr}
 8006534:	ec51 0b10 	vmov	r0, r1, d0
 8006538:	b183      	cbz	r3, 800655c <xflow+0x2c>
 800653a:	4602      	mov	r2, r0
 800653c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006540:	e9cd 2300 	strd	r2, r3, [sp]
 8006544:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006548:	f7fa f802 	bl	8000550 <__aeabi_dmul>
 800654c:	ec41 0b10 	vmov	d0, r0, r1
 8006550:	2022      	movs	r0, #34	@ 0x22
 8006552:	b003      	add	sp, #12
 8006554:	f85d eb04 	ldr.w	lr, [sp], #4
 8006558:	f7ff bfd8 	b.w	800650c <with_errno>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	e7ee      	b.n	8006540 <xflow+0x10>
 8006562:	0000      	movs	r0, r0
 8006564:	0000      	movs	r0, r0
	...

08006568 <__math_uflow>:
 8006568:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006570 <__math_uflow+0x8>
 800656c:	f7ff bfe0 	b.w	8006530 <xflow>
 8006570:	00000000 	.word	0x00000000
 8006574:	10000000 	.word	0x10000000

08006578 <__math_oflow>:
 8006578:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006580 <__math_oflow+0x8>
 800657c:	f7ff bfd8 	b.w	8006530 <xflow>
 8006580:	00000000 	.word	0x00000000
 8006584:	70000000 	.word	0x70000000

08006588 <__ieee754_sqrt>:
 8006588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	4a68      	ldr	r2, [pc, #416]	@ (8006730 <__ieee754_sqrt+0x1a8>)
 800658e:	ec55 4b10 	vmov	r4, r5, d0
 8006592:	43aa      	bics	r2, r5
 8006594:	462b      	mov	r3, r5
 8006596:	4621      	mov	r1, r4
 8006598:	d110      	bne.n	80065bc <__ieee754_sqrt+0x34>
 800659a:	4622      	mov	r2, r4
 800659c:	4620      	mov	r0, r4
 800659e:	4629      	mov	r1, r5
 80065a0:	f7f9 ffd6 	bl	8000550 <__aeabi_dmul>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4620      	mov	r0, r4
 80065aa:	4629      	mov	r1, r5
 80065ac:	f7f9 fe1a 	bl	80001e4 <__adddf3>
 80065b0:	4604      	mov	r4, r0
 80065b2:	460d      	mov	r5, r1
 80065b4:	ec45 4b10 	vmov	d0, r4, r5
 80065b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065bc:	2d00      	cmp	r5, #0
 80065be:	dc0e      	bgt.n	80065de <__ieee754_sqrt+0x56>
 80065c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80065c4:	4322      	orrs	r2, r4
 80065c6:	d0f5      	beq.n	80065b4 <__ieee754_sqrt+0x2c>
 80065c8:	b19d      	cbz	r5, 80065f2 <__ieee754_sqrt+0x6a>
 80065ca:	4622      	mov	r2, r4
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7f9 fe06 	bl	80001e0 <__aeabi_dsub>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	f7fa f8e4 	bl	80007a4 <__aeabi_ddiv>
 80065dc:	e7e8      	b.n	80065b0 <__ieee754_sqrt+0x28>
 80065de:	152a      	asrs	r2, r5, #20
 80065e0:	d115      	bne.n	800660e <__ieee754_sqrt+0x86>
 80065e2:	2000      	movs	r0, #0
 80065e4:	e009      	b.n	80065fa <__ieee754_sqrt+0x72>
 80065e6:	0acb      	lsrs	r3, r1, #11
 80065e8:	3a15      	subs	r2, #21
 80065ea:	0549      	lsls	r1, r1, #21
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0fa      	beq.n	80065e6 <__ieee754_sqrt+0x5e>
 80065f0:	e7f7      	b.n	80065e2 <__ieee754_sqrt+0x5a>
 80065f2:	462a      	mov	r2, r5
 80065f4:	e7fa      	b.n	80065ec <__ieee754_sqrt+0x64>
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	3001      	adds	r0, #1
 80065fa:	02dc      	lsls	r4, r3, #11
 80065fc:	d5fb      	bpl.n	80065f6 <__ieee754_sqrt+0x6e>
 80065fe:	1e44      	subs	r4, r0, #1
 8006600:	1b12      	subs	r2, r2, r4
 8006602:	f1c0 0420 	rsb	r4, r0, #32
 8006606:	fa21 f404 	lsr.w	r4, r1, r4
 800660a:	4323      	orrs	r3, r4
 800660c:	4081      	lsls	r1, r0
 800660e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006612:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800661a:	07d2      	lsls	r2, r2, #31
 800661c:	bf5c      	itt	pl
 800661e:	005b      	lslpl	r3, r3, #1
 8006620:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006624:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006628:	bf58      	it	pl
 800662a:	0049      	lslpl	r1, r1, #1
 800662c:	2600      	movs	r6, #0
 800662e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006632:	106d      	asrs	r5, r5, #1
 8006634:	0049      	lsls	r1, r1, #1
 8006636:	2016      	movs	r0, #22
 8006638:	4632      	mov	r2, r6
 800663a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800663e:	1917      	adds	r7, r2, r4
 8006640:	429f      	cmp	r7, r3
 8006642:	bfde      	ittt	le
 8006644:	193a      	addle	r2, r7, r4
 8006646:	1bdb      	suble	r3, r3, r7
 8006648:	1936      	addle	r6, r6, r4
 800664a:	0fcf      	lsrs	r7, r1, #31
 800664c:	3801      	subs	r0, #1
 800664e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006652:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006656:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800665a:	d1f0      	bne.n	800663e <__ieee754_sqrt+0xb6>
 800665c:	4604      	mov	r4, r0
 800665e:	2720      	movs	r7, #32
 8006660:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006664:	429a      	cmp	r2, r3
 8006666:	eb00 0e0c 	add.w	lr, r0, ip
 800666a:	db02      	blt.n	8006672 <__ieee754_sqrt+0xea>
 800666c:	d113      	bne.n	8006696 <__ieee754_sqrt+0x10e>
 800666e:	458e      	cmp	lr, r1
 8006670:	d811      	bhi.n	8006696 <__ieee754_sqrt+0x10e>
 8006672:	f1be 0f00 	cmp.w	lr, #0
 8006676:	eb0e 000c 	add.w	r0, lr, ip
 800667a:	da42      	bge.n	8006702 <__ieee754_sqrt+0x17a>
 800667c:	2800      	cmp	r0, #0
 800667e:	db40      	blt.n	8006702 <__ieee754_sqrt+0x17a>
 8006680:	f102 0801 	add.w	r8, r2, #1
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	458e      	cmp	lr, r1
 8006688:	bf88      	it	hi
 800668a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800668e:	eba1 010e 	sub.w	r1, r1, lr
 8006692:	4464      	add	r4, ip
 8006694:	4642      	mov	r2, r8
 8006696:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800669a:	3f01      	subs	r7, #1
 800669c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80066a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80066a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80066a8:	d1dc      	bne.n	8006664 <__ieee754_sqrt+0xdc>
 80066aa:	4319      	orrs	r1, r3
 80066ac:	d01b      	beq.n	80066e6 <__ieee754_sqrt+0x15e>
 80066ae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006734 <__ieee754_sqrt+0x1ac>
 80066b2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006738 <__ieee754_sqrt+0x1b0>
 80066b6:	e9da 0100 	ldrd	r0, r1, [sl]
 80066ba:	e9db 2300 	ldrd	r2, r3, [fp]
 80066be:	f7f9 fd8f 	bl	80001e0 <__aeabi_dsub>
 80066c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4640      	mov	r0, r8
 80066cc:	4649      	mov	r1, r9
 80066ce:	f7fa f9bb 	bl	8000a48 <__aeabi_dcmple>
 80066d2:	b140      	cbz	r0, 80066e6 <__ieee754_sqrt+0x15e>
 80066d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80066d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80066dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80066e0:	d111      	bne.n	8006706 <__ieee754_sqrt+0x17e>
 80066e2:	3601      	adds	r6, #1
 80066e4:	463c      	mov	r4, r7
 80066e6:	1072      	asrs	r2, r6, #1
 80066e8:	0863      	lsrs	r3, r4, #1
 80066ea:	07f1      	lsls	r1, r6, #31
 80066ec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80066f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80066f4:	bf48      	it	mi
 80066f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80066fa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80066fe:	4618      	mov	r0, r3
 8006700:	e756      	b.n	80065b0 <__ieee754_sqrt+0x28>
 8006702:	4690      	mov	r8, r2
 8006704:	e7be      	b.n	8006684 <__ieee754_sqrt+0xfc>
 8006706:	f7f9 fd6d 	bl	80001e4 <__adddf3>
 800670a:	e9da 8900 	ldrd	r8, r9, [sl]
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	f7fa f98d 	bl	8000a34 <__aeabi_dcmplt>
 800671a:	b120      	cbz	r0, 8006726 <__ieee754_sqrt+0x19e>
 800671c:	1ca0      	adds	r0, r4, #2
 800671e:	bf08      	it	eq
 8006720:	3601      	addeq	r6, #1
 8006722:	3402      	adds	r4, #2
 8006724:	e7df      	b.n	80066e6 <__ieee754_sqrt+0x15e>
 8006726:	1c63      	adds	r3, r4, #1
 8006728:	f023 0401 	bic.w	r4, r3, #1
 800672c:	e7db      	b.n	80066e6 <__ieee754_sqrt+0x15e>
 800672e:	bf00      	nop
 8006730:	7ff00000 	.word	0x7ff00000
 8006734:	20000068 	.word	0x20000068
 8006738:	20000060 	.word	0x20000060

0800673c <_init>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	bf00      	nop
 8006740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006742:	bc08      	pop	{r3}
 8006744:	469e      	mov	lr, r3
 8006746:	4770      	bx	lr

08006748 <_fini>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr
